import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-LMAYTEU7.js";

// node_modules/@daohaus/keychain-utils/node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/@daohaus/keychain-utils/node_modules/tslib/tslib.js"(exports, module) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __esDecorate;
    var __runInitializers;
    var __propKey;
    var __setFunctionName;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    var __addDisposableResource;
    var __disposeResources;
    (function(factory) {
      var root = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __esDecorate = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f !== "function")
            throw new TypeError("Function expected");
          return f;
        }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn)
            context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access)
            context.access[p] = contextIn.access[p];
          context.addInitializer = function(f) {
            if (done)
              throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
          if (kind === "accessor") {
            if (result === void 0)
              continue;
            if (result === null || typeof result !== "object")
              throw new TypeError("Object expected");
            if (_ = accept(result.get))
              descriptor.get = _;
            if (_ = accept(result.set))
              descriptor.set = _;
            if (_ = accept(result.init))
              initializers.unshift(_);
          } else if (_ = accept(result)) {
            if (kind === "field")
              initializers.unshift(_);
            else
              descriptor[key] = _;
          }
        }
        if (target)
          Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      };
      __runInitializers = function(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      };
      __propKey = function(x) {
        return typeof x === "symbol" ? x : "".concat(x);
      };
      __setFunctionName = function(f, name, prefix) {
        if (typeof name === "symbol")
          name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      __addDisposableResource = function(env, value, async) {
        if (value !== null && value !== void 0) {
          if (typeof value !== "object" && typeof value !== "function")
            throw new TypeError("Object expected.");
          var dispose;
          if (async) {
            if (!Symbol.asyncDispose)
              throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
            if (!Symbol.dispose)
              throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
          }
          if (typeof dispose !== "function")
            throw new TypeError("Object not disposable.");
          env.stack.push({ value, dispose, async });
        } else if (async) {
          env.stack.push({ async: true });
        }
        return value;
      };
      var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
      };
      __disposeResources = function(env) {
        function fail(e) {
          env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
          env.hasError = true;
        }
        function next() {
          while (env.stack.length) {
            var rec = env.stack.pop();
            try {
              var result = rec.dispose && rec.dispose.call(rec.value);
              if (rec.async)
                return Promise.resolve(result).then(next, function(e) {
                  fail(e);
                  return next();
                });
            } catch (e) {
              fail(e);
            }
          }
          if (env.hasError)
            throw env.error;
        }
        return next();
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__esDecorate", __esDecorate);
      exporter("__runInitializers", __runInitializers);
      exporter("__propKey", __propKey);
      exporter("__setFunctionName", __setFunctionName);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
      exporter("__addDisposableResource", __addDisposableResource);
      exporter("__disposeResources", __disposeResources);
    });
  }
});

// node_modules/@daohaus/keychain-utils/src/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ABI_EXPLORER_KEYS = exports.PINATA_API_KEYS = exports.GRAPH_API_KEYS = exports.HAUS_RPC = exports.HAUS_RPC_DEFAULTS = exports.getGraphUrl = exports.addApiKeyToGraphEnpoints = exports.ENDPOINTS = void 0;
    exports.ENDPOINTS = {
      V3_SUBGRAPH: {
        "0x1": "https://gateway.thegraph.com/api/[api-key]/subgraphs/id/GfHFdFmiSwW1PKtnDhhcxhArwtTjVuMnXxQ5XcETF1bP",
        "0x5": "https://api.thegraph.com/subgraphs/name/hausdao/daohaus-v3-goerli",
        "0x64": "https://gateway.thegraph.com/api/[api-key]/subgraphs/id/5oXHJGgAWTSEXHK5FGf7mcxYtk6rSz7MJV5ccvGfoW6q",
        "0x89": "https://api.thegraph.com/subgraphs/name/hausdao/daohaus-v3-polygon",
        "0xa": "https://api.thegraph.com/subgraphs/name/hausdao/daohaus-v3-optimism",
        "0xa4b1": "https://api.thegraph.com/subgraphs/name/hausdao/daohaus-v3-arbitrum"
      },
      EXPLORER: {
        "0x1": "https://etherscan.io",
        "0x5": "https://goerli.etherscan.io",
        "0x64": "https://gnosisscan.io",
        "0x89": "https://polygonscan.com",
        "0xa": "https://optimistic.etherscan.io",
        "0xa4b1": "https://arbiscan.io"
      },
      GNOSIS_API: {
        "0x1": "https://safe-transaction-mainnet.safe.global/api/v1",
        "0x5": "https://safe-transaction-goerli.safe.global/api/v1",
        "0x64": "https://safe-transaction-gnosis-chain.safe.global/api/v1",
        "0x89": "https://safe-transaction-polygon.safe.global/api/v1",
        "0xa": "https://safe-transaction-optimism.safe.global/api/v1",
        "0xa4b1": "https://safe-transaction-arbitrum.safe.global/api/v1"
      },
      GNOSIS_SAFE_UI: {
        "0x1": "https://app.safe.global/eth",
        "0x5": "https://app.safe.global/gor",
        "0x64": "https://app.safe.global/gno",
        "0x89": "https://app.safe.global/matic",
        "0xa": "https://app.safe.global/oeth",
        "0xa4b1": "https://app.safe.global/arb"
      },
      TABULA_GRAPH: {
        "0x5": "https://api.thegraph.com/subgraphs/name/auryn-macmillan/tabula-goerli"
      }
    };
    var addApiKeyToGraphEnpoints = (graphApiKeys, endpoints) => {
      return Object.keys(graphApiKeys).reduce((acc, key) => {
        if (endpoints["V3_SUBGRAPH"][key] && acc) {
          const unreplacedValue = acc["V3_SUBGRAPH"][key];
          const apiKey = graphApiKeys[key];
          if (unreplacedValue && apiKey) {
            acc["V3_SUBGRAPH"][key] = unreplacedValue.replace("[api-key]", apiKey);
          }
        }
        return acc;
      }, endpoints);
    };
    exports.addApiKeyToGraphEnpoints = addApiKeyToGraphEnpoints;
    var getGraphUrl = (networkId, graphApiKeys) => {
      if (graphApiKeys) {
        const endpoints = (0, exports.addApiKeyToGraphEnpoints)(graphApiKeys, exports.ENDPOINTS);
        return endpoints["V3_SUBGRAPH"][networkId];
      }
      return exports.ENDPOINTS["V3_SUBGRAPH"][networkId];
    };
    exports.getGraphUrl = getGraphUrl;
    exports.HAUS_RPC_DEFAULTS = {
      "0x1": process.env["NX_RIVET_KEY"] ? `https://${process.env["NX_RIVET_KEY"]}.eth.rpc.rivet.cloud` : `https://eth-mainnet.g.alchemy.com/v2/${process.env["NX_ETHEREUM_ALCHEMY_KEY"]}`,
      "0x5": process.env["NX_RIVET_KEY"] ? `https://${process.env["NX_RIVET_KEY"]}.goerli.rpc.rivet.cloud/` : `https://eth-goerli.g.alchemy.com/v2/demo`,
      "0x64": "https://rpc.gnosischain.com/",
      "0xa": process.env["NX_OPTIMISM_ALCHEMY_KEY"] ? `https://opt-mainnet.g.alchemy.com/v2/${process.env["NX_OPTIMISM_ALCHEMY_KEY"]}` : "https://mainnet.optimism.io",
      "0x89": process.env["NX_POLYGONPOS_ALCHEMY_KEY"] ? `https://polygon-mainnet.g.alchemy.com/v2/${process.env["NX_POLYGONPOS_ALCHEMY_KEY"]}` : "https://polygon-rpc.com/",
      "0xa4b1": process.env["NX_ARBITRUM_ALCHEMY_KEY"] ? `https://arb-mainnet.g.alchemy.com/v2/${process.env["NX_ARBITRUM_ALCHEMY_KEY"]}` : "https://arb1.arbitrum.io/rpc"
    };
    exports.HAUS_RPC = {
      "0x1": process.env["NX_MAINNET_RPC"] ? process.env["NX_MAINNET_RPC"] : exports.HAUS_RPC_DEFAULTS["0x1"],
      "0x5": process.env["NX_GOERLI_RPC"] ? process.env["NX_GOERLI_RPC"] : exports.HAUS_RPC_DEFAULTS["0x5"],
      "0x64": process.env["NX_GNOSISCHAIN_RPC"] ? process.env["NX_GNOSISCHAIN_RPC"] : exports.HAUS_RPC_DEFAULTS["0x64"],
      "0xa": process.env["NX_OPTIMISM_RPC"] ? process.env["NX_OPTIMISM_RPC"] : exports.HAUS_RPC_DEFAULTS["0xa"],
      "0x89": process.env["NX_POLYGONPOS_RPC"] ? process.env["NX_POLYGONPOS_RPC"] : exports.HAUS_RPC_DEFAULTS["0x89"],
      "0xa4b1": process.env["NX_ARBITRUM_RPC"] ? process.env["NX_ARBITRUM_RPC"] : exports.HAUS_RPC_DEFAULTS["0xa4b1"]
    };
    exports.GRAPH_API_KEYS = {
      "0x1": process.env["NX_GRAPH_API_KEY_MAINNET"],
      "0x64": process.env["NX_GRAPH_API_KEY_MAINNET"]
    };
    exports.PINATA_API_KEYS = {
      pinata_api_key: process.env["NX_PINATA_API_KEY"],
      pinata_api_secret: process.env["NX_PINATA_API_SECRET"]
    };
    exports.ABI_EXPLORER_KEYS = {
      "0x1": process.env["NX_ETHERSCAN_KEY"],
      "0x5": process.env["NX_ETHERSCAN_KEY"],
      "0x64": process.env["NX_GNOSISSCAN_KEY"],
      "0x89": process.env["NX_POLYGONSCAN_KEY"],
      "0xa": process.env["NX_OPTIMISMSCAN_KEY"],
      "0xa4b1": process.env["NX_ARBISCAN_KEY"]
    };
  }
});

// node_modules/@daohaus/keychain-utils/src/networkData.js
var require_networkData = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/networkData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HAUS_NETWORK_DATA = void 0;
    var endpoints_1 = require_endpoints();
    exports.HAUS_NETWORK_DATA = {
      "0x1": {
        chainId: "0x1",
        networkId: 1,
        name: "Mainnet",
        symbol: "ETH",
        tokenDecimals: 18,
        explorer: endpoints_1.ENDPOINTS.EXPLORER["0x1"],
        rpc: endpoints_1.HAUS_RPC["0x1"]
      },
      "0x5": {
        chainId: "0x5",
        networkId: 5,
        name: "Goerli",
        symbol: "ETH",
        tokenDecimals: 18,
        explorer: endpoints_1.ENDPOINTS.EXPLORER["0x5"],
        rpc: endpoints_1.HAUS_RPC["0x5"]
      },
      "0x64": {
        chainId: "0x64",
        networkId: 100,
        name: "Gnosis Chain",
        symbol: "XDAI",
        tokenDecimals: 18,
        explorer: endpoints_1.ENDPOINTS.EXPLORER["0x64"],
        rpc: endpoints_1.HAUS_RPC["0x64"]
      },
      "0x89": {
        chainId: "0x89",
        networkId: 137,
        name: "Polygon",
        symbol: "MATIC",
        tokenDecimals: 18,
        explorer: endpoints_1.ENDPOINTS.EXPLORER["0x89"],
        rpc: endpoints_1.HAUS_RPC["0x89"]
      },
      "0xa": {
        chainId: "0xa",
        networkId: 10,
        name: "Optimism",
        symbol: "ETH",
        tokenDecimals: 18,
        explorer: endpoints_1.ENDPOINTS.EXPLORER["0xa"],
        rpc: endpoints_1.HAUS_RPC["0xa"]
      },
      "0xa4b1": {
        chainId: "0xa4b1",
        networkId: 42161,
        name: "Arbitrum",
        symbol: "ETH",
        tokenDecimals: 18,
        explorer: endpoints_1.ENDPOINTS.EXPLORER["0xa4b1"],
        rpc: endpoints_1.HAUS_RPC["0xa4b1"]
      }
    };
  }
});

// node_modules/@daohaus/keychain-utils/src/explorerUtils.js
var require_explorerUtils = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/explorerUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateExplorerLink = void 0;
    var endpoints_1 = require_endpoints();
    var generateExplorerLink = ({ chainId, address, type = "address" }) => `${endpoints_1.ENDPOINTS.EXPLORER[chainId]}/${type}/${address || ""}`;
    exports.generateExplorerLink = generateExplorerLink;
  }
});

// node_modules/@daohaus/keychain-utils/src/validNetworks.js
var require_validNetworks = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/validNetworks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VALID_NETWORKS = void 0;
    exports.VALID_NETWORKS = {
      "0x1": true,
      "0x5": true,
      "0x64": true,
      "0xa": true,
      "0x89": true,
      "0xa4b1": true
    };
  }
});

// node_modules/@daohaus/keychain-utils/src/networkUtils.js
var require_networkUtils = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/networkUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNetworkById = exports.getNetworkName = exports.getNetwork = exports.isValidNetwork = void 0;
    var networkData_1 = require_networkData();
    var validNetworks_1 = require_validNetworks();
    var isValidNetwork = (str, networks) => networks ? networks[str] !== void 0 : validNetworks_1.VALID_NETWORKS[str] !== void 0;
    exports.isValidNetwork = isValidNetwork;
    var getNetwork = (chainId, networks = networkData_1.HAUS_NETWORK_DATA) => {
      if (!(0, exports.isValidNetwork)(chainId)) {
        return null;
      }
      return networks[chainId];
    };
    exports.getNetwork = getNetwork;
    var getNetworkName = (chainId, networks) => {
      var _a;
      return ((_a = (0, exports.getNetwork)(chainId, networks)) === null || _a === void 0 ? void 0 : _a.name) || null;
    };
    exports.getNetworkName = getNetworkName;
    var getNetworkById = (networkId, networks = networkData_1.HAUS_NETWORK_DATA) => {
      const network = Object.values(networks).find((net) => net.networkId === networkId);
      return network;
    };
    exports.getNetworkById = getNetworkById;
  }
});

// node_modules/@daohaus/keychain-utils/src/types.js
var require_types = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@daohaus/keychain-utils/src/contractKeychains.js
var require_contractKeychains = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/contractKeychains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CONTRACT_KEYCHAINS = void 0;
    exports.CONTRACT_KEYCHAINS = {
      V3_FACTORY_ADV_TOKEN: {
        "0x1": "0x8a4A9E36106Ee290811B89e06e2faFE913507965",
        "0x5": "0xb0c5c96c3d21c1d58B98a5366dF0Af7AfcD94F95",
        "0x64": "0x8a4A9E36106Ee290811B89e06e2faFE913507965",
        "0x89": "0x8a4A9E36106Ee290811B89e06e2faFE913507965",
        "0xa": "0x84561C97156a128662B62952890469214FDC87bf",
        "0xa4b1": "0x8a4A9E36106Ee290811B89e06e2faFE913507965"
      },
      V3_FACTORY_ORIGINAL: {
        "0x1": "0x7e988A9db2F8597735fc68D21060Daed948a3e8C",
        "0x5": "0x7e988A9db2F8597735fc68D21060Daed948a3e8C",
        "0x64": "0x7e988A9db2F8597735fc68D21060Daed948a3e8C",
        "0x89": "0x7e988A9db2F8597735fc68D21060Daed948a3e8C",
        "0xa": "0x3E0eAdE343Ddc556a6Cf0f858e4f685ba303ce71",
        "0xa4b1": "0xb08Cc8C343cF6dC20d8cf51Fb2D6C436c6390dAa"
      },
      LOOT_SINGLETON: {
        "0x1": "0x0444AE984b9563C8480244693ED65F25B3C64a4E",
        "0x5": "0x0444AE984b9563C8480244693ED65F25B3C64a4E",
        "0x64": "0x0444AE984b9563C8480244693ED65F25B3C64a4E",
        "0x89": "0x0444AE984b9563C8480244693ED65F25B3C64a4E",
        "0xa": "0x0444AE984b9563C8480244693ED65F25B3C64a4E",
        "0xa4b1": "0x0444AE984b9563C8480244693ED65F25B3C64a4E"
      },
      SHARES_SINGLETON: {
        "0x1": "0x8124Cbb807A7b64123F3dEc3EF64995d8B10d3Eb",
        "0x5": "0x8124Cbb807A7b64123F3dEc3EF64995d8B10d3Eb",
        "0x64": "0x8124Cbb807A7b64123F3dEc3EF64995d8B10d3Eb",
        "0x89": "0x8124Cbb807A7b64123F3dEc3EF64995d8B10d3Eb",
        "0xa": "0x8124Cbb807A7b64123F3dEc3EF64995d8B10d3Eb",
        "0xa4b1": "0x8124Cbb807A7b64123F3dEc3EF64995d8B10d3Eb"
      },
      BAAL_SINGLETON: {
        "0x1": "0x5DcE1044A7E2E35D6524001796cee47252f18411",
        "0x5": "0x5DcE1044A7E2E35D6524001796cee47252f18411",
        "0x64": "0x5DcE1044A7E2E35D6524001796cee47252f18411",
        "0x89": "0x5DcE1044A7E2E35D6524001796cee47252f18411",
        "0xa": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "0xa4b1": "0x17234C0Ae25AF09fAf57B9D5ea2B93C1f220E800"
      },
      GNOSIS_MULTISEND: {
        "0x1": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "0x5": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "0x64": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "0x89": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "0xa": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "0xa4b1": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761"
      },
      GNOSIS_SIGNLIB: {
        "0x1": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "0x5": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "0x64": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "0x89": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "0xa": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "0xa4b1": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2"
      },
      TRIBUTE_MINION: {
        "0x1": "0x5c17BFBaB751C5ddF1Ff267acF8fF919537F39Cf",
        "0x5": "0x5c17BFBaB751C5ddF1Ff267acF8fF919537F39Cf",
        "0x64": "0x5c17BFBaB751C5ddF1Ff267acF8fF919537F39Cf",
        "0x89": "0x51498dDdd2A8cdeC82932E08A37eBaF346C38EFd",
        "0xa": "0x7707964B4C24A6b8b7B747F7507F56818857A7C2",
        "0xa4b1": "0x7707964B4C24A6b8b7B747F7507F56818857A7C2"
      },
      POSTER: {
        "0x1": "0x000000000000cd17345801aa8147b8d3950260ff",
        "0x5": "0x000000000000cd17345801aa8147b8d3950260ff",
        "0x64": "0x000000000000cd17345801aa8147b8d3950260ff",
        "0x89": "0x000000000000cd17345801aa8147b8d3950260ff",
        "0xa": "0x000000000000cd17345801aa8147b8d3950260ff",
        "0xa4b1": "0x000000000000cd17345801aa8147b8d3950260ff"
      },
      VAULT_SUMMONER: {
        "0x1": "0x594E630efbe8dbd810c168e3878817a4094bB312",
        "0x5": "0x594E630efbe8dbd810c168e3878817a4094bB312",
        "0x64": "0x594E630efbe8dbd810c168e3878817a4094bB312",
        "0x89": "0x594E630efbe8dbd810c168e3878817a4094bB312",
        "0xa": "0xb04111e7b4576164145EF97EB81fd43DA0F2D675",
        "0xa4b1": "0xC39E8D4DE75c6aC025a0C07dCd8Aeb0728C5DBF1"
      },
      ZODIAC_FACTORY: {
        "0x1": "0x00000000000DC7F163742Eb4aBEf650037b1f588",
        "0x5": "0x00000000000DC7F163742Eb4aBEf650037b1f588",
        "0x64": "0x00000000000DC7F163742Eb4aBEf650037b1f588",
        "0x89": "0x00000000000DC7F163742Eb4aBEf650037b1f588",
        "0xa": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "0xa4b1": "0x00000000000DC7F163742Eb4aBEf650037b1f588"
      }
    };
  }
});

// node_modules/@wagmi/chains/dist/index.mjs
var arbitrum, arbitrumGoerli, arbitrumNova, aurora, auroraTestnet, avalanche, avalancheFuji, base, baseGoerli, boba, bronos, bronosTestnet, bsc, bscTestnet, bxn, bxnTestnet, canto, celo, celoAlfajores, celoCannoli, classic, cronos, cronosTestnet, crossbell, dfk, dogechain, edgeware, edgewareTestnet, eos, eosTestnet, evmos, evmosTestnet, ekta, ektaTestnet, fantom, fantomTestnet, fibo, filecoin, filecoinCalibration, filecoinHyperspace, flare, flareTestnet, foundry, fuse, fuseSparknet, iotex, iotexTestnet, gobi, goerli, gnosis, gnosisChiado, hardhat, harmonyOne, haqqMainnet, haqqTestedge2, klaytn, linea, lineaTestnet, localhost, mainnet, mantle, mantleTestnet, metis, metisGoerli, mev, mevTestnet, modeTestnet, moonbaseAlpha, moonbeam, moonriver, neonDevnet, nexi, nexilix, oasys, okc, optimism, optimismGoerli, polygon, polygonMumbai, polygonZkEvmTestnet, polygonZkEvm, pulsechain, pulsechainV4, qMainnet, qTestnet, rollux, rolluxTestnet, ronin, saigon, scrollSepolia, scrollTestnet, sepolia, skaleBlockBrawlers, skaleCalypso, skaleCalypsoTestnet, skaleChaosTestnet, skaleCryptoBlades, skaleCryptoColosseum, skaleEuropa, skaleEuropaTestnet, skaleExorde, skaleHumanProtocol, skaleNebula, skaleNebulaTestnet, skaleRazor, skaleTitan, skaleTitanTestnet, songbird, songbirdTestnet, shardeumSphinx, syscoin, syscoinTestnet, taraxa, taikoTestnetSepolia, taraxaTestnet, telos, telosTestnet, thunderTestnet, wanchain, wanchainTestnet, xdc, xdcTestnet, zhejiang, zkSync, zkSyncTestnet, zetachainAthensTestnet, zora, zoraTestnet;
var init_dist = __esm({
  "node_modules/@wagmi/chains/dist/index.mjs"() {
    arbitrum = {
      id: 42161,
      name: "Arbitrum One",
      network: "arbitrum",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://arb-mainnet.g.alchemy.com/v2"],
          webSocket: ["wss://arb-mainnet.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://arbitrum-mainnet.infura.io/v3"],
          webSocket: ["wss://arbitrum-mainnet.infura.io/ws/v3"]
        },
        default: {
          http: ["https://arb1.arbitrum.io/rpc"]
        },
        public: {
          http: ["https://arb1.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        etherscan: { name: "Arbiscan", url: "https://arbiscan.io" },
        default: { name: "Arbiscan", url: "https://arbiscan.io" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7654707
        }
      }
    };
    arbitrumGoerli = {
      id: 421613,
      name: "Arbitrum Goerli",
      network: "arbitrum-goerli",
      nativeCurrency: {
        name: "Arbitrum Goerli Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        alchemy: {
          http: ["https://arb-goerli.g.alchemy.com/v2"],
          webSocket: ["wss://arb-goerli.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://arbitrum-goerli.infura.io/v3"],
          webSocket: ["wss://arbitrum-goerli.infura.io/ws/v3"]
        },
        default: {
          http: ["https://goerli-rollup.arbitrum.io/rpc"]
        },
        public: {
          http: ["https://goerli-rollup.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        etherscan: { name: "Arbiscan", url: "https://goerli.arbiscan.io/" },
        default: { name: "Arbiscan", url: "https://goerli.arbiscan.io/" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 88114
        }
      },
      testnet: true
    };
    arbitrumNova = {
      id: 42170,
      name: "Arbitrum Nova",
      network: "arbitrum-nova",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        blast: {
          http: ["https://arbitrum-nova.public.blastapi.io"],
          webSocket: ["wss://arbitrum-nova.public.blastapi.io"]
        },
        default: {
          http: ["https://nova.arbitrum.io/rpc"]
        },
        public: {
          http: ["https://nova.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        etherscan: { name: "Arbiscan", url: "https://nova.arbiscan.io" },
        blockScout: {
          name: "BlockScout",
          url: "https://nova-explorer.arbitrum.io/"
        },
        default: { name: "Arbiscan", url: "https://nova.arbiscan.io" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1746963
        }
      }
    };
    aurora = {
      id: 1313161554,
      name: "Aurora",
      network: "aurora",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        infura: { http: ["https://aurora-mainnet.infura.io/v3"] },
        default: { http: ["https://mainnet.aurora.dev"] },
        public: { http: ["https://mainnet.aurora.dev"] }
      },
      blockExplorers: {
        etherscan: { name: "Aurorascan", url: "https://aurorascan.dev" },
        default: { name: "Aurorascan", url: "https://aurorascan.dev" }
      }
    };
    auroraTestnet = {
      id: 1313161555,
      name: "Aurora Testnet",
      network: "aurora-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        infura: { http: ["https://aurora-testnet.infura.io/v3"] },
        default: { http: ["https://testnet.aurora.dev"] },
        public: { http: ["https://testnet.aurora.dev"] }
      },
      blockExplorers: {
        etherscan: { name: "Aurorascan", url: "https://testnet.aurorascan.dev" },
        default: { name: "Aurorascan", url: "https://testnet.aurorascan.dev" }
      },
      testnet: true
    };
    avalanche = {
      id: 43114,
      name: "Avalanche",
      network: "avalanche",
      nativeCurrency: {
        decimals: 18,
        name: "Avalanche",
        symbol: "AVAX"
      },
      rpcUrls: {
        default: { http: ["https://api.avax.network/ext/bc/C/rpc"] },
        public: { http: ["https://api.avax.network/ext/bc/C/rpc"] }
      },
      blockExplorers: {
        etherscan: { name: "SnowTrace", url: "https://snowtrace.io" },
        default: { name: "SnowTrace", url: "https://snowtrace.io" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 11907934
        }
      }
    };
    avalancheFuji = {
      id: 43113,
      name: "Avalanche Fuji",
      network: "avalanche-fuji",
      nativeCurrency: {
        decimals: 18,
        name: "Avalanche Fuji",
        symbol: "AVAX"
      },
      rpcUrls: {
        default: { http: ["https://api.avax-test.network/ext/bc/C/rpc"] },
        public: { http: ["https://api.avax-test.network/ext/bc/C/rpc"] }
      },
      blockExplorers: {
        etherscan: { name: "SnowTrace", url: "https://testnet.snowtrace.io" },
        default: { name: "SnowTrace", url: "https://testnet.snowtrace.io" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7096959
        }
      },
      testnet: true
    };
    base = {
      id: 8453,
      network: "base",
      name: "Base",
      nativeCurrency: { name: "Base", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.base.org"]
        },
        public: {
          http: ["https://mainnet.base.org"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "Basescout",
          url: "https://base.blockscout.com"
        },
        default: {
          name: "Basescan",
          url: "https://basescan.org"
        },
        etherscan: {
          name: "Basescan",
          url: "https://basescan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 5022
        }
      }
    };
    baseGoerli = {
      id: 84531,
      network: "base-goerli",
      name: "Base Goerli",
      nativeCurrency: { name: "Base Goerli", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://goerli.base.org"]
        },
        public: {
          http: ["https://goerli.base.org"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "Basescan",
          url: "https://goerli.basescan.org"
        },
        default: {
          name: "Basescan",
          url: "https://goerli.basescan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1376988
        }
      },
      testnet: true
    };
    boba = {
      id: 288,
      name: "Boba Network",
      network: "boba",
      nativeCurrency: {
        decimals: 18,
        name: "Boba",
        symbol: "BOBA"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.boba.network"] },
        public: { http: ["https://mainnet.boba.network"] }
      },
      blockExplorers: {
        etherscan: { name: "BOBAScan", url: "https://bobascan.com" },
        default: { name: "BOBAScan", url: "https://bobascan.com" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 446859
        }
      }
    };
    bronos = {
      id: 1039,
      name: "Bronos",
      network: "bronos",
      nativeCurrency: {
        decimals: 18,
        name: "BRO",
        symbol: "BRO"
      },
      rpcUrls: {
        default: { http: ["https://evm.bronos.org"] },
        public: { http: ["https://evm.bronos.org"] }
      },
      blockExplorers: {
        default: { name: "BronoScan", url: "https://broscan.bronos.org" }
      }
    };
    bronosTestnet = {
      id: 1038,
      name: "Bronos Testnet",
      network: "bronos-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Bronos Coin",
        symbol: "tBRO"
      },
      rpcUrls: {
        default: { http: ["https://evm-testnet.bronos.org"] },
        public: { http: ["https://evm-testnet.bronos.org"] }
      },
      blockExplorers: {
        default: { name: "BronoScan", url: "https://tbroscan.bronos.org" }
      },
      testnet: true
    };
    bsc = {
      id: 56,
      name: "BNB Smart Chain",
      network: "bsc",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "BNB"
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/bsc"] },
        public: { http: ["https://rpc.ankr.com/bsc"] }
      },
      blockExplorers: {
        etherscan: { name: "BscScan", url: "https://bscscan.com" },
        default: { name: "BscScan", url: "https://bscscan.com" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 15921452
        }
      }
    };
    bscTestnet = {
      id: 97,
      name: "Binance Smart Chain Testnet",
      network: "bsc-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "tBNB"
      },
      rpcUrls: {
        default: { http: ["https://data-seed-prebsc-1-s1.binance.org:8545"] },
        public: { http: ["https://data-seed-prebsc-1-s1.binance.org:8545"] }
      },
      blockExplorers: {
        etherscan: { name: "BscScan", url: "https://testnet.bscscan.com" },
        default: { name: "BscScan", url: "https://testnet.bscscan.com" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 17422483
        }
      },
      testnet: true
    };
    bxn = {
      id: 4999,
      name: "BlackFort Exchange Network",
      network: "bxn",
      nativeCurrency: { name: "BlackFort Token", symbol: "BXN", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.blackfort.network/rpc"]
        },
        public: {
          http: ["https://mainnet.blackfort.network/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer.blackfort.network"
        }
      }
    };
    bxnTestnet = {
      id: 4777,
      name: "BlackFort Exchange Network Testnet",
      network: "bxnTestnet",
      nativeCurrency: {
        name: "BlackFort Testnet Token",
        symbol: "TBXN",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.blackfort.network/rpc"]
        },
        public: {
          http: ["https://testnet.blackfort.network/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://testnet-explorer.blackfort.network"
        }
      }
    };
    canto = {
      id: 7700,
      name: "Canto",
      network: "canto",
      nativeCurrency: {
        decimals: 18,
        name: "Canto",
        symbol: "CANTO"
      },
      rpcUrls: {
        default: { http: ["https://canto.gravitychain.io"] },
        public: { http: ["https://canto.gravitychain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Tuber.Build (Blockscout)",
          url: "https://tuber.build"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2905789
        }
      }
    };
    celo = {
      id: 42220,
      name: "Celo",
      network: "celo",
      nativeCurrency: {
        decimals: 18,
        name: "CELO",
        symbol: "CELO"
      },
      rpcUrls: {
        default: { http: ["https://forno.celo.org"] },
        infura: {
          http: ["https://celo-mainnet.infura.io/v3"]
        },
        public: {
          http: ["https://forno.celo.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Celo Explorer",
          url: "https://explorer.celo.org/mainnet"
        },
        etherscan: { name: "CeloScan", url: "https://celoscan.io" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 13112599
        }
      },
      testnet: false
    };
    celoAlfajores = {
      id: 44787,
      name: "Alfajores",
      network: "celo-alfajores",
      nativeCurrency: {
        decimals: 18,
        name: "CELO",
        symbol: "A-CELO"
      },
      rpcUrls: {
        default: {
          http: ["https://alfajores-forno.celo-testnet.org"]
        },
        infura: {
          http: ["https://celo-alfajores.infura.io/v3"]
        },
        public: {
          http: ["https://alfajores-forno.celo-testnet.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Celo Explorer",
          url: "https://explorer.celo.org/alfajores"
        },
        etherscan: { name: "CeloScan", url: "https://alfajores.celoscan.io/" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 14569001
        }
      },
      testnet: true
    };
    celoCannoli = {
      id: 17323,
      name: "Cannoli",
      network: "celo-cannoli",
      nativeCurrency: {
        decimals: 18,
        name: "CELO",
        symbol: "C-CELO"
      },
      rpcUrls: {
        default: {
          http: ["https://forno.cannoli.celo-testnet.org"]
        },
        public: {
          http: ["https://forno.cannoli.celo-testnet.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Celo Explorer",
          url: "https://explorer.celo.org/cannoli"
        }
      },
      contracts: {
        multicall3: {
          address: "0x5Acb0aa8BF4E8Ff0d882Ee187140713C12BF9718",
          blockCreated: 87429
        }
      },
      testnet: true
    };
    classic = {
      id: 61,
      name: "Ethereum Classic",
      network: "classic",
      nativeCurrency: {
        decimals: 18,
        name: "ETC",
        symbol: "ETC"
      },
      rpcUrls: {
        default: { http: ["https://etc.rivet.link"] },
        public: { http: ["https://etc.rivet.link"] }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.com/etc/mainnet"
        }
      }
    };
    cronos = {
      id: 25,
      name: "Cronos Mainnet",
      network: "cronos",
      nativeCurrency: {
        decimals: 18,
        name: "Cronos",
        symbol: "CRO"
      },
      rpcUrls: {
        default: { http: ["https://evm.cronos.org"] },
        public: { http: ["https://evm.cronos.org"] }
      },
      blockExplorers: {
        default: { name: "Cronoscan", url: "https://cronoscan.com" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1963112
        }
      }
    };
    cronosTestnet = {
      id: 338,
      name: "Cronos Testnet",
      network: "cronos-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "CRO",
        symbol: "tCRO"
      },
      rpcUrls: {
        default: { http: ["https://evm-t3.cronos.org"] },
        public: { http: ["https://evm-t3.cronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "Cronos Explorer",
          url: "https://cronos.org/explorer/testnet3"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 10191251
        }
      },
      testnet: true
    };
    crossbell = {
      id: 3737,
      network: "crossbell",
      name: "Crossbell",
      nativeCurrency: {
        decimals: 18,
        name: "CSB",
        symbol: "CSB"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.crossbell.io"]
        },
        public: {
          http: ["https://rpc.crossbell.io"]
        }
      },
      blockExplorers: {
        default: { name: "CrossScan", url: "https://scan.crossbell.io" }
      },
      contracts: {
        multicall3: {
          address: "0xBB9759009cDaC82774EfC84D94cD9F7440f75Fcf",
          blockCreated: 23499787
        }
      }
    };
    dfk = {
      id: 53935,
      name: "DFK Chain",
      network: "dfk",
      nativeCurrency: {
        decimals: 18,
        name: "Jewel",
        symbol: "JEWEL"
      },
      rpcUrls: {
        default: {
          http: ["https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"]
        },
        public: {
          http: ["https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "DFKSubnetScan",
          url: "https://subnets.avax.network/defi-kingdoms"
        },
        default: {
          name: "DFKSubnetScan",
          url: "https://subnets.avax.network/defi-kingdoms"
        }
      }
    };
    dogechain = {
      id: 2e3,
      name: "Dogechain",
      network: "dogechain",
      nativeCurrency: {
        decimals: 18,
        name: "Dogechain",
        symbol: "DC"
      },
      rpcUrls: {
        default: { http: ["https://rpc.dogechain.dog"] },
        public: { http: ["https://rpc.dogechain.dog"] }
      },
      blockExplorers: {
        etherscan: {
          name: "DogeChainExplorer",
          url: "https://explorer.dogechain.dog"
        },
        default: {
          name: "DogeChainExplorer",
          url: "https://explorer.dogechain.dog"
        }
      }
    };
    edgeware = {
      id: 2021,
      name: "Edgeware EdgeEVM Mainnet",
      network: "edgeware",
      nativeCurrency: {
        decimals: 18,
        name: "Edgeware",
        symbol: "EDG"
      },
      rpcUrls: {
        default: { http: ["https://edgeware-evm.jelliedowl.net"] },
        public: { http: ["https://edgeware-evm.jelliedowl.net"] }
      },
      blockExplorers: {
        etherscan: { name: "Edgscan by Bharathcoorg", url: "https://edgscan.live" },
        default: { name: "Edgscan by Bharathcoorg", url: "https://edgscan.live" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 18117872
        }
      }
    };
    edgewareTestnet = {
      id: 2022,
      name: "Beresheet BereEVM Testnet",
      network: "edgewareTestnet",
      nativeCurrency: {
        decimals: 18,
        name: "Testnet EDG",
        symbol: "tEDG"
      },
      rpcUrls: {
        default: { http: ["https://beresheet-evm.jelliedowl.net"] },
        public: { http: ["https://beresheet-evm.jelliedowl.net"] }
      },
      blockExplorers: {
        etherscan: {
          name: "Edgscan by Bharathcoorg",
          url: "https://testnet.edgscan.live"
        },
        default: {
          name: "Edgscan by Bharathcoorg",
          url: "https://testnet.edgscan.live"
        }
      }
    };
    eos = {
      id: 17777,
      name: "EOS EVM",
      network: "eos",
      nativeCurrency: {
        decimals: 18,
        name: "EOS",
        symbol: "EOS"
      },
      rpcUrls: {
        default: { http: ["https://api.evm.eosnetwork.com"] },
        public: { http: ["https://api.evm.eosnetwork.com"] }
      },
      blockExplorers: {
        etherscan: {
          name: "EOS EVM Explorer",
          url: "https://explorer.evm.eosnetwork.com"
        },
        default: {
          name: "EOS EVM Explorer",
          url: "https://explorer.evm.eosnetwork.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7943933
        }
      }
    };
    eosTestnet = {
      id: 15557,
      name: "EOS EVM Testnet",
      network: "eos",
      nativeCurrency: {
        decimals: 18,
        name: "EOS",
        symbol: "EOS"
      },
      rpcUrls: {
        default: { http: ["https://api.testnet.evm.eosnetwork.com"] },
        public: { http: ["https://api.testnet.evm.eosnetwork.com"] }
      },
      blockExplorers: {
        etherscan: {
          name: "EOS EVM Testnet Explorer",
          url: "https://explorer.testnet.evm.eosnetwork.com"
        },
        default: {
          name: "EOS EVM Testnet Explorer",
          url: "https://explorer.testnet.evm.eosnetwork.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 9067940
        }
      },
      testnet: true
    };
    evmos = {
      id: 9001,
      name: "Evmos",
      network: "evmos",
      nativeCurrency: {
        decimals: 18,
        name: "Evmos",
        symbol: "EVMOS"
      },
      rpcUrls: {
        default: { http: ["https://eth.bd.evmos.org:8545"] },
        public: { http: ["https://eth.bd.evmos.org:8545"] }
      },
      blockExplorers: {
        default: { name: "Evmos Block Explorer", url: "https://escan.live" }
      }
    };
    evmosTestnet = {
      id: 9e3,
      name: "Evmos Testnet",
      network: "evmos-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Evmos",
        symbol: "EVMOS"
      },
      rpcUrls: {
        default: { http: ["https://eth.bd.evmos.dev:8545"] },
        public: { http: ["https://eth.bd.evmos.dev:8545"] }
      },
      blockExplorers: {
        default: {
          name: "Evmos Testnet Block Explorer",
          url: "https://evm.evmos.dev/"
        }
      }
    };
    ekta = {
      id: 1994,
      name: "Ekta",
      network: "ekta",
      nativeCurrency: {
        decimals: 18,
        name: "EKTA",
        symbol: "EKTA"
      },
      rpcUrls: {
        public: { http: ["https://main.ekta.io"] },
        default: { http: ["https://main.ekta.io"] }
      },
      blockExplorers: {
        default: { name: "Ektascan", url: "https://ektascan.io" }
      }
    };
    ektaTestnet = {
      id: 1004,
      name: "Ekta Testnet",
      network: "ekta-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "EKTA",
        symbol: "EKTA"
      },
      rpcUrls: {
        public: { http: ["https://test.ekta.io:8545"] },
        default: { http: ["https://test.ekta.io:8545"] }
      },
      blockExplorers: {
        default: { name: "Test Ektascan", url: "https://test.ektascan.io" }
      },
      testnet: true
    };
    fantom = {
      id: 250,
      name: "Fantom",
      network: "fantom",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/fantom"] },
        public: { http: ["https://rpc.ankr.com/fantom"] }
      },
      blockExplorers: {
        etherscan: { name: "FTMScan", url: "https://ftmscan.com" },
        default: { name: "FTMScan", url: "https://ftmscan.com" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 33001987
        }
      }
    };
    fantomTestnet = {
      id: 4002,
      name: "Fantom Testnet",
      network: "fantom-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpc.testnet.fantom.network"] },
        public: { http: ["https://rpc.testnet.fantom.network"] }
      },
      blockExplorers: {
        etherscan: { name: "FTMScan", url: "https://testnet.ftmscan.com" },
        default: { name: "FTMScan", url: "https://testnet.ftmscan.com" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 8328688
        }
      }
    };
    fibo = {
      id: 12306,
      name: "Fibo Chain",
      network: "fibochain",
      nativeCurrency: {
        decimals: 18,
        name: "fibo",
        symbol: "FIBO"
      },
      rpcUrls: {
        default: { http: ["https://network.hzroc.art"] },
        public: { http: ["https://network.hzroc.art"] }
      },
      blockExplorers: {
        default: { name: "FiboScan", url: "https://scan.fibochain.org" }
      }
    };
    filecoin = {
      id: 314,
      name: "Filecoin Mainnet",
      network: "filecoin-mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "filecoin",
        symbol: "FIL"
      },
      rpcUrls: {
        default: { http: ["https://api.node.glif.io/rpc/v1"] },
        public: { http: ["https://api.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: { name: "Filfox", url: "https://filfox.info/en" },
        filscan: { name: "Filscan", url: "https://filscan.io" },
        filscout: { name: "Filscout", url: "https://filscout.io/en" },
        glif: { name: "Glif", url: "https://explorer.glif.io" }
      }
    };
    filecoinCalibration = {
      id: 314159,
      name: "Filecoin Calibration",
      network: "filecoin-calibration",
      nativeCurrency: {
        decimals: 18,
        name: "testnet filecoin",
        symbol: "tFIL"
      },
      rpcUrls: {
        default: { http: ["https://api.calibration.node.glif.io/rpc/v1"] },
        public: { http: ["https://api.calibration.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: { name: "Filscan", url: "https://calibration.filscan.io" }
      }
    };
    filecoinHyperspace = {
      id: 3141,
      name: "Filecoin Hyperspace",
      network: "filecoin-hyperspace",
      nativeCurrency: {
        decimals: 18,
        name: "testnet filecoin",
        symbol: "tFIL"
      },
      rpcUrls: {
        default: { http: ["https://api.hyperspace.node.glif.io/rpc/v1"] },
        public: { http: ["https://api.hyperspace.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: { name: "Filfox", url: "https://hyperspace.filfox.info/en" },
        filscan: { name: "Filscan", url: "https://hyperspace.filscan.io" }
      }
    };
    flare = {
      id: 14,
      name: "Flare Mainnet",
      network: "flare-mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "flare",
        symbol: "FLR"
      },
      rpcUrls: {
        default: { http: ["https://flare-api.flare.network/ext/C/rpc"] },
        public: { http: ["https://flare-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Flare Explorer",
          url: "https://flare-explorer.flare.network"
        }
      }
    };
    flareTestnet = {
      id: 114,
      name: "Coston2",
      network: "coston2",
      nativeCurrency: {
        decimals: 18,
        name: "coston2flare",
        symbol: "C2FLR"
      },
      rpcUrls: {
        default: { http: ["https://coston2-api.flare.network/ext/C/rpc"] },
        public: { http: ["https://coston2-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Coston2 Explorer",
          url: "https://coston2-explorer.flare.network"
        }
      },
      testnet: true
    };
    foundry = {
      id: 31337,
      name: "Foundry",
      network: "foundry",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["http://127.0.0.1:8545"],
          webSocket: ["ws://127.0.0.1:8545"]
        },
        public: {
          http: ["http://127.0.0.1:8545"],
          webSocket: ["ws://127.0.0.1:8545"]
        }
      }
    };
    fuse = {
      id: 122,
      name: "Fuse",
      network: "fuse",
      nativeCurrency: { name: "Fuse", symbol: "FUSE", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.fuse.io"] },
        public: { http: ["https://fuse-mainnet.chainstacklabs.com"] }
      },
      blockExplorers: {
        default: { name: "Fuse Explorer", url: "https://explorer.fuse.io" }
      }
    };
    fuseSparknet = {
      id: 123,
      name: "Fuse Sparknet",
      network: "fuse",
      nativeCurrency: { name: "Spark", symbol: "SPARK", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.fusespark.io"] },
        public: { http: ["https://rpc.fusespark.io"] }
      },
      blockExplorers: {
        default: {
          name: "Sparkent Explorer",
          url: "https://explorer.fusespark.io"
        }
      }
    };
    iotex = {
      id: 4689,
      name: "IoTeX",
      network: "iotex",
      nativeCurrency: {
        decimals: 18,
        name: "IoTeX",
        symbol: "IOTX"
      },
      rpcUrls: {
        default: {
          http: ["https://babel-api.mainnet.iotex.io"],
          webSocket: ["wss://babel-api.mainnet.iotex.io"]
        },
        public: {
          http: ["https://babel-api.mainnet.iotex.io"],
          webSocket: ["wss://babel-api.mainnet.iotex.io"]
        }
      },
      blockExplorers: {
        default: { name: "IoTeXScan", url: "https://iotexscan.io" }
      }
    };
    iotexTestnet = {
      id: 4690,
      name: "IoTeX Testnet",
      network: "iotex-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "IoTeX",
        symbol: "IOTX"
      },
      rpcUrls: {
        default: {
          http: ["https://babel-api.testnet.iotex.io"],
          webSocket: ["wss://babel-api.testnet.iotex.io"]
        },
        public: {
          http: ["https://babel-api.testnet.iotex.io"],
          webSocket: ["wss://babel-api.testnet.iotex.io"]
        }
      },
      blockExplorers: {
        default: { name: "IoTeXScan", url: "https://testnet.iotexscan.io" }
      }
    };
    gobi = {
      id: 1663,
      name: "Horizen Gobi Testnet",
      network: "gobi",
      nativeCurrency: {
        decimals: 18,
        name: "Test ZEN",
        symbol: "tZEN"
      },
      rpcUrls: {
        public: { http: ["https://gobi-testnet.horizenlabs.io/ethv1"] },
        default: { http: ["https://gobi-testnet.horizenlabs.io/ethv1"] }
      },
      blockExplorers: {
        default: { name: "Gobi Explorer", url: "https://gobi-explorer.horizen.io" }
      },
      contracts: {},
      testnet: true
    };
    goerli = {
      id: 5,
      network: "goerli",
      name: "Goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://eth-goerli.g.alchemy.com/v2"],
          webSocket: ["wss://eth-goerli.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://goerli.infura.io/v3"],
          webSocket: ["wss://goerli.infura.io/ws/v3"]
        },
        default: {
          http: ["https://rpc.ankr.com/eth_goerli"]
        },
        public: {
          http: ["https://rpc.ankr.com/eth_goerli"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "Etherscan",
          url: "https://goerli.etherscan.io"
        },
        default: {
          name: "Etherscan",
          url: "https://goerli.etherscan.io"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        ensUniversalResolver: {
          address: "0x56522D00C410a43BFfDF00a9A569489297385790",
          blockCreated: 8765204
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 6507670
        }
      },
      testnet: true
    };
    gnosis = {
      id: 100,
      name: "Gnosis",
      network: "gnosis",
      nativeCurrency: {
        decimals: 18,
        name: "Gnosis",
        symbol: "xDAI"
      },
      rpcUrls: {
        default: { http: ["https://rpc.gnosischain.com"] },
        public: { http: ["https://rpc.gnosischain.com"] }
      },
      blockExplorers: {
        etherscan: {
          name: "Gnosisscan",
          url: "https://gnosisscan.io"
        },
        default: {
          name: "Gnosis Chain Explorer",
          url: "https://blockscout.com/xdai/mainnet"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 21022491
        }
      }
    };
    gnosisChiado = {
      id: 10200,
      name: "Gnosis Chiado",
      network: "chiado",
      nativeCurrency: {
        decimals: 18,
        name: "Gnosis",
        symbol: "xDAI"
      },
      rpcUrls: {
        default: { http: ["https://rpc.chiadochain.net"] },
        public: { http: ["https://rpc.chiadochain.net"] }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.chiadochain.net"
        }
      }
    };
    hardhat = {
      id: 31337,
      name: "Hardhat",
      network: "hardhat",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["http://127.0.0.1:8545"] },
        public: { http: ["http://127.0.0.1:8545"] }
      }
    };
    harmonyOne = {
      id: 16666e5,
      name: "Harmony One",
      network: "harmony",
      nativeCurrency: {
        name: "Harmony",
        symbol: "ONE",
        decimals: 18
      },
      rpcUrls: {
        public: { http: ["https://rpc.ankr.com/harmony"] },
        default: { http: ["https://rpc.ankr.com/harmony"] }
      },
      blockExplorers: {
        default: { name: "Harmony Explorer", url: "https://explorer.harmony.one" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 24185753
        }
      }
    };
    haqqMainnet = {
      id: 11235,
      name: "HAQQ Mainnet",
      network: "haqq-mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Islamic Coin",
        symbol: "ISLM"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.eth.haqq.network"]
        },
        public: {
          http: ["https://rpc.eth.haqq.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "HAQQ Explorer",
          url: "https://explorer.haqq.network"
        }
      }
    };
    haqqTestedge2 = {
      id: 54211,
      name: "HAQQ Testedge 2",
      network: "haqq-testedge-2",
      nativeCurrency: {
        decimals: 18,
        name: "Islamic Coin",
        symbol: "ISLMT"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.eth.testedge2.haqq.network"]
        },
        public: {
          http: ["https://rpc.eth.testedge2.haqq.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "HAQQ Explorer",
          url: "https://explorer.testedge2.haqq.network"
        }
      }
    };
    klaytn = {
      id: 8217,
      name: "Klaytn",
      network: "klaytn",
      nativeCurrency: {
        decimals: 18,
        name: "Klaytn",
        symbol: "KLAY"
      },
      rpcUrls: {
        default: { http: ["https://cypress.fautor.app/archive"] },
        public: { http: ["https://cypress.fautor.app/archive"] }
      },
      blockExplorers: {
        etherscan: { name: "KlaytnScope", url: "https://scope.klaytn.com" },
        default: { name: "KlaytnScope", url: "https://scope.klaytn.com" }
      }
    };
    linea = {
      id: 59144,
      name: "Linea Mainnet",
      network: "linea-mainnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        infura: {
          http: ["https://linea-mainnet.infura.io/v3"],
          webSocket: ["wss://linea-mainnet.infura.io/ws/v3"]
        },
        default: {
          http: ["https://rpc.linea.build"],
          webSocket: ["wss://rpc.linea.build"]
        },
        public: {
          http: ["https://rpc.linea.build"],
          webSocket: ["wss://rpc.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://lineascan.build"
        },
        etherscan: {
          name: "Etherscan",
          url: "https://lineascan.build"
        },
        blockscout: {
          name: "Blockscout",
          url: "https://explorer.linea.build"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 42
        }
      },
      testnet: false
    };
    lineaTestnet = {
      id: 59140,
      name: "Linea Goerli Testnet",
      network: "linea-testnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        infura: {
          http: ["https://linea-goerli.infura.io/v3"],
          webSocket: ["wss://linea-goerli.infura.io/ws/v3"]
        },
        default: {
          http: ["https://rpc.goerli.linea.build"],
          webSocket: ["wss://rpc.goerli.linea.build"]
        },
        public: {
          http: ["https://rpc.goerli.linea.build"],
          webSocket: ["wss://rpc.goerli.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli.lineascan.build"
        },
        etherscan: {
          name: "Etherscan",
          url: "https://goerli.lineascan.build"
        },
        blockscout: {
          name: "Blockscout",
          url: "https://explorer.goerli.linea.build"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 498623
        }
      },
      testnet: true
    };
    localhost = {
      id: 1337,
      name: "Localhost",
      network: "localhost",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["http://127.0.0.1:8545"] },
        public: { http: ["http://127.0.0.1:8545"] }
      }
    };
    mainnet = {
      id: 1,
      network: "homestead",
      name: "Ethereum",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://eth-mainnet.g.alchemy.com/v2"],
          webSocket: ["wss://eth-mainnet.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://mainnet.infura.io/v3"],
          webSocket: ["wss://mainnet.infura.io/ws/v3"]
        },
        default: {
          http: ["https://cloudflare-eth.com"]
        },
        public: {
          http: ["https://cloudflare-eth.com"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "Etherscan",
          url: "https://etherscan.io"
        },
        default: {
          name: "Etherscan",
          url: "https://etherscan.io"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        ensUniversalResolver: {
          address: "0xc0497E381f536Be9ce14B0dD3817cBcAe57d2F62",
          blockCreated: 16966585
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    };
    mantle = {
      id: 5e3,
      name: "Mantle",
      network: "mantle",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.mantle.xyz"] },
        public: { http: ["https://rpc.mantle.xyz"] }
      },
      blockExplorers: {
        etherscan: {
          name: "Mantle Explorer",
          url: "https://explorer.mantle.xyz"
        },
        default: {
          name: "Mantle Explorer",
          url: "https://explorer.mantle.xyz"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 304717
        }
      }
    };
    mantleTestnet = {
      id: 5001,
      name: "Mantle Testnet",
      network: "mantle",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.testnet.mantle.xyz"] },
        public: { http: ["https://rpc.testnet.mantle.xyz"] }
      },
      blockExplorers: {
        etherscan: {
          name: "Mantle Testnet Explorer",
          url: "https://explorer.testnet.mantle.xyz"
        },
        default: {
          name: "Mantle Testnet Explorer",
          url: "https://explorer.testnet.mantle.xyz"
        }
      },
      testnet: true
    };
    metis = {
      id: 1088,
      name: "Metis",
      network: "andromeda",
      nativeCurrency: {
        decimals: 18,
        name: "Metis",
        symbol: "METIS"
      },
      rpcUrls: {
        default: { http: ["https://andromeda.metis.io/?owner=1088"] },
        public: { http: ["https://andromeda.metis.io/?owner=1088"] }
      },
      blockExplorers: {
        default: {
          name: "Andromeda Explorer",
          url: "https://andromeda-explorer.metis.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2338552
        }
      }
    };
    metisGoerli = {
      id: 599,
      name: "Metis Goerli",
      network: "metis-goerli",
      nativeCurrency: {
        decimals: 18,
        name: "Metis Goerli",
        symbol: "METIS"
      },
      rpcUrls: {
        default: { http: ["https://goerli.gateway.metisdevops.link"] },
        public: { http: ["https://goerli.gateway.metisdevops.link"] }
      },
      blockExplorers: {
        default: {
          name: "Metis Goerli Explorer",
          url: "https://goerli.explorer.metisdevops.link"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1006207
        }
      }
    };
    mev = {
      id: 7518,
      network: "MEVerse",
      name: "MEVerse Chain Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "MEVerse",
        symbol: "MEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.meversemainnet.io"]
        },
        public: {
          http: ["https://rpc.meversemainnet.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://www.meversescan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 86881340
        }
      }
    };
    mevTestnet = {
      id: 4759,
      network: "MEVerse Testnet",
      name: "MEVerse Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MEVerse",
        symbol: "MEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.meversetestnet.io"]
        },
        public: {
          http: ["https://rpc.meversetestnet.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://testnet.meversescan.io/"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 64371115
        }
      },
      testnet: true
    };
    modeTestnet = {
      id: 919,
      name: "Mode Testnet",
      network: "mode-testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.mode.network"]
        },
        public: {
          http: ["https://sepolia.mode.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia.explorer.mode.network"
        }
      },
      testnet: true
    };
    moonbaseAlpha = {
      id: 1287,
      name: "Moonbase Alpha",
      network: "moonbase-alpha",
      nativeCurrency: {
        decimals: 18,
        name: "DEV",
        symbol: "DEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.api.moonbase.moonbeam.network"],
          webSocket: ["wss://wss.api.moonbase.moonbeam.network"]
        },
        public: {
          http: ["https://rpc.api.moonbase.moonbeam.network"],
          webSocket: ["wss://wss.api.moonbase.moonbeam.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonbase.moonscan.io"
        },
        etherscan: {
          name: "Moonscan",
          url: "https://moonbase.moonscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1850686
        }
      },
      testnet: true
    };
    moonbeam = {
      id: 1284,
      name: "Moonbeam",
      network: "moonbeam",
      nativeCurrency: {
        decimals: 18,
        name: "GLMR",
        symbol: "GLMR"
      },
      rpcUrls: {
        public: {
          http: ["https://moonbeam.public.blastapi.io"],
          webSocket: ["wss://moonbeam.public.blastapi.io"]
        },
        default: {
          http: ["https://moonbeam.public.blastapi.io"],
          webSocket: ["wss://moonbeam.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonscan.io"
        },
        etherscan: {
          name: "Moonscan",
          url: "https://moonscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 609002
        }
      },
      testnet: false
    };
    moonriver = {
      id: 1285,
      name: "Moonriver",
      network: "moonriver",
      nativeCurrency: {
        decimals: 18,
        name: "MOVR",
        symbol: "MOVR"
      },
      rpcUrls: {
        public: {
          http: ["https://moonriver.public.blastapi.io"],
          webSocket: ["wss://moonriver.public.blastapi.io"]
        },
        default: {
          http: ["https://moonriver.public.blastapi.io"],
          webSocket: ["wss://moonriver.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonriver.moonscan.io"
        },
        etherscan: {
          name: "Moonscan",
          url: "https://moonriver.moonscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1597904
        }
      },
      testnet: false
    };
    neonDevnet = {
      id: 245022926,
      network: "neonDevnet",
      name: "Neon EVM DevNet",
      nativeCurrency: { name: "NEON", symbol: "NEON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://devnet.neonevm.org"]
        },
        public: {
          http: ["https://devnet.neonevm.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Neonscan",
          url: "https://neonscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 205206112
        }
      },
      testnet: true
    };
    nexi = {
      id: 4242,
      name: "Nexi",
      network: "nexi",
      nativeCurrency: { name: "Nexi", symbol: "NEXI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.chain.nexi.technology"]
        },
        public: {
          http: ["https://rpc.chain.nexi.technology"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "NexiScan",
          url: "https://www.nexiscan.com"
        },
        default: {
          name: "NexiScan",
          url: "https://www.nexiscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0277A46Cc69A57eE3A6C8c158bA874832F718B8E",
          blockCreated: 25770160
        }
      }
    };
    nexilix = {
      id: 240,
      name: "Nexilix Smart Chain",
      network: "nexilix",
      nativeCurrency: {
        decimals: 18,
        name: "Nexilix",
        symbol: "NEXILIX"
      },
      rpcUrls: {
        default: { http: ["https://rpcurl.pos.nexilix.com"] },
        public: { http: ["https://rpcurl.pos.nexilix.com"] }
      },
      blockExplorers: {
        etherscan: { name: "NexilixScan", url: "https://scan.nexilix.com" },
        default: { name: "NexilixScan", url: "https://scan.nexilix.com" }
      },
      contracts: {
        multicall3: {
          address: "0x58381c8e2BF9d0C2C4259cA14BdA9Afe02831244",
          blockCreated: 74448
        }
      }
    };
    oasys = {
      id: 248,
      name: "Oasys",
      network: "oasys",
      nativeCurrency: { name: "Oasys", symbol: "OAS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.oasys.games"]
        },
        public: {
          http: ["https://rpc.mainnet.oasys.games"]
        }
      },
      blockExplorers: {
        default: {
          name: "OasysScan",
          url: "https://scan.oasys.games"
        }
      }
    };
    okc = {
      id: 66,
      name: "OKC",
      network: "okc",
      nativeCurrency: {
        decimals: 18,
        name: "OKT",
        symbol: "OKT"
      },
      rpcUrls: {
        default: { http: ["https://exchainrpc.okex.org"] },
        public: { http: ["https://exchainrpc.okex.org"] }
      },
      blockExplorers: {
        default: { name: "oklink", url: "https://www.oklink.com/okc" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 10364792
        }
      }
    };
    optimism = {
      id: 10,
      name: "OP Mainnet",
      network: "optimism",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://opt-mainnet.g.alchemy.com/v2"],
          webSocket: ["wss://opt-mainnet.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://optimism-mainnet.infura.io/v3"],
          webSocket: ["wss://optimism-mainnet.infura.io/ws/v3"]
        },
        default: {
          http: ["https://mainnet.optimism.io"]
        },
        public: {
          http: ["https://mainnet.optimism.io"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "Etherscan",
          url: "https://optimistic.etherscan.io"
        },
        default: {
          name: "Optimism Explorer",
          url: "https://explorer.optimism.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 4286263
        }
      }
    };
    optimismGoerli = {
      id: 420,
      name: "Optimism Goerli",
      network: "optimism-goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://opt-goerli.g.alchemy.com/v2"],
          webSocket: ["wss://opt-goerli.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://optimism-goerli.infura.io/v3"],
          webSocket: ["wss://optimism-goerli.infura.io/ws/v3"]
        },
        default: {
          http: ["https://goerli.optimism.io"]
        },
        public: {
          http: ["https://goerli.optimism.io"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "Etherscan",
          url: "https://goerli-optimism.etherscan.io"
        },
        default: {
          name: "Etherscan",
          url: "https://goerli-optimism.etherscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 49461
        }
      },
      testnet: true
    };
    polygon = {
      id: 137,
      name: "Polygon",
      network: "matic",
      nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://polygon-mainnet.g.alchemy.com/v2"],
          webSocket: ["wss://polygon-mainnet.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://polygon-mainnet.infura.io/v3"],
          webSocket: ["wss://polygon-mainnet.infura.io/ws/v3"]
        },
        default: {
          http: ["https://polygon-rpc.com"]
        },
        public: {
          http: ["https://polygon-rpc.com"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "PolygonScan",
          url: "https://polygonscan.com"
        },
        default: {
          name: "PolygonScan",
          url: "https://polygonscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 25770160
        }
      }
    };
    polygonMumbai = {
      id: 80001,
      name: "Polygon Mumbai",
      network: "maticmum",
      nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://polygon-mumbai.g.alchemy.com/v2"],
          webSocket: ["wss://polygon-mumbai.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://polygon-mumbai.infura.io/v3"],
          webSocket: ["wss://polygon-mumbai.infura.io/ws/v3"]
        },
        default: {
          http: ["https://matic-mumbai.chainstacklabs.com"]
        },
        public: {
          http: ["https://matic-mumbai.chainstacklabs.com"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "PolygonScan",
          url: "https://mumbai.polygonscan.com"
        },
        default: {
          name: "PolygonScan",
          url: "https://mumbai.polygonscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 25770160
        }
      },
      testnet: true
    };
    polygonZkEvmTestnet = {
      id: 1442,
      name: "Polygon zkEVM Testnet",
      network: "polygon-zkevm-testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.public.zkevm-test.net"]
        },
        public: {
          http: ["https://rpc.public.zkevm-test.net"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "Blockscout",
          url: "https://explorer.public.zkevm-test.net"
        },
        default: {
          name: "PolygonScan",
          url: "https://testnet-zkevm.polygonscan.com"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 525686
        }
      }
    };
    polygonZkEvm = {
      id: 1101,
      name: "Polygon zkEVM",
      network: "polygon-zkevm",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://zkevm-rpc.com"]
        },
        public: {
          http: ["https://zkevm-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://zkevm.polygonscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 57746
        }
      }
    };
    pulsechain = {
      id: 369,
      network: "pulsechain",
      name: "PulseChain",
      nativeCurrency: { name: "Pulse", symbol: "PLS", decimals: 18 },
      testnet: false,
      rpcUrls: {
        default: {
          http: ["https://rpc.pulsechain.com"],
          webSocket: ["wss://ws.pulsechain.com"]
        },
        public: {
          http: ["https://rpc.pulsechain.com"],
          webSocket: ["wss://ws.pulsechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PulseScan",
          url: "https://scan.pulsechain.com"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    };
    pulsechainV4 = {
      id: 943,
      network: "pulsechainV4",
      name: "PulseChain V4",
      testnet: true,
      nativeCurrency: { name: "V4 Pulse", symbol: "v4PLS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.v4.testnet.pulsechain.com"],
          webSocket: ["wss://ws.v4.testnet.pulsechain.com"]
        },
        public: {
          http: ["https://rpc.v4.testnet.pulsechain.com"],
          webSocket: ["wss://ws.v4.testnet.pulsechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PulseScan",
          url: "https://scan.v4.testnet.pulsechain.com"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    };
    qMainnet = {
      id: 35441,
      name: "Q Mainnet",
      network: "q-mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Q",
        symbol: "Q"
      },
      rpcUrls: {
        default: { http: ["https://rpc.q.org"] },
        public: { http: ["https://rpc.q.org"] }
      },
      blockExplorers: {
        default: {
          name: "Q Mainnet Explorer",
          url: "https://explorer.q.org"
        }
      }
    };
    qTestnet = {
      id: 35443,
      name: "Q Testnet",
      network: "q-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Q",
        symbol: "Q"
      },
      rpcUrls: {
        default: { http: ["https://rpc.qtestnet.org"] },
        public: { http: ["https://rpc.qtestnet.org"] }
      },
      blockExplorers: {
        default: {
          name: "Q Testnet Explorer",
          url: "https://explorer.qtestnet.org"
        }
      },
      testnet: true
    };
    rollux = {
      id: 570,
      name: "Rollux Mainnet",
      network: "rollux",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.rollux.com"],
          webSocket: ["wss://rpc.rollux.com/wss"]
        },
        public: { http: ["https://rollux.public-rpc.com"] }
      },
      blockExplorers: {
        default: { name: "RolluxExplorer", url: "https://explorer.rollux.com" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 119222
        }
      }
    };
    rolluxTestnet = {
      id: 57e3,
      name: "Rollux Testnet",
      network: "rollux-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc-tanenbaum.rollux.com/"],
          webSocket: ["wss://rpc-tanenbaum.rollux.com/wss"]
        },
        public: { http: ["https://rpc-tanenbaum.rollux.com/"] }
      },
      blockExplorers: {
        default: {
          name: "RolluxTestnetExplorer",
          url: "https://rollux.tanenbaum.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1813675
        }
      }
    };
    ronin = {
      id: 2020,
      name: "Ronin",
      network: "ronin",
      nativeCurrency: { name: "RON", symbol: "RON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.roninchain.com/rpc"]
        },
        public: {
          http: ["https://api.roninchain.com/rpc"]
        }
      },
      blockExplorers: {
        default: { name: "Ronin Explorer", url: "https://app.roninchain.com" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 26023535
        }
      }
    };
    saigon = {
      id: 2021,
      name: "Saigon Testnet",
      network: "saigon",
      nativeCurrency: { name: "RON", symbol: "RON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://saigon-testnet.roninchain.com/rpc"]
        },
        public: {
          http: ["https://saigon-testnet.roninchain.com/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Saigon Explorer",
          url: "https://saigon-explorer.roninchain.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 18736871
        }
      },
      testnet: true
    };
    scrollSepolia = {
      id: 534351,
      name: "Scroll Sepolia",
      network: "scroll-sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rpc.scroll.io"],
          webSocket: ["wss://sepolia-rpc.scroll.io/ws"]
        },
        public: {
          http: ["https://sepolia-rpc.scroll.io"],
          webSocket: ["wss://sepolia-rpc.scroll.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia-blockscout.scroll.io"
        }
      },
      testnet: true
    };
    scrollTestnet = {
      id: 534353,
      name: "Scroll Testnet",
      network: "scroll-testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://alpha-rpc.scroll.io/l2"],
          webSocket: ["wss://alpha-rpc.scroll.io/l2/ws"]
        },
        public: {
          http: ["https://alpha-rpc.scroll.io/l2"],
          webSocket: ["wss://alpha-rpc.scroll.io/l2/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.scroll.io"
        }
      },
      testnet: true
    };
    sepolia = {
      id: 11155111,
      network: "sepolia",
      name: "Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "SEP", decimals: 18 },
      rpcUrls: {
        alchemy: {
          http: ["https://eth-sepolia.g.alchemy.com/v2"],
          webSocket: ["wss://eth-sepolia.g.alchemy.com/v2"]
        },
        infura: {
          http: ["https://sepolia.infura.io/v3"],
          webSocket: ["wss://sepolia.infura.io/ws/v3"]
        },
        default: {
          http: ["https://rpc.sepolia.org"]
        },
        public: {
          http: ["https://rpc.sepolia.org"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "Etherscan",
          url: "https://sepolia.etherscan.io"
        },
        default: {
          name: "Etherscan",
          url: "https://sepolia.etherscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 6507670
        }
      },
      testnet: true
    };
    skaleBlockBrawlers = {
      id: 391845894,
      name: "SKALE | Block Brawlers",
      network: "skale-brawl",
      nativeCurrency: { name: "BRAWL", symbol: "BRAWL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/frayed-decent-antares"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/frayed-decent-antares"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/frayed-decent-antares"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/frayed-decent-antares"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://frayed-decent-antares.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://frayed-decent-antares.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    };
    skaleCalypso = {
      id: 1564830818,
      name: "SKALE | Calypso NFT Hub",
      network: "skale-calypso",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/honorable-steel-rasalhague"
          ]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/honorable-steel-rasalhague"
          ]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3107626
        }
      }
    };
    skaleCalypsoTestnet = {
      id: 344106930,
      name: "SKALE | Calypso NFT Hub Testnet",
      network: "skale-calypso-testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://staging-v3.skalenodes.com/v1/staging-utter-unripe-menkar"
          ],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-utter-unripe-menkar"
          ]
        },
        public: {
          http: [
            "https://staging-v3.skalenodes.com/v1/staging-utter-unripe-menkar"
          ],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-utter-unripe-menkar"
          ]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://staging-utter-unripe-menkar.explorer.staging-v3.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://staging-utter-unripe-menkar.explorer.staging-v3.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2131424
        }
      },
      testnet: true
    };
    skaleChaosTestnet = {
      id: 1351057110,
      name: "SKALE | Chaos Testnet",
      network: "skale-chaos-testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://staging-v3.skalenodes.com/v1/staging-fast-active-bellatrix"
          ],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-fast-active-bellatrix"
          ]
        },
        public: {
          http: [
            "https://staging-v3.skalenodes.com/v1/staging-fast-active-bellatrix"
          ],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-fast-active-bellatrix"
          ]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://staging-fast-active-bellatrix.explorer.staging-v3.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://staging-fast-active-bellatrix.explorer.staging-v3.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1192202
        }
      },
      testnet: true
    };
    skaleCryptoBlades = {
      id: 1026062157,
      name: "SKALE | CryptoBlades",
      network: "skale-cryptoblades",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/affectionate-immediate-pollux"
          ]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/affectionate-immediate-pollux"
          ]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    };
    skaleCryptoColosseum = {
      id: 2046399126,
      name: "SKALE | Crypto Colosseum",
      network: "skale-crypto-coloseeum",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/haunting-devoted-deneb"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/haunting-devoted-deneb"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/haunting-devoted-deneb"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/haunting-devoted-deneb"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    };
    skaleEuropa = {
      id: 2046399126,
      name: "SKALE | Europa Liquidity Hub",
      network: "skale-europa",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/elated-tan-skat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/elated-tan-skat"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/elated-tan-skat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/elated-tan-skat"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://elated-tan-skat.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://elated-tan-skat.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3113495
        }
      }
    };
    skaleEuropaTestnet = {
      id: 476158412,
      name: "SKALE | Europa Liquidity Hub Testnet",
      network: "skale-europa-testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://staging-v3.skalenodes.com/v1/staging-legal-crazy-castor"],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-legal-crazy-castor"
          ]
        },
        public: {
          http: ["https://staging-v3.skalenodes.com/v1/staging-legal-crazy-castor"],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-legal-crazy-castor"
          ]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://staging-legal-crazy-castor.explorer.staging-v3.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://staging-legal-crazy-castor.explorer.staging-v3.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2071911
        }
      },
      testnet: true
    };
    skaleExorde = {
      id: 2139927552,
      name: "SKALE | Exorde",
      network: "skale-exorde",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/light-vast-diphda"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/light-vast-diphda"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/light-vast-diphda"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/light-vast-diphda"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://light-vast-diphda.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://light-vast-diphda.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    };
    skaleHumanProtocol = {
      id: 1273227453,
      name: "SKALE | Human Protocol",
      network: "skale-human-protocol",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/wan-red-ain"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/wan-red-ain"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/wan-red-ain"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/wan-red-ain"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://wan-red-ain.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://wan-red-ain.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    };
    skaleNebula = {
      id: 1482601649,
      name: "SKALE | Nebula Gaming Hub",
      network: "skale-nebula",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/green-giddy-denebola"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/green-giddy-denebola"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/green-giddy-denebola"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/green-giddy-denebola"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://green-giddy-denebola.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://green-giddy-denebola.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2372986
        }
      }
    };
    skaleNebulaTestnet = {
      id: 503129905,
      name: "SKALE | Nebula Gaming Hub Testnet",
      network: "skale-nebula-testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://staging-v3.skalenodes.com/v1/staging-faint-slimy-achird"],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-faint-slimy-achird"
          ]
        },
        public: {
          http: ["https://staging-v3.skalenodes.com/v1/staging-faint-slimy-achird"],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-faint-slimy-achird"
          ]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://staging-faint-slimy-achird.explorer.staging-v3.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://staging-faint-slimy-achird.explorer.staging-v3.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2205882
        }
      },
      testnet: true
    };
    skaleRazor = {
      id: 278611351,
      name: "SKALE | Razor Network",
      network: "skale-razor",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/turbulent-unique-scheat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/turbulent-unique-scheat"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/turbulent-unique-scheat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/turbulent-unique-scheat"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    };
    skaleTitan = {
      id: 1350216234,
      name: "SKALE | Titan Community Hub",
      network: "skale-titan",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/parallel-stormy-spica"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/parallel-stormy-spica"]
        },
        public: {
          http: ["https://mainnet.skalenodes.com/v1/parallel-stormy-spica"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/parallel-stormy-spica"]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://parallel-stormy-spica.explorer.mainnet.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://parallel-stormy-spica.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2076458
        }
      }
    };
    skaleTitanTestnet = {
      id: 1517929550,
      name: "SKALE | Titan Community Hub Testnet",
      network: "skale-titan-testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://staging-v3.skalenodes.com/v1/staging-aware-chief-gianfar"
          ],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-aware-chief-gianfar"
          ]
        },
        public: {
          http: [
            "https://staging-v3.skalenodes.com/v1/staging-aware-chief-gianfar"
          ],
          webSocket: [
            "wss://staging-v3.skalenodes.com/v1/ws/staging-aware-chief-gianfar"
          ]
        }
      },
      blockExplorers: {
        blockscout: {
          name: "SKALE Explorer",
          url: "https://staging-aware-chief-gianfar.explorer.staging-v3.skalenodes.com"
        },
        default: {
          name: "SKALE Explorer",
          url: "https://staging-aware-chief-gianfar.explorer.staging-v3.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2085155
        }
      },
      testnet: true
    };
    songbird = {
      id: 19,
      name: "Songbird Mainnet",
      network: "songbird-mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "songbird",
        symbol: "SGB"
      },
      rpcUrls: {
        default: { http: ["https://songbird-api.flare.network/ext/C/rpc"] },
        public: { http: ["https://songbird-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Songbird Explorer",
          url: "https://songbird-explorer.flare.network"
        }
      }
    };
    songbirdTestnet = {
      id: 16,
      name: "Coston",
      network: "coston",
      nativeCurrency: {
        decimals: 18,
        name: "costonflare",
        symbol: "CFLR"
      },
      rpcUrls: {
        default: { http: ["https://coston-api.flare.network/ext/C/rpc"] },
        public: { http: ["https://coston-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Coston Explorer",
          url: "https://coston-explorer.flare.network"
        }
      },
      testnet: true
    };
    shardeumSphinx = {
      id: 8082,
      name: "Shardeum Sphinx",
      network: "shmSphinx",
      nativeCurrency: { name: "SHARDEUM", symbol: "SHM", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sphinx.shardeum.org"]
        },
        public: {
          http: ["https://sphinx.shardeum.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shardeum Explorer",
          url: "https://explorer-sphinx.shardeum.org"
        }
      },
      testnet: true
    };
    syscoin = {
      id: 57,
      name: "Syscoin Mainnet",
      network: "syscoin",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.syscoin.org"],
          webSocket: ["wss://rpc.syscoin.org/wss"]
        },
        public: {
          http: ["https://rpc.syscoin.org"],
          webSocket: ["wss://rpc.syscoin.org/wss"]
        }
      },
      blockExplorers: {
        default: { name: "SyscoinExplorer", url: "https://explorer.syscoin.org" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 287139
        }
      }
    };
    syscoinTestnet = {
      id: 5700,
      name: "Syscoin Tanenbaum Testnet",
      network: "syscoin-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.tanenbaum.io"],
          webSocket: ["wss://rpc.tanenbaum.io/wss"]
        },
        public: {
          http: ["https://rpc.tanenbaum.io"],
          webSocket: ["wss://rpc.tanenbaum.io/wss"]
        }
      },
      blockExplorers: {
        default: { name: "SyscoinTestnetExplorer", url: "https://tanenbaum.io" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 271288
        }
      }
    };
    taraxa = {
      id: 841,
      name: "Taraxa Mainnet",
      network: "taraxa",
      nativeCurrency: { name: "Tara", symbol: "TARA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.taraxa.io"]
        },
        public: {
          http: ["https://rpc.mainnet.taraxa.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taraxa Explorer",
          url: "https://explorer.mainnet.taraxa.io"
        }
      }
    };
    taikoTestnetSepolia = {
      id: 167005,
      name: "Taiko (Alpha-3 Testnet)",
      network: "taiko-sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.test.taiko.xyz"]
        },
        public: {
          http: ["https://rpc.test.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.test.taiko.xyz"
        }
      }
    };
    taraxaTestnet = {
      id: 842,
      name: "Taraxa Testnet",
      network: "taraxa-testnet",
      nativeCurrency: { name: "Tara", symbol: "TARA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.taraxa.io"]
        },
        public: {
          http: ["https://rpc.testnet.taraxa.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taraxa Explorer",
          url: "https://explorer.testnet.taraxa.io"
        }
      },
      testnet: true
    };
    telos = {
      id: 40,
      name: "Telos",
      network: "telos",
      nativeCurrency: {
        decimals: 18,
        name: "Telos",
        symbol: "TLOS"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.telos.net/evm"] },
        public: { http: ["https://mainnet.telos.net/evm"] }
      },
      blockExplorers: {
        default: {
          name: "Teloscan",
          url: "https://www.teloscan.io/"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 246530709
        }
      }
    };
    telosTestnet = {
      id: 41,
      name: "Telos",
      network: "telosTestnet",
      nativeCurrency: {
        decimals: 18,
        name: "Telos",
        symbol: "TLOS"
      },
      rpcUrls: {
        default: { http: ["https://testnet.telos.net/evm"] },
        public: { http: ["https://testnet.telos.net/evm"] }
      },
      blockExplorers: {
        default: {
          name: "Teloscan (testnet)",
          url: "https://testnet.teloscan.io/"
        }
      },
      testnet: true
    };
    thunderTestnet = {
      id: 997,
      name: "5ireChain Thunder Testnet",
      network: "5ireChain",
      nativeCurrency: { name: "5ire Token", symbol: "5IRE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.5ire.network"]
        },
        public: {
          http: ["https://rpc-testnet.5ire.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "5ireChain Explorer",
          url: "https://explorer.5ire.network"
        }
      },
      testnet: true
    };
    wanchain = {
      id: 888,
      name: "Wanchain",
      network: "wanchain",
      nativeCurrency: { name: "WANCHAIN", symbol: "WAN", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://gwan-ssl.wandevs.org:56891",
            "https://gwan2-ssl.wandevs.org"
          ]
        },
        public: {
          http: [
            "https://gwan-ssl.wandevs.org:56891",
            "https://gwan2-ssl.wandevs.org"
          ]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "WanScan",
          url: "https://wanscan.org"
        },
        default: {
          name: "WanScan",
          url: "https://wanscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcDF6A1566e78EB4594c86Fe73Fcdc82429e97fbB",
          blockCreated: 25312390
        }
      }
    };
    wanchainTestnet = {
      id: 999,
      name: "Wanchain Testnet",
      network: "wanchainTestnet",
      nativeCurrency: { name: "WANCHAIN", symbol: "WANt", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://gwan-ssl.wandevs.org:46891"]
        },
        public: {
          http: ["https://gwan-ssl.wandevs.org:46891"]
        }
      },
      blockExplorers: {
        etherscan: {
          name: "WanScanTest",
          url: "https://wanscan.org"
        },
        default: {
          name: "WanScanTest",
          url: "https://wanscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0x11c89bF4496c39FB80535Ffb4c92715839CC5324",
          blockCreated: 24743448
        }
      },
      testnet: true
    };
    xdc = {
      id: 50,
      name: "XinFin Network",
      network: "xdc",
      nativeCurrency: {
        decimals: 18,
        name: "XDC",
        symbol: "XDC"
      },
      rpcUrls: {
        default: { http: ["https://rpc.xinfin.network"] },
        public: { http: ["https://rpc.xinfin.network"] }
      },
      blockExplorers: {
        xinfin: { name: "XinFin", url: "https://explorer.xinfin.network" },
        default: { name: "Blocksscan", url: "https://xdc.blocksscan.io" }
      }
    };
    xdcTestnet = {
      id: 51,
      name: "Apothem Network",
      network: "xdc-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "TXDC",
        symbol: "TXDC"
      },
      rpcUrls: {
        default: { http: ["https://erpc.apothem.network"] },
        public: { http: ["https://erpc.apothem.network"] }
      },
      blockExplorers: {
        xinfin: { name: "XinFin", url: "https://explorer.apothem.network" },
        default: { name: "Blocksscan", url: "https://apothem.blocksscan.io" }
      }
    };
    zhejiang = {
      id: 1337803,
      network: "zhejiang",
      name: "Zhejiang",
      nativeCurrency: { name: "Zhejiang Ether", symbol: "ZhejETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.zhejiang.ethpandaops.io"]
        },
        public: {
          http: ["https://rpc.zhejiang.ethpandaops.io"]
        }
      },
      blockExplorers: {
        beaconchain: {
          name: "Etherscan",
          url: "https://zhejiang.beaconcha.in"
        },
        blockscout: {
          name: "Blockscout",
          url: "https://blockscout.com/eth/zhejiang-testnet"
        },
        default: {
          name: "Beaconchain",
          url: "https://zhejiang.beaconcha.in"
        }
      },
      testnet: true
    };
    zkSync = {
      id: 324,
      name: "zkSync Era",
      network: "zksync-era",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet.era.zksync.io"],
          webSocket: ["wss://mainnet.era.zksync.io/ws"]
        },
        public: {
          http: ["https://mainnet.era.zksync.io"],
          webSocket: ["wss://mainnet.era.zksync.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkExplorer",
          url: "https://explorer.zksync.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        }
      }
    };
    zkSyncTestnet = {
      id: 280,
      name: "zkSync Era Testnet",
      network: "zksync-era-testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.era.zksync.dev"],
          webSocket: ["wss://testnet.era.zksync.dev/ws"]
        },
        public: {
          http: ["https://testnet.era.zksync.dev"],
          webSocket: ["wss://testnet.era.zksync.dev/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkExplorer",
          url: "https://goerli.explorer.zksync.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        }
      },
      testnet: true
    };
    zetachainAthensTestnet = {
      id: 7001,
      name: "ZetaChain Athens Testnet",
      network: "zetachain-athens-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Zeta",
        symbol: "aZETA"
      },
      rpcUrls: {
        public: {
          http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"]
        },
        default: {
          http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"]
        }
      },
      blockExplorers: {
        default: {
          name: "ZetaScan",
          url: "https://athens3.explorer.zetachain.com"
        }
      },
      testnet: true
    };
    zora = {
      id: 7777777,
      name: "Zora",
      network: "zora",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.zora.energy"],
          webSocket: ["wss://rpc.zora.energy"]
        },
        public: {
          http: ["https://rpc.zora.energy"],
          webSocket: ["wss://rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: { name: "Explorer", url: "https://explorer.zora.energy" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 5882
        }
      }
    };
    zoraTestnet = {
      id: 999,
      name: "Zora Goerli Testnet",
      network: "zora-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Zora Goerli",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.rpc.zora.energy"],
          webSocket: ["wss://testnet.rpc.zora.energy"]
        },
        public: {
          http: ["https://testnet.rpc.zora.energy"],
          webSocket: ["wss://testnet.rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: { name: "Explorer", url: "https://testnet.explorer.zora.energy" }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 189123
        }
      },
      testnet: true
    };
  }
});

// node_modules/@wagmi/core/dist/chunk-GUCHKZEA.js
var init_chunk_GUCHKZEA = __esm({
  "node_modules/@wagmi/core/dist/chunk-GUCHKZEA.js"() {
    init_dist();
  }
});

// node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js
var __accessCheck, __privateGet, __privateAdd, __privateSet, __privateMethod;
var init_chunk_MQXBDTVK = __esm({
  "node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js"() {
    __accessCheck = (obj, member, msg) => {
      if (!member.has(obj))
        throw TypeError("Cannot " + msg);
    };
    __privateGet = (obj, member, getter) => {
      __accessCheck(obj, member, "read from private field");
      return getter ? getter.call(obj) : member.get(obj);
    };
    __privateAdd = (obj, member, value) => {
      if (member.has(obj))
        throw TypeError("Cannot add the same private member more than once");
      member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    };
    __privateSet = (obj, member, value, setter) => {
      __accessCheck(obj, member, "write to private field");
      setter ? setter.call(obj, value) : member.set(obj, value);
      return value;
    };
    __privateMethod = (obj, member, method) => {
      __accessCheck(obj, member, "access private method");
      return method;
    };
  }
});

// node_modules/@wagmi/core/dist/chains.js
var init_chains = __esm({
  "node_modules/@wagmi/core/dist/chains.js"() {
    init_chunk_GUCHKZEA();
    init_chunk_MQXBDTVK();
  }
});

// node_modules/wagmi/dist/chains.js
var chains_exports = {};
__export(chains_exports, {
  arbitrum: () => arbitrum,
  arbitrumGoerli: () => arbitrumGoerli,
  arbitrumNova: () => arbitrumNova,
  aurora: () => aurora,
  auroraTestnet: () => auroraTestnet,
  avalanche: () => avalanche,
  avalancheFuji: () => avalancheFuji,
  base: () => base,
  baseGoerli: () => baseGoerli,
  boba: () => boba,
  bronos: () => bronos,
  bronosTestnet: () => bronosTestnet,
  bsc: () => bsc,
  bscTestnet: () => bscTestnet,
  bxn: () => bxn,
  bxnTestnet: () => bxnTestnet,
  canto: () => canto,
  celo: () => celo,
  celoAlfajores: () => celoAlfajores,
  celoCannoli: () => celoCannoli,
  classic: () => classic,
  cronos: () => cronos,
  cronosTestnet: () => cronosTestnet,
  crossbell: () => crossbell,
  dfk: () => dfk,
  dogechain: () => dogechain,
  edgeware: () => edgeware,
  edgewareTestnet: () => edgewareTestnet,
  ekta: () => ekta,
  ektaTestnet: () => ektaTestnet,
  eos: () => eos,
  eosTestnet: () => eosTestnet,
  evmos: () => evmos,
  evmosTestnet: () => evmosTestnet,
  fantom: () => fantom,
  fantomTestnet: () => fantomTestnet,
  fibo: () => fibo,
  filecoin: () => filecoin,
  filecoinCalibration: () => filecoinCalibration,
  filecoinHyperspace: () => filecoinHyperspace,
  flare: () => flare,
  flareTestnet: () => flareTestnet,
  foundry: () => foundry,
  fuse: () => fuse,
  fuseSparknet: () => fuseSparknet,
  gnosis: () => gnosis,
  gnosisChiado: () => gnosisChiado,
  gobi: () => gobi,
  goerli: () => goerli,
  haqqMainnet: () => haqqMainnet,
  haqqTestedge2: () => haqqTestedge2,
  hardhat: () => hardhat,
  harmonyOne: () => harmonyOne,
  iotex: () => iotex,
  iotexTestnet: () => iotexTestnet,
  klaytn: () => klaytn,
  linea: () => linea,
  lineaTestnet: () => lineaTestnet,
  localhost: () => localhost,
  mainnet: () => mainnet,
  mantle: () => mantle,
  mantleTestnet: () => mantleTestnet,
  metis: () => metis,
  metisGoerli: () => metisGoerli,
  mev: () => mev,
  mevTestnet: () => mevTestnet,
  modeTestnet: () => modeTestnet,
  moonbaseAlpha: () => moonbaseAlpha,
  moonbeam: () => moonbeam,
  moonriver: () => moonriver,
  neonDevnet: () => neonDevnet,
  nexi: () => nexi,
  nexilix: () => nexilix,
  oasys: () => oasys,
  okc: () => okc,
  optimism: () => optimism,
  optimismGoerli: () => optimismGoerli,
  polygon: () => polygon,
  polygonMumbai: () => polygonMumbai,
  polygonZkEvm: () => polygonZkEvm,
  polygonZkEvmTestnet: () => polygonZkEvmTestnet,
  pulsechain: () => pulsechain,
  pulsechainV4: () => pulsechainV4,
  qMainnet: () => qMainnet,
  qTestnet: () => qTestnet,
  rollux: () => rollux,
  rolluxTestnet: () => rolluxTestnet,
  ronin: () => ronin,
  saigon: () => saigon,
  scrollSepolia: () => scrollSepolia,
  scrollTestnet: () => scrollTestnet,
  sepolia: () => sepolia,
  shardeumSphinx: () => shardeumSphinx,
  skaleBlockBrawlers: () => skaleBlockBrawlers,
  skaleCalypso: () => skaleCalypso,
  skaleCalypsoTestnet: () => skaleCalypsoTestnet,
  skaleChaosTestnet: () => skaleChaosTestnet,
  skaleCryptoBlades: () => skaleCryptoBlades,
  skaleCryptoColosseum: () => skaleCryptoColosseum,
  skaleEuropa: () => skaleEuropa,
  skaleEuropaTestnet: () => skaleEuropaTestnet,
  skaleExorde: () => skaleExorde,
  skaleHumanProtocol: () => skaleHumanProtocol,
  skaleNebula: () => skaleNebula,
  skaleNebulaTestnet: () => skaleNebulaTestnet,
  skaleRazor: () => skaleRazor,
  skaleTitan: () => skaleTitan,
  skaleTitanTestnet: () => skaleTitanTestnet,
  songbird: () => songbird,
  songbirdTestnet: () => songbirdTestnet,
  syscoin: () => syscoin,
  syscoinTestnet: () => syscoinTestnet,
  taikoTestnetSepolia: () => taikoTestnetSepolia,
  taraxa: () => taraxa,
  taraxaTestnet: () => taraxaTestnet,
  telos: () => telos,
  telosTestnet: () => telosTestnet,
  thunderTestnet: () => thunderTestnet,
  wanchain: () => wanchain,
  wanchainTestnet: () => wanchainTestnet,
  xdc: () => xdc,
  xdcTestnet: () => xdcTestnet,
  zetachainAthensTestnet: () => zetachainAthensTestnet,
  zhejiang: () => zhejiang,
  zkSync: () => zkSync,
  zkSyncTestnet: () => zkSyncTestnet,
  zora: () => zora,
  zoraTestnet: () => zoraTestnet
});
var init_chains2 = __esm({
  "node_modules/wagmi/dist/chains.js"() {
    init_chains();
    "use client";
  }
});

// node_modules/@daohaus/keychain-utils/src/viemUtils.js
var require_viemUtils = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/viemUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VIEM_CHAINS = void 0;
    var chains_1 = (init_chains2(), __toCommonJS(chains_exports));
    exports.VIEM_CHAINS = {
      "0x1": chains_1.mainnet,
      "0x5": chains_1.goerli,
      "0x64": chains_1.gnosis,
      "0x89": chains_1.polygon,
      "0xa": chains_1.optimism,
      "0xa4b1": chains_1.arbitrum
    };
  }
});

// node_modules/@daohaus/keychain-utils/src/index.js
var require_src = __commonJS({
  "node_modules/@daohaus/keychain-utils/src/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_endpoints(), exports);
    tslib_1.__exportStar(require_networkData(), exports);
    tslib_1.__exportStar(require_explorerUtils(), exports);
    tslib_1.__exportStar(require_networkUtils(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_validNetworks(), exports);
    tslib_1.__exportStar(require_contractKeychains(), exports);
    tslib_1.__exportStar(require_viemUtils(), exports);
  }
});

export {
  init_chunk_GUCHKZEA,
  __privateGet,
  __privateAdd,
  __privateSet,
  __privateMethod,
  init_chunk_MQXBDTVK,
  require_src
};
//# sourceMappingURL=chunk-EBQ4QPBR.js.map
