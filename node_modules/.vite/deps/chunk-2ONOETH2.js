import {
  init_tx_builder,
  tx_builder_exports
} from "./chunk-D5VMCTSK.js";
import {
  require_src
} from "./chunk-R7RRHWOA.js";
import {
  require_src as require_src3
} from "./chunk-KYOZVWPW.js";
import {
  require_src as require_src2
} from "./chunk-EBQ4QPBR.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-LMAYTEU7.js";

// node_modules/@daohaus/moloch-v3-legos/node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/@daohaus/moloch-v3-legos/node_modules/tslib/tslib.js"(exports, module) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __esDecorate;
    var __runInitializers;
    var __propKey;
    var __setFunctionName;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    var __addDisposableResource;
    var __disposeResources;
    (function(factory) {
      var root = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __esDecorate = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f !== "function")
            throw new TypeError("Function expected");
          return f;
        }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn)
            context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access)
            context.access[p] = contextIn.access[p];
          context.addInitializer = function(f) {
            if (done)
              throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
          if (kind === "accessor") {
            if (result === void 0)
              continue;
            if (result === null || typeof result !== "object")
              throw new TypeError("Object expected");
            if (_ = accept(result.get))
              descriptor.get = _;
            if (_ = accept(result.set))
              descriptor.set = _;
            if (_ = accept(result.init))
              initializers.unshift(_);
          } else if (_ = accept(result)) {
            if (kind === "field")
              initializers.unshift(_);
            else
              descriptor[key] = _;
          }
        }
        if (target)
          Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      };
      __runInitializers = function(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      };
      __propKey = function(x) {
        return typeof x === "symbol" ? x : "".concat(x);
      };
      __setFunctionName = function(f, name, prefix) {
        if (typeof name === "symbol")
          name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      __addDisposableResource = function(env, value, async) {
        if (value !== null && value !== void 0) {
          if (typeof value !== "object" && typeof value !== "function")
            throw new TypeError("Object expected.");
          var dispose;
          if (async) {
            if (!Symbol.asyncDispose)
              throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
            if (!Symbol.dispose)
              throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
          }
          if (typeof dispose !== "function")
            throw new TypeError("Object not disposable.");
          env.stack.push({ value, dispose, async });
        } else if (async) {
          env.stack.push({ async: true });
        }
        return value;
      };
      var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
      };
      __disposeResources = function(env) {
        function fail(e) {
          env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
          env.hasError = true;
        }
        function next() {
          while (env.stack.length) {
            var rec = env.stack.pop();
            try {
              var result = rec.dispose && rec.dispose.call(rec.value);
              if (rec.async)
                return Promise.resolve(result).then(next, function(e) {
                  fail(e);
                  return next();
                });
            } catch (e) {
              fail(e);
            }
          }
          if (env.hasError)
            throw env.error;
        }
        return next();
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__esDecorate", __esDecorate);
      exporter("__runInitializers", __runInitializers);
      exporter("__propKey", __propKey);
      exporter("__setFunctionName", __setFunctionName);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
      exporter("__addDisposableResource", __addDisposableResource);
      exporter("__disposeResources", __disposeResources);
    });
  }
});

// node_modules/@daohaus/moloch-v3-legos/src/contracts.js
var require_contracts = __commonJS({
  "node_modules/@daohaus/moloch-v3-legos/src/contracts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CONTRACT = void 0;
    var abis_1 = require_src();
    var keychain_utils_1 = require_src2();
    exports.CONTRACT = {
      POSTER: {
        type: "static",
        contractName: "Poster",
        abi: abis_1.LOCAL_ABI.POSTER,
        targetAddress: keychain_utils_1.CONTRACT_KEYCHAINS.POSTER
      },
      ERC_20: {
        type: "static",
        contractName: "ERC20",
        abi: abis_1.LOCAL_ABI.ERC20,
        targetAddress: ".tokenAddress"
      },
      ERC_20_FUNDING: {
        type: "static",
        contractName: "ERC20",
        abi: abis_1.LOCAL_ABI.ERC20,
        targetAddress: ".formValues.paymentTokenAddress"
      },
      CURRENT_DAO: {
        type: "static",
        contractName: "Current DAO (Baal)",
        abi: abis_1.LOCAL_ABI.BAAL,
        targetAddress: ".daoId"
      },
      TRIBUTE_MINION: {
        type: "static",
        contractName: "Tribute Minion",
        abi: abis_1.LOCAL_ABI.TRIBUTE_MINION,
        targetAddress: keychain_utils_1.CONTRACT_KEYCHAINS.TRIBUTE_MINION
      },
      SHARES_ERC20: {
        type: "static",
        contractName: "SHARES_ERC20",
        abi: abis_1.LOCAL_ABI.SHARES,
        targetAddress: ".dao.sharesAddress"
      },
      LOOT_ERC20: {
        type: "static",
        contractName: "LOOT_ERC20",
        abi: abis_1.LOCAL_ABI.LOOT,
        targetAddress: ".dao.sharesAddress"
      },
      VAULT_SUMMONER: {
        type: "static",
        contractName: "VAULT_SUMMONER",
        abi: abis_1.LOCAL_ABI.VAULT_SUMMONER,
        targetAddress: keychain_utils_1.CONTRACT_KEYCHAINS.VAULT_SUMMONER
      },
      GNOSIS_MODULE: {
        type: "static",
        contractName: "GNOSIS_MODULE",
        abi: abis_1.LOCAL_ABI.GNOSIS_MODULE,
        targetAddress: ".formValues.safeAddress"
      },
      GNOSIS_MULTISEND: {
        type: "static",
        contractName: "GNOSIS_MULTISEND",
        abi: abis_1.LOCAL_ABI.GNOSIS_MULTISEND,
        targetAddress: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND
      }
    };
  }
});

// node_modules/@daohaus/moloch-v3-legos/src/fields.js
var require_fields = __commonJS({
  "node_modules/@daohaus/moloch-v3-legos/src/fields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FIELD = void 0;
    exports.FIELD = {
      TITLE: {
        id: "title",
        type: "input",
        label: "Proposal Title",
        placeholder: "Enter title"
      },
      DESCRIPTION: {
        id: "description",
        type: "markdownField",
        label: "Description",
        placeholder: "Enter description"
      },
      LINK: {
        id: "link",
        type: "input",
        label: "Link",
        placeholder: "http://",
        expectType: "url"
      },
      METADATA_LINK: {
        id: "metadataLink",
        type: "metadataLink",
        label: "Link",
        placeholder: "http://",
        expectType: "url"
      },
      SHAMAN_ADDRESS: {
        id: "shamanAddress",
        type: "input",
        label: "Shaman Address",
        placeholder: "0x1234...5678"
      },
      SHAMAN_PERMISSION: {
        id: "shamanPermission",
        type: "shamanPermissions",
        label: "Shaman Permission"
      },
      SHAMAN_DELUXE: {
        id: "shamanPermission",
        type: "shamanPermissionDeluxe",
        label: "Shaman Permission"
      },
      TRIBUTE: {
        id: "tribute",
        type: "tributeInput",
        label: "Tribute"
      },
      REQUEST_TOKEN: {
        id: "payment",
        type: "requestERC20",
        label: "Requested ERC20"
      },
      REQUEST_NATIVE_TOKEN: {
        id: "paymentAmount",
        type: "requestNativeToken"
      },
      RAGEQUIT_TOKEN: {
        id: "sharesToBurn",
        type: "ragequitToken"
      },
      TO_WEI: {
        id: "shouldOverwrite",
        type: "toWeiInput",
        label: "Should Overwrite"
      },
      NAME: {
        id: "name",
        type: "input",
        label: "DAO Name",
        placeholder: "DAO Name"
      },
      TAGS: {
        id: "tags",
        type: "tagsInput",
        label: "Tags (separated by commas)",
        placeholder: "DAO Name"
      },
      DELEGATE: {
        id: "delegatingTo",
        type: "delegateInput",
        label: "Delegate to",
        placeholder: "0x0..."
      },
      PROPOSAL_EXPIRY: {
        id: "checkRender",
        type: "checkRender",
        gateLabel: "Add Expiration Date",
        components: [
          {
            id: "proposalExpiry",
            type: "proposalExpiry",
            defaultValue: "0",
            label: "Expiration"
          }
        ]
      },
      APPLICANT: {
        id: "applicantAddress",
        type: "selectApplicant",
        label: "Applicant",
        daoMemberOnly: false
      },
      PROP_OFFERING: {
        id: "proposalOffering",
        type: "proposalOffering"
      },
      WALLETCONNECT_LINKER: {
        id: "walletConnectLink",
        type: "walletConnectLink",
        label: "WalletConnect Link",
        info: "After connecting WalletConnect to another dApp, copy the link and paste it to this input field",
        placeholder: "wc:"
      },
      SAFE_SELECT: {
        id: "safeAddress",
        type: "safeSelect",
        label: "Safe Name",
        placeholder: "Select"
      },
      ADDRESSES_AMOUNTS: {
        id: "addressesAndAmounts",
        type: "addressesAndAmounts",
        label: "Addresses & Amounts"
      }
    };
  }
});

// node_modules/@daohaus/moloch-v3-legos/src/tx.js
var require_tx = __commonJS({
  "node_modules/@daohaus/moloch-v3-legos/src/tx.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ACTION_TX = exports.TABULA_TX = exports.TX = void 0;
    var abis_1 = require_src();
    var utils_1 = require_src3();
    var keychain_utils_1 = require_src2();
    var tx_builder_1 = (init_tx_builder(), __toCommonJS(tx_builder_exports));
    var utils_2 = require_src3();
    var utils_3 = require_src3();
    var contracts_1 = require_contracts();
    var nestInArray = (arg) => {
      return {
        type: "nestedArray",
        args: Array.isArray(arg) ? arg : [arg]
      };
    };
    exports.TX = {
      POST_SIGNAL: (0, tx_builder_1.buildMultiCallTX)({
        id: "POST_SIGNAL",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: `.formValues.title`,
            description: `.formValues.description`,
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: utils_3.ProposalTypeIds.Signal }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.POSTER,
            method: "post",
            operations: { type: "static", value: 0 },
            args: [
              {
                type: "JSONDetails",
                jsonSchema: {
                  daoId: ".daoId",
                  table: { type: "static", value: "signal" },
                  queryType: { type: "static", value: "list" },
                  title: `.formValues.title`,
                  description: `.formValues.description`,
                  link: `.formValues.link`
                }
              },
              { type: "static", value: utils_1.POSTER_TAGS.daoDatabaseProposal }
            ]
          }
        ]
      }),
      APPROVE_TOKEN: {
        id: "APPROVE_TOKEN",
        contract: contracts_1.CONTRACT.ERC_20,
        method: "approve",
        args: [
          { type: "singleton", keychain: keychain_utils_1.CONTRACT_KEYCHAINS.TRIBUTE_MINION },
          { type: "static", value: utils_2.MaxUint256 }
        ]
      },
      ISSUE: (0, tx_builder_1.buildMultiCallTX)({
        id: "ISSUE",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.IssueSharesLoot
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "mintShares",
            args: [
              nestInArray(".formValues.recipient"),
              nestInArray(".formValues.sharesRequested")
            ]
          },
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "mintLoot",
            args: [
              nestInArray(".formValues.recipient"),
              nestInArray(".formValues.lootRequested")
            ]
          }
        ]
      }),
      ISSUE_SHARES: (0, tx_builder_1.buildMultiCallTX)({
        id: "ISSUE",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.IssueSharesLoot
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "mintShares",
            args: [
              ".formValues.addressesAndAmounts.recipients",
              ".formValues.addressesAndAmounts.values"
            ]
          }
        ]
      }),
      ADD_SHAMAN: (0, tx_builder_1.buildMultiCallTX)({
        id: "ADD_SHAMAN",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: utils_3.ProposalTypeIds.AddShaman }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "setShamans",
            args: [
              nestInArray(".formValues.shamanAddress"),
              nestInArray(".formValues.shamanPermission")
            ]
          }
        ]
      }),
      ISSUE_ERC20: (0, tx_builder_1.buildMultiCallTX)({
        id: "ISSUE_ERC20",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.TransferErc20
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.ERC_20_FUNDING,
            method: "transfer",
            args: [".formValues.recipient", ".formValues.paymentTokenAmt"]
          }
        ]
      }),
      ISSUE_ERC20_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: "ISSUE_ERC20_SIDECAR",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.TransferErc20
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "executeAsBaal",
            args: [
              ".formValues.safeAddress",
              { type: "static", value: "0" },
              {
                type: "encodeCall",
                action: {
                  contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                  method: "execTransactionFromModule",
                  args: [
                    {
                      type: "singleton",
                      keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND
                    },
                    { type: "static", value: "0" },
                    {
                      type: "multicall",
                      actions: [
                        {
                          contract: contracts_1.CONTRACT.ERC_20_FUNDING,
                          method: "transfer",
                          args: [
                            ".formValues.recipient",
                            ".formValues.paymentTokenAmt"
                          ]
                        }
                      ]
                    },
                    { type: "static", value: "1" }
                  ]
                }
              }
            ]
          }
        ]
      }),
      ISSUE_NETWORK_TOKEN: (0, tx_builder_1.buildMultiCallTX)({
        id: "ISSUE_NETWORK_TOKEN",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.TransferNetworkToken
            }
          }
        },
        actions: [
          {
            contract: {
              type: "static",
              contractName: "NETWORK",
              abi: abis_1.LOCAL_ABI.ERC20,
              targetAddress: ".formValues.recipient"
            },
            method: "noMethod",
            args: [],
            value: ".formValues.paymentAmount",
            data: {
              type: "static",
              value: utils_1.ENCODED_0X0_DATA
            }
          }
        ]
      }),
      ISSUE_NETWORK_TOKEN_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: "ISSUE_NETWORK_TOKEN_SIDECAR",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.TransferNetworkToken
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "executeAsBaal",
            args: [
              ".formValues.safeAddress",
              { type: "static", value: "0" },
              {
                type: "encodeCall",
                action: {
                  contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                  method: "execTransactionFromModule",
                  args: [
                    {
                      type: "singleton",
                      keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND
                    },
                    { type: "static", value: "0" },
                    {
                      type: "multicall",
                      actions: [
                        {
                          contract: {
                            type: "static",
                            contractName: "NETWORK",
                            abi: abis_1.LOCAL_ABI.ERC20,
                            targetAddress: ".formValues.recipient"
                          },
                          method: "noMethod",
                          args: [],
                          value: ".formValues.paymentAmount",
                          data: {
                            type: "static",
                            value: "0x"
                          }
                        }
                      ]
                    },
                    { type: "static", value: "1" }
                  ]
                }
              }
            ]
          }
        ]
      }),
      UPDATE_METADATA_SETTINGS: {
        id: "UPDATE_METADATA_SETTINGS",
        contract: contracts_1.CONTRACT.POSTER,
        method: "post",
        args: [
          {
            type: "JSONDetails",
            jsonSchema: {
              daoId: ".daoId",
              table: { type: "static", value: "daoProfile" },
              queryType: { type: "static", value: "latest" },
              name: ".formValues.name",
              description: ".formValues.description",
              longDescription: ".formValues.long_description",
              avatarImg: ".formValues.icon",
              tags: ".formValues.tags",
              links: {
                type: "nestedArray",
                args: [
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.discord",
                      label: { type: "static", value: "Discord" }
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.github",
                      label: { type: "static", value: "Github" }
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.blog",
                      label: { type: "static", value: "Blog" }
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.telegram",
                      label: { type: "static", value: "Telegram" }
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.twitter",
                      label: { type: "static", value: "Twitter" }
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.web",
                      label: { type: "static", value: "Web" }
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.custom1",
                      label: ".formValues.custom1Label"
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.custom2",
                      label: ".formValues.custom2Label"
                    }
                  },
                  {
                    type: "JSONDetails",
                    jsonSchema: {
                      url: ".formValues.custom3",
                      label: ".formValues.custom3Label"
                    }
                  }
                ]
              }
            }
          },
          { type: "static", value: utils_1.POSTER_TAGS.daoProfileUpdate }
        ]
      },
      UPDATE_GOV_SETTINGS: (0, tx_builder_1.buildMultiCallTX)({
        id: "UPDATE_GOV_SETTINGS",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.UpdateGovSettings
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "setGovernanceConfig",
            args: [
              {
                type: "argEncode",
                args: [
                  ".formValues.votingPeriodInSeconds",
                  ".formValues.gracePeriodInSeconds",
                  ".formValues.newOffering",
                  ".formValues.quorum",
                  ".formValues.sponsorThreshold",
                  ".formValues.minRetention"
                ],
                solidityTypes: [
                  "uint32",
                  "uint32",
                  "uint256",
                  "uint256",
                  "uint256",
                  "uint256"
                ]
              }
            ]
          }
        ]
      }),
      TOKEN_SETTINGS: (0, tx_builder_1.buildMultiCallTX)({
        id: "TOKEN_SETTINGS",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            vTokenTransferable: ".formValues.vStake",
            nvTokenTransferable: ".formValues.nvStake",
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.UpdateTokenSettings
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "setAdminConfig",
            args: [".formValues.vStake", ".formValues.nvStake"]
          }
        ]
      }),
      TOKENS_FOR_SHARES: {
        id: "TOKENS_FOR_SHARES",
        contract: contracts_1.CONTRACT.TRIBUTE_MINION,
        method: "submitTributeProposal",
        args: [
          ".daoId",
          ".formValues.tokenAddress",
          ".formValues.tokenAmount",
          ".formValues.sharesRequested",
          ".formValues.lootRequested",
          {
            type: "proposalExpiry",
            search: ".formValues.proposalExpiry",
            fallback: 0
          },
          {
            type: "static",
            value: "0"
          },
          {
            type: "JSONDetails",
            jsonSchema: {
              title: ".formValues.title",
              description: ".formValues.description",
              contentURI: `.formValues.link`,
              contentURIType: { type: "static", value: "url" },
              proposalType: {
                type: "static",
                value: utils_3.ProposalTypeIds.TokensForShares
              }
            }
          }
        ]
      },
      GUILDKICK: (0, tx_builder_1.buildMultiCallTX)({
        id: "GUILDKICK",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            link: ".formValues.link",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: utils_3.ProposalTypeIds.GuildKick }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "mintLoot",
            args: [
              {
                type: "nestedArray",
                args: [".formValues.memberAddress"]
              },
              {
                type: "nestedArray",
                args: [".formValues.memberShares"]
              }
            ]
          },
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "burnShares",
            args: [
              {
                type: "nestedArray",
                args: [".formValues.memberAddress"]
              },
              {
                type: "nestedArray",
                args: [".formValues.memberShares"]
              }
            ]
          }
        ]
      }),
      MANAGE_DELEGATE: {
        id: "MANAGE_DELEGATE",
        contract: contracts_1.CONTRACT.SHARES_ERC20,
        method: "delegate",
        args: [".formValues.delegatingTo"]
      },
      RAGEQUIT: {
        id: "RAGEQUIT",
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: "ragequit",
        args: [
          ".formValues.to",
          ".formValues.sharesToBurn",
          ".formValues.lootToBurn",
          ".formValues.tokens"
        ]
      },
      WALLETCONNECT: (0, tx_builder_1.buildMultiCallTX)({
        id: "WALLETCONNECT",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            link: ".formValues.link",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: utils_3.ProposalTypeIds.WalletConnect }
          }
        },
        actions: [
          {
            contract: {
              type: "static",
              contractName: "ACE",
              abi: [],
              targetAddress: ".formValues.txTo"
            },
            args: [],
            method: "noMethod",
            value: ".formValues.txValue",
            data: ".formValues.txData",
            operations: ".formValues.txOperation"
          }
        ]
      }),
      ADD_SAFE: {
        id: "ADD_SAFE",
        contract: contracts_1.CONTRACT.VAULT_SUMMONER,
        method: "summonVault",
        args: [".daoId", ".formValues.name"]
      },
      MULTICALL: (0, tx_builder_1.buildMultiCallTX)({
        id: "MULTICALL",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            link: ".formValues.link",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: utils_3.ProposalTypeIds.Multicall }
          }
        },
        actions: [],
        formActions: true
      }),
      MULTICALL_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: "MULTICALL_SIDECAR",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            link: ".formValues.link",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: utils_3.ProposalTypeIds.Multicall }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "executeAsBaal",
            args: [
              ".formValues.safeAddress",
              { type: "static", value: "0" },
              {
                type: "encodeCall",
                action: {
                  contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                  method: "execTransactionFromModule",
                  args: [
                    {
                      type: "singleton",
                      keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND
                    },
                    { type: "static", value: "0" },
                    {
                      type: "multicall",
                      actions: [],
                      formActions: true
                    },
                    { type: "static", value: "1" }
                  ]
                }
              }
            ]
          }
        ]
      }),
      ADD_SIGNER_TO_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: "ADD_SIGNER_TO_SIDECAR",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: {
              type: "static",
              value: utils_3.ProposalTypeIds.AddSigner
            }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.CURRENT_DAO,
            method: "executeAsBaal",
            args: [
              ".formValues.safeAddress",
              { type: "static", value: "0" },
              {
                type: "encodeCall",
                action: {
                  contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                  method: "execTransactionFromModule",
                  args: [
                    {
                      type: "singleton",
                      keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND
                    },
                    { type: "static", value: "0" },
                    {
                      type: "multicall",
                      actions: [
                        {
                          contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                          method: "addOwnerWithThreshold",
                          args: [".formValues.signer", ".formValues.threshold"]
                        }
                      ]
                    },
                    { type: "static", value: "1" }
                  ]
                }
              }
            ]
          }
        ]
      })
    };
    exports.TABULA_TX = {
      CREATE_PUBLICATION: (0, tx_builder_1.buildMultiCallTX)({
        id: "CREATE_PUBLICATION",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: "Create Publication Proposal" }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.POSTER,
            method: "post",
            args: [
              {
                type: "JSONDetails",
                jsonSchema: {
                  action: { type: "static", value: utils_1.TABULA_TAGS.PUB_ACTION },
                  title: ".formValues.pubName",
                  tags: ".formValues.tags",
                  description: ".formValues.pubDescription",
                  image: ".formValues.pubImage"
                }
              },
              { type: "static", value: utils_1.TABULA_TAGS.PUBLICATION }
            ]
          }
        ]
      }),
      CREATE_ARTICLE: (0, tx_builder_1.buildMultiCallTX)({
        id: "CREATE_ARTICLE",
        JSONDetails: {
          type: "JSONDetails",
          jsonSchema: {
            title: ".formValues.title",
            description: ".formValues.description",
            contentURI: `.formValues.link`,
            contentURIType: { type: "static", value: "url" },
            proposalType: { type: "static", value: "Create Article Proposal" }
          }
        },
        actions: [
          {
            contract: contracts_1.CONTRACT.POSTER,
            method: "post",
            args: [
              {
                type: "JSONDetails",
                jsonSchema: {
                  action: { type: "static", value: utils_1.TABULA_TAGS.ARTICLE_ACTION },
                  publicationId: ".formValues.pubId",
                  article: { type: "ipfsPinata", content: ".formValues.article" },
                  title: ".formValues.articleTitle"
                }
              },
              { type: "static", value: utils_1.TABULA_TAGS.PUBLICATION }
            ]
          }
        ]
      })
    };
    exports.ACTION_TX = {
      SPONSOR: {
        id: "SPONSOR",
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: "sponsorProposal"
      },
      VOTE: {
        id: "VOTE",
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: "submitVote"
      },
      PROCESS: {
        id: "PROCESS",
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: "processProposal"
      },
      CANCEL: {
        id: "CANCEL",
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: "cancelProposal"
      }
    };
  }
});

// node_modules/@daohaus/moloch-v3-legos/src/form.js
var require_form = __commonJS({
  "node_modules/@daohaus/moloch-v3-legos/src/form.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ADVANCED_PROPOSAL_FORMS = exports.BASIC_PROPOSAL_FORMS = exports.COMMON_FORMS = exports.TABULA_FORMS = exports.PROPOSAL_FORMS = exports.getFormLegoById = void 0;
    var utils_1 = require_src3();
    var fields_1 = require_fields();
    var tx_1 = require_tx();
    var getFormLegoById = (id) => {
      const allForms = Object.assign(Object.assign({}, exports.PROPOSAL_FORMS), exports.COMMON_FORMS);
      const formKey = Object.keys(allForms).find((key) => {
        return allForms[key].id === id;
      });
      if (!formKey)
        return;
      return allForms[formKey];
    };
    exports.getFormLegoById = getFormLegoById;
    var PROPOSAL_SETTINGS_FIELDS = [fields_1.FIELD.PROPOSAL_EXPIRY, fields_1.FIELD.PROP_OFFERING];
    exports.PROPOSAL_FORMS = {
      SIGNAL: {
        id: "SIGNAL",
        title: "Signal Request",
        subtitle: "Signal Proposal",
        description: "Request an on-chain member vote.",
        requiredFields: { title: true, description: true },
        tx: tx_1.TX.POST_SIGNAL,
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      ISSUE: {
        id: "ISSUE",
        title: "DAO Token Request",
        subtitle: "Token Proposal",
        description: "Request voting or non-voting tokens from the DAO.",
        tx: tx_1.TX.ISSUE,
        requiredFields: {
          title: true,
          description: true,
          sharesRequested: true,
          lootRequested: true,
          recipient: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "recipient",
            type: "input",
            label: "Recipient",
            expectType: "ethAddress",
            placeholder: "0x..."
          },
          Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: "Voting Token Requested", id: "sharesRequested" }),
          Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: "Non-Voting Token Requested", id: "lootRequested" }),
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      ADD_SHAMAN: {
        id: "ADD_SHAMAN",
        title: "Add Shaman",
        description: "Grant DAO permissions to an external contract.",
        subtitle: "Shaman Proposal",
        requiredFields: {
          title: true,
          description: true,
          shamanAddress: true,
          shamanPermission: true
        },
        tx: tx_1.TX.ADD_SHAMAN,
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          fields_1.FIELD.SHAMAN_ADDRESS,
          fields_1.FIELD.SHAMAN_PERMISSION,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      TRANSFER_ERC20: {
        id: "TRANSFER_ERC20",
        title: "ERC-20 Token Transfer",
        subtitle: "Funding Proposal",
        description: "Request ERC-20 tokens from the DAO treasury.",
        tx: tx_1.TX.ISSUE_ERC20,
        requiredFields: {
          title: true,
          description: true,
          payment: true,
          recipient: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "recipient",
            type: "input",
            label: "Recipient",
            info: "Address to receive the tokens",
            placeholder: "0x..."
          },
          fields_1.FIELD.REQUEST_TOKEN,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      TRANSFER_ERC20_SIDECAR: {
        id: "TRANSFER_ERC20_SIDECAR",
        title: "Transfer ERC-20",
        subtitle: "Transfer Proposal",
        description: "Create a proposal to transfer ERC-20 tokens from the DAO safe",
        tx: tx_1.TX.ISSUE_ERC20_SIDECAR,
        requiredFields: {
          title: true,
          description: true,
          payment: true,
          recipient: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          fields_1.FIELD.SAFE_SELECT,
          {
            id: "recipient",
            type: "input",
            label: "Recipient",
            info: "Address to receive the tokens",
            placeholder: "0x..."
          },
          fields_1.FIELD.REQUEST_TOKEN,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      TRANSFER_NETWORK_TOKEN: {
        id: "TRANSFER_NETWORK_TOKEN",
        title: "Network Token Transfer",
        subtitle: "Funding Proposal",
        description: "Request network's native token from the DAO treasury.",
        tx: tx_1.TX.ISSUE_NETWORK_TOKEN,
        requiredFields: {
          title: true,
          description: true,
          payment: true,
          recipient: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "recipient",
            type: "input",
            label: "Recipient",
            info: "Address to receive the tokens",
            placeholder: "0x..."
          },
          fields_1.FIELD.REQUEST_NATIVE_TOKEN,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      TRANSFER_NETWORK_TOKEN_SIDECAR: {
        id: "TRANSFER_NETWORK_TOKEN_SIDECAR",
        title: "Network Token Transfer",
        subtitle: "Funding Proposal",
        description: "Request network's native token from the DAO safe.",
        tx: tx_1.TX.ISSUE_NETWORK_TOKEN_SIDECAR,
        requiredFields: {
          title: true,
          description: true,
          payment: true,
          recipient: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          fields_1.FIELD.SAFE_SELECT,
          {
            id: "recipient",
            type: "input",
            label: "Recipient",
            info: "Address to receive the tokens",
            placeholder: "0x..."
          },
          fields_1.FIELD.REQUEST_NATIVE_TOKEN,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      UPDATE_GOV_SETTINGS: {
        id: "UPDATE_GOV_SETTINGS",
        title: "Update Governance Settings",
        subtitle: "Governance Proposal",
        description: "Change proposal timing or advanced governance settings.",
        tx: tx_1.TX.UPDATE_GOV_SETTINGS,
        requiredFields: {
          title: true,
          description: true,
          votingPeriod: true,
          gracePeriod: true,
          quorum: true,
          minRetention: true,
          sponsorThreshold: true,
          newOffering: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "timing",
            type: "formSegment",
            title: "Proposal Timing",
            description: "Update your timing for Voting and Grace periods.",
            fields: [
              {
                id: "timingSplit",
                type: "splitColumn",
                rows: [
                  {
                    rowId: "timingRows",
                    left: {
                      id: "votingPeriod",
                      type: "timePicker",
                      label: "Voting Period",
                      info: utils_1.SUMMON_COPY.VOTING_PERIOD
                    },
                    right: {
                      id: "gracePeriod",
                      type: "timePicker",
                      label: "Grace Period",
                      info: utils_1.SUMMON_COPY.GRACE_PERIOD
                    }
                  }
                ]
              }
            ]
          },
          {
            id: "advanced",
            type: "formSegment",
            title: "Advanced Governance",
            description: "Modify some advanced governance features.",
            fields: [
              {
                id: "advancedSplit",
                type: "splitColumn",
                rows: [
                  {
                    rowId: "row1",
                    left: {
                      id: "quorum",
                      type: "input",
                      expectType: "percent",
                      label: "Quorum %",
                      placeholder: "20",
                      info: utils_1.SUMMON_COPY.QUORUM
                    },
                    right: {
                      id: "minRetention",
                      type: "input",
                      label: "Min Retention",
                      expectType: "percent",
                      placeholder: "66",
                      info: utils_1.SUMMON_COPY.MIN_RETENTION
                    }
                  },
                  {
                    rowId: "row2",
                    left: {
                      id: "sponsorThreshold",
                      type: "toWeiInput",
                      expectType: "number",
                      label: "Sponsor Threshold",
                      placeholder: "1",
                      info: utils_1.SUMMON_COPY.SPONSOR_THRESHOLD
                    },
                    right: {
                      id: "newOffering",
                      type: "toWeiInput",
                      label: "New Offering",
                      expectType: "number",
                      placeholder: "0",
                      info: utils_1.SUMMON_COPY.NEW_OFFERING
                    }
                  }
                ]
              }
            ]
          },
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      TOKEN_SETTINGS: {
        id: "TOKEN_SETTINGS",
        title: "Update Token Settings",
        subtitle: "Token Proposal",
        description: "Change transferability of voting or non-voting tokens.",
        tx: tx_1.TX.TOKEN_SETTINGS,
        requiredFields: {
          title: true,
          description: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "tokenSettings",
            type: "formSegment",
            title: "DAO Tokens",
            description: "Update Token Transferability",
            fields: [
              {
                id: "split",
                type: "splitColumn",
                rows: [
                  {
                    rowId: "row1",
                    left: {
                      id: "vStake",
                      type: "switch",
                      label: "Voting Token",
                      info: utils_1.SUMMON_COPY.STAKE_TRANSFER,
                      switches: [
                        {
                          id: "vStake",
                          fieldLabel: {
                            off: "Transferable",
                            on: "Not Transferable"
                          }
                        }
                      ]
                    },
                    right: {
                      id: "nvStake",
                      type: "switch",
                      label: "Non-Voting Token",
                      info: utils_1.SUMMON_COPY.NV_STAKE_TRANSFER,
                      switches: [
                        {
                          id: "nvStake",
                          fieldLabel: {
                            off: "Transferable",
                            on: "Not Transferable"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          },
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      TOKENS_FOR_SHARES: {
        id: "TOKENS_FOR_SHARES",
        title: "DAO Token Swap",
        description: "Request voting or non-voting tokens from the DAO in exchange for tokens.",
        subtitle: "Token Proposal",
        tx: tx_1.TX.TOKENS_FOR_SHARES,
        requiredFields: {
          title: true,
          description: true,
          sharesRequested: true,
          lootRequested: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: "Voting Token Requested", id: "sharesRequested" }),
          Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: "Non-Voting Token Requested", id: "lootRequested" }),
          fields_1.FIELD.TRIBUTE,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      GUILDKICK: {
        id: "GUILDKICK",
        title: "Remove Member",
        subtitle: "Token Proposal",
        description: "Change a member\u2019s voting tokens into non-voting tokens.",
        tx: tx_1.TX.GUILDKICK,
        requiredFields: {
          title: true,
          memberAddress: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "memberAddress",
            type: "selectApplicant",
            label: "Member",
            daoMemberOnly: true
          },
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      WALLETCONNECT: {
        id: "WALLETCONNECT",
        title: "Use\xA0WalletConnect",
        subtitle: "WalletConnect Proposal",
        description: "Interact with external contracts and applications.",
        tx: tx_1.TX.WALLETCONNECT,
        requiredFields: {
          title: true,
          walletConnectLink: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          fields_1.FIELD.WALLETCONNECT_LINKER,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      MULTICALL_BUILDER: {
        id: "MULTICALL",
        title: "Multicall Proposal Builder",
        subtitle: "Multicall Proposal",
        description: "Use the transaction builder to propose a multicall proposal.",
        tx: tx_1.TX.MULTICALL,
        requiredFields: {
          title: true
        },
        fields: [
          {
            id: "details",
            type: "formSegment",
            collapsible: true,
            defaultOpen: true,
            title: "Proposal Overview",
            fields: [
              fields_1.FIELD.TITLE,
              fields_1.FIELD.DESCRIPTION,
              fields_1.FIELD.LINK,
              ...PROPOSAL_SETTINGS_FIELDS
            ]
          },
          {
            id: "multisendActions",
            type: "multisendActions"
          }
        ]
      },
      MULTICALL_BUILDER_SIDECAR: {
        id: "MULTICALL_SIDECAR",
        title: "Multicall Proposal Builder",
        subtitle: "Multicall Proposal",
        description: "Use the transaction builder to propose a multicall proposal.",
        tx: tx_1.TX.MULTICALL_SIDECAR,
        requiredFields: {
          title: true
        },
        fields: [
          {
            id: "details",
            type: "formSegment",
            collapsible: true,
            defaultOpen: true,
            title: "Proposal Overview",
            fields: [
              fields_1.FIELD.TITLE,
              fields_1.FIELD.DESCRIPTION,
              fields_1.FIELD.LINK,
              ...PROPOSAL_SETTINGS_FIELDS
            ]
          },
          {
            id: "multisendActions",
            type: "multisendActions"
          }
        ]
      },
      ADD_SIGNER_TO_SIDECAR: {
        id: "ADD_SIGNER_TO_SIDECAR",
        title: "Add Signer to Safe",
        description: "Create a proposal to tadd a signer to a DAO Safe",
        tx: tx_1.TX.ADD_SIGNER_TO_SIDECAR,
        devtool: true,
        log: true,
        requiredFields: {
          title: true,
          description: true,
          signer: true,
          threshold: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          fields_1.FIELD.SAFE_SELECT,
          {
            id: "signer",
            type: "input",
            label: "Signer",
            info: "Signer Address",
            expectType: "ethAddress",
            placeholder: "0x..."
          },
          {
            id: "threshold",
            type: "input",
            label: "Threshold (1 for 1/1 signers)",
            expectType: "number",
            placeholder: "1"
          },
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      ISSUE_SHARES: {
        id: "ISSUE_SHARES",
        title: "DAO Token Request",
        subtitle: "Token Proposal",
        description: "Request voting tokens from the DAO for multiple addresses.",
        tx: tx_1.TX.ISSUE_SHARES,
        log: true,
        requiredFields: {
          title: true,
          description: true,
          addressesAndAmounts: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          fields_1.FIELD.ADDRESSES_AMOUNTS,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      }
    };
    exports.TABULA_FORMS = {
      CREATE_PUBLICATION: {
        id: "CREATE_PUBLICATION",
        title: "Start Publication",
        subtitle: "Publication Proposal",
        description: "Start a new DAO publication on Tabula.gg",
        tx: tx_1.TABULA_TX.CREATE_PUBLICATION,
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "pubData",
            type: "formSegment",
            title: "Publication Data",
            description: "Some information about your publication.",
            fields: [
              {
                id: "pubName",
                type: "input",
                label: "Publication Name",
                placeholder: "Name"
              },
              {
                id: "tags",
                type: "csInput",
                label: "Publication Name",
                placeholder: "comma, separated, tags",
                itemNoun: {
                  singular: "tag",
                  plural: "tags"
                }
              },
              {
                id: "pubDescription",
                type: "textarea",
                label: "Publication Description",
                placeholder: "Description"
              },
              {
                id: "pubImage",
                type: "input",
                label: "Publication Image",
                placeholder: "Image URL",
                expectType: "url"
              }
            ]
          },
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      CREATE_ARTICLE: {
        id: "CREATE_ARTICLE",
        title: "Write an Article",
        subtitle: "Tabula Article Proposal",
        description: "Write an article on Tabula.gg",
        tx: tx_1.TABULA_TX.CREATE_ARTICLE,
        requiredFields: {
          title: true,
          description: true,
          articleTitle: true,
          fakeMD: true,
          pub_id: true
        },
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          {
            id: "pubData",
            type: "formSegment",
            title: "Publication Data",
            description: "Some information about your publication.",
            fields: [
              {
                id: "articleTitle",
                type: "input",
                label: "Article Title",
                placeholder: "ex. 10 Signs You're a Real Champ"
              },
              fields_1.FIELD.FAKE_MD
            ]
          },
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      }
    };
    exports.COMMON_FORMS = {
      METADATA_SETTINGS: {
        id: "METADATA_SETTINGS",
        title: "Update Metadata Settings",
        subtitle: "Settings",
        requiredFields: { name: true },
        tx: tx_1.TX.UPDATE_METADATA_SETTINGS,
        fields: [
          fields_1.FIELD.NAME,
          fields_1.FIELD.DESCRIPTION,
          Object.assign(Object.assign({}, fields_1.FIELD.DESCRIPTION), { id: "long_description", label: "Long Description" }),
          Object.assign(Object.assign({}, fields_1.FIELD.LINK), { id: "icon", label: "Icon" }),
          {
            id: "links",
            type: "formSegment",
            title: "Add links to important content for your DAO",
            fields: [
              Object.assign(Object.assign({}, fields_1.FIELD.LINK), { id: "discord", label: "Discord" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "github", label: "Github" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "blog", label: "Blog" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "telegram", label: "Telegram" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "twitter", label: "Twitter" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "web", label: "Website" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "custom1", label: "Custom Link 1" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "custom2", label: "Custom Link 2" }),
              Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: "custom3", label: "Custom Link 3" })
            ]
          },
          fields_1.FIELD.TAGS
        ]
      },
      UPDATE_SHAMAN: {
        id: "UPDATE_SHAMAN",
        title: "Update Shaman Settings",
        description: "Reduce shaman permissions level.",
        subtitle: "Shaman Proposal",
        requiredFields: {
          title: true,
          description: true,
          shamanAddress: true,
          shamanPermission: true
        },
        tx: tx_1.TX.ADD_SHAMAN,
        fields: [
          fields_1.FIELD.TITLE,
          fields_1.FIELD.DESCRIPTION,
          fields_1.FIELD.LINK,
          Object.assign(Object.assign({}, fields_1.FIELD.SHAMAN_ADDRESS), { disabled: true }),
          fields_1.FIELD.SHAMAN_DELUXE,
          ...PROPOSAL_SETTINGS_FIELDS
        ]
      },
      MANAGE_DELEGATE: {
        id: "MANAGE_DELEGATE",
        fields: [fields_1.FIELD.DELEGATE],
        requiredFields: {
          delegatingTo: true
        },
        submitButtonText: "Update Delegate",
        tx: tx_1.TX.MANAGE_DELEGATE
      },
      RAGEQUIT: {
        id: "RAGEQUIT",
        title: "Ragequit",
        subtitle: "Members",
        fields: [
          {
            id: "tokenAmounts",
            type: "formSegment",
            title: "Step 1. Select voting and/or non-voting tokens to ragequit",
            fields: [
              {
                id: "sharesToBurn",
                type: "ragequitToken"
              },
              { id: "lootToBurn", type: "ragequitToken" }
            ]
          },
          {
            id: "tokenAddresses",
            type: "formSegment",
            title: "Step 2. Select treasury tokens you want to receive in exchange for your DAO tokens",
            fields: [{ id: "tokens", type: "ragequitTokenList" }]
          },
          {
            id: "checkRender",
            type: "checkRender",
            gateLabel: "Ragequit to different address (optional)",
            components: [
              {
                id: "to",
                type: "input",
                label: "Address to send funds",
                expectType: "ethAddress",
                placeholder: "0x..."
              }
            ]
          }
        ],
        tx: tx_1.TX.RAGEQUIT
      },
      ADD_SAFE: {
        id: "ADD_SAFE",
        description: "Create a new Gnosis Safe and attach to your DAO as a non-ragequittable vault.",
        requiredFields: {
          name: true
        },
        tx: tx_1.TX.ADD_SAFE,
        fields: [
          {
            id: "name",
            type: "input",
            label: "Safe Name",
            placeholder: "Enter name"
          }
        ],
        submitButtonText: "Create"
      }
    };
    exports.BASIC_PROPOSAL_FORMS = {
      SIGNAL: exports.PROPOSAL_FORMS.SIGNAL,
      ISSUE: exports.PROPOSAL_FORMS.ISSUE,
      TOKENS_FOR_SHARES: exports.PROPOSAL_FORMS.TOKENS_FOR_SHARES,
      TRANSFER_ERC20: exports.PROPOSAL_FORMS.TRANSFER_ERC20,
      TRANSFER_NETWORK_TOKEN: exports.PROPOSAL_FORMS.TRANSFER_NETWORK_TOKEN
    };
    exports.ADVANCED_PROPOSAL_FORMS = {
      WALLETCONNECT: exports.PROPOSAL_FORMS.WALLETCONNECT,
      UPDATE_GOV_SETTINGS: exports.PROPOSAL_FORMS.UPDATE_GOV_SETTINGS,
      TOKEN_SETTINGS: exports.PROPOSAL_FORMS.TOKEN_SETTINGS,
      ADD_SHAMAN: exports.PROPOSAL_FORMS.ADD_SHAMAN,
      GUILDKICK: exports.PROPOSAL_FORMS.GUILDKICK,
      MULTICALL_BUILDER: exports.PROPOSAL_FORMS.MULTICALL_BUILDER
    };
  }
});

// node_modules/@daohaus/moloch-v3-legos/src/index.js
var require_src4 = __commonJS({
  "node_modules/@daohaus/moloch-v3-legos/src/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_contracts(), exports);
    tslib_1.__exportStar(require_fields(), exports);
    tslib_1.__exportStar(require_form(), exports);
    tslib_1.__exportStar(require_tx(), exports);
  }
});

export {
  require_src4 as require_src
};
//# sourceMappingURL=chunk-2ONOETH2.js.map
