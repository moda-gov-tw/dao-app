import {
  require_src as require_src5
} from "./chunk-2ONOETH2.js";
import {
  BiSearch,
  Markdown,
  MdOutlineGavel,
  MolochFields
} from "./chunk-YZTPB5VT.js";
import "./chunk-UOXCO36R.js";
import {
  useConnectedMember,
  useCurrentDao,
  useDaoData,
  useDaoMember,
  useDaoMembers,
  useDaoProposal,
  useDaoProposals,
  useProfile
} from "./chunk-QZP67E6F.js";
import "./chunk-3AVE6YVB.js";
import "./chunk-IPUOWYW2.js";
import {
  FormBuilder
} from "./chunk-VAYEHJ7M.js";
import {
  deepDecodeProposalActions,
  init_tx_builder,
  isActionError,
  useTxBuilder
} from "./chunk-D5VMCTSK.js";
import {
  require_src2 as require_src4
} from "./chunk-SYS7556B.js";
import {
  require_src
} from "./chunk-R7RRHWOA.js";
import {
  ExplorerLink,
  useDHConnect
} from "./chunk-IYRBC5QN.js";
import "./chunk-Y72VTADM.js";
import "./chunk-YLYEAM2N.js";
import "./chunk-7XBLEUPS.js";
import "./chunk-QPLPTXWL.js";
import {
  Link
} from "./chunk-37K2RHZ4.js";
import "./chunk-YC6YMAXM.js";
import "./chunk-M75A2V3Z.js";
import "./chunk-QZFIEZKQ.js";
import "./chunk-DMOAGK44.js";
import "./chunk-JP6YUYUV.js";
import "./chunk-LX53IREH.js";
import {
  AddressDisplay,
  Bold,
  Button,
  Card,
  DataIndicator,
  DataMd,
  DataSm,
  DataXs,
  Dialog,
  DialogContent,
  DialogTrigger,
  Divider,
  DropdownButtonTrigger,
  DropdownContent,
  DropdownIconTrigger,
  DropdownItem,
  DropdownLabel,
  DropdownLinkStyles,
  DropdownMenu,
  DropdownTrigger,
  GatedButton,
  H3,
  H4,
  H5,
  Icon$1,
  Input,
  Italic,
  Link$1,
  Loading,
  MemberCard,
  MemberCardCopyAddress,
  MemberCardExplorerLink,
  MemberCardItem,
  ParLg,
  ParMd,
  ParSm,
  ParXs,
  ProfileAvatar,
  Progress,
  SingleColumnLayout,
  Tag,
  TintSecondary,
  Tooltip,
  breakpoints,
  font,
  indigo$1,
  mint$1,
  slate$1,
  tomato$1,
  useBreakpoint,
  useToast,
  widthQuery
} from "./chunk-LHJQX32V.js";
import {
  require_ri
} from "./chunk-BS4HP37B.js";
import {
  Je,
  st
} from "./chunk-AS6NKUTQ.js";
import "./chunk-KNI3CCJ4.js";
import {
  require_src as require_src3
} from "./chunk-KYOZVWPW.js";
import "./chunk-365EK2P6.js";
import "./chunk-PSSTWNFB.js";
import "./chunk-4OGDHTCQ.js";
import "./chunk-JM7HR6U7.js";
import {
  require_cjs
} from "./chunk-JTBPOENI.js";
import {
  require_jsx_runtime
} from "./chunk-GYNMGCXV.js";
import {
  require_react
} from "./chunk-T5BEU6ZH.js";
import "./chunk-L3R5IPTY.js";
import {
  require_src as require_src2
} from "./chunk-EBQ4QPBR.js";
import {
  __commonJS,
  __toESM
} from "./chunk-LMAYTEU7.js";

// node_modules/react-table/dist/react-table.development.js
var require_react_table_development = __commonJS({
  "node_modules/react-table/dist/react-table.development.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react()) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global2 = global2 || self, factory(global2.ReactTable = {}, global2.React));
    })(exports, function(exports2, React2) {
      "use strict";
      React2 = React2 && Object.prototype.hasOwnProperty.call(React2, "default") ? React2["default"] : React2;
      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function() {
          var self2 = this, args = arguments;
          return new Promise(function(resolve, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(void 0);
          });
        };
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      var renderErr = "Renderer Error \u261D\uFE0F";
      var actions = {
        init: "init"
      };
      var defaultRenderer = function defaultRenderer2(_ref) {
        var _ref$value = _ref.value, value = _ref$value === void 0 ? "" : _ref$value;
        return value;
      };
      var emptyRenderer = function emptyRenderer2() {
        return React2.createElement(React2.Fragment, null, "\xA0");
      };
      var defaultColumn = {
        Cell: defaultRenderer,
        width: 150,
        minWidth: 0,
        maxWidth: Number.MAX_SAFE_INTEGER
      };
      function mergeProps() {
        for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {
          propList[_key] = arguments[_key];
        }
        return propList.reduce(function(props, next) {
          var style = next.style, className = next.className, rest = _objectWithoutPropertiesLoose(next, ["style", "className"]);
          props = _extends({}, props, {}, rest);
          if (style) {
            props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;
          }
          if (className) {
            props.className = props.className ? props.className + " " + className : className;
          }
          if (props.className === "") {
            delete props.className;
          }
          return props;
        }, {});
      }
      function handlePropGetter(prevProps, userProps, meta) {
        if (typeof userProps === "function") {
          return handlePropGetter({}, userProps(prevProps, meta));
        }
        if (Array.isArray(userProps)) {
          return mergeProps.apply(void 0, [prevProps].concat(userProps));
        }
        return mergeProps(prevProps, userProps);
      }
      var makePropGetter = function makePropGetter2(hooks, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return function(userProps) {
          if (userProps === void 0) {
            userProps = {};
          }
          return [].concat(hooks, [userProps]).reduce(function(prev, next) {
            return handlePropGetter(prev, next, _extends({}, meta, {
              userProps
            }));
          }, {});
        };
      };
      var reduceHooks = function reduceHooks2(hooks, initial, meta, allowUndefined) {
        if (meta === void 0) {
          meta = {};
        }
        return hooks.reduce(function(prev, next) {
          var nextValue = next(prev, meta);
          {
            if (!allowUndefined && typeof nextValue === "undefined") {
              console.info(next);
              throw new Error("React Table: A reducer hook \u261D\uFE0F just returned undefined! This is not allowed.");
            }
          }
          return nextValue;
        }, initial);
      };
      var loopHooks = function loopHooks2(hooks, context, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return hooks.forEach(function(hook) {
          var nextValue = hook(context, meta);
          {
            if (typeof nextValue !== "undefined") {
              console.info(hook, nextValue);
              throw new Error("React Table: A loop-type hook \u261D\uFE0F just returned a value! This is not allowed.");
            }
          }
        });
      };
      function ensurePluginOrder(plugins, befores, pluginName2, afters) {
        if (afters) {
          throw new Error('Defining plugins in the "after" section of ensurePluginOrder is no longer supported (see plugin ' + pluginName2 + ")");
        }
        var pluginIndex = plugins.findIndex(function(plugin) {
          return plugin.pluginName === pluginName2;
        });
        if (pluginIndex === -1) {
          {
            throw new Error('The plugin "' + pluginName2 + `" was not found in the plugin list!
This usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:

  ` + pluginName2 + ".pluginName = '" + pluginName2 + "'\n");
          }
        }
        befores.forEach(function(before) {
          var beforeIndex = plugins.findIndex(function(plugin) {
            return plugin.pluginName === before;
          });
          if (beforeIndex > -1 && beforeIndex > pluginIndex) {
            {
              throw new Error("React Table: The " + pluginName2 + " plugin hook must be placed after the " + before + " plugin hook!");
            }
          }
        });
      }
      function functionalUpdate(updater, old) {
        return typeof updater === "function" ? updater(old) : updater;
      }
      function useGetLatest(obj) {
        var ref = React2.useRef();
        ref.current = obj;
        return React2.useCallback(function() {
          return ref.current;
        }, []);
      }
      var safeUseLayoutEffect = typeof document !== "undefined" ? React2.useLayoutEffect : React2.useEffect;
      function useMountedLayoutEffect(fn, deps) {
        var mountedRef = React2.useRef(false);
        safeUseLayoutEffect(function() {
          if (mountedRef.current) {
            fn();
          }
          mountedRef.current = true;
        }, deps);
      }
      function useAsyncDebounce(defaultFn, defaultWait) {
        if (defaultWait === void 0) {
          defaultWait = 0;
        }
        var debounceRef = React2.useRef({});
        var getDefaultFn = useGetLatest(defaultFn);
        var getDefaultWait = useGetLatest(defaultWait);
        return React2.useCallback(
          function() {
            var _ref2 = _asyncToGenerator(
              regeneratorRuntime.mark(function _callee2() {
                var _len2, args, _key2, _args2 = arguments;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                          args[_key2] = _args2[_key2];
                        }
                        if (!debounceRef.current.promise) {
                          debounceRef.current.promise = new Promise(function(resolve, reject) {
                            debounceRef.current.resolve = resolve;
                            debounceRef.current.reject = reject;
                          });
                        }
                        if (debounceRef.current.timeout) {
                          clearTimeout(debounceRef.current.timeout);
                        }
                        debounceRef.current.timeout = setTimeout(
                          _asyncToGenerator(
                            regeneratorRuntime.mark(function _callee() {
                              return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      delete debounceRef.current.timeout;
                                      _context.prev = 1;
                                      _context.t0 = debounceRef.current;
                                      _context.next = 5;
                                      return getDefaultFn().apply(void 0, args);
                                    case 5:
                                      _context.t1 = _context.sent;
                                      _context.t0.resolve.call(_context.t0, _context.t1);
                                      _context.next = 12;
                                      break;
                                    case 9:
                                      _context.prev = 9;
                                      _context.t2 = _context["catch"](1);
                                      debounceRef.current.reject(_context.t2);
                                    case 12:
                                      _context.prev = 12;
                                      delete debounceRef.current.promise;
                                      return _context.finish(12);
                                    case 15:
                                    case "end":
                                      return _context.stop();
                                  }
                                }
                              }, _callee, null, [[1, 9, 12, 15]]);
                            })
                          ),
                          getDefaultWait()
                        );
                        return _context2.abrupt("return", debounceRef.current.promise);
                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })
            );
            return function() {
              return _ref2.apply(this, arguments);
            };
          }(),
          [getDefaultFn, getDefaultWait]
        );
      }
      function makeRenderer(instance, column, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return function(type, userProps) {
          if (userProps === void 0) {
            userProps = {};
          }
          var Comp = typeof type === "string" ? column[type] : type;
          if (typeof Comp === "undefined") {
            console.info(column);
            throw new Error(renderErr);
          }
          return flexRender(Comp, _extends({}, instance, {
            column
          }, meta, {}, userProps));
        };
      }
      function flexRender(Comp, props) {
        return isReactComponent(Comp) ? React2.createElement(Comp, props) : Comp;
      }
      function isReactComponent(component) {
        return isClassComponent(component) || typeof component === "function" || isExoticComponent(component);
      }
      function isClassComponent(component) {
        return typeof component === "function" && function() {
          var proto = Object.getPrototypeOf(component);
          return proto.prototype && proto.prototype.isReactComponent;
        }();
      }
      function isExoticComponent(component) {
        return typeof component === "object" && typeof component.$$typeof === "symbol" && ["react.memo", "react.forward_ref"].includes(component.$$typeof.description);
      }
      function linkColumnStructure(columns, parent, depth) {
        if (depth === void 0) {
          depth = 0;
        }
        return columns.map(function(column) {
          column = _extends({}, column, {
            parent,
            depth
          });
          assignColumnAccessor(column);
          if (column.columns) {
            column.columns = linkColumnStructure(column.columns, column, depth + 1);
          }
          return column;
        });
      }
      function flattenColumns(columns) {
        return flattenBy(columns, "columns");
      }
      function assignColumnAccessor(column) {
        var id2 = column.id, accessor = column.accessor, Header = column.Header;
        if (typeof accessor === "string") {
          id2 = id2 || accessor;
          var accessorPath = accessor.split(".");
          accessor = function accessor2(row) {
            return getBy(row, accessorPath);
          };
        }
        if (!id2 && typeof Header === "string" && Header) {
          id2 = Header;
        }
        if (!id2 && column.columns) {
          console.error(column);
          throw new Error('A column ID (or unique "Header" value) is required!');
        }
        if (!id2) {
          console.error(column);
          throw new Error("A column ID (or string accessor) is required!");
        }
        Object.assign(column, {
          id: id2,
          accessor
        });
        return column;
      }
      function decorateColumn(column, userDefaultColumn) {
        if (!userDefaultColumn) {
          throw new Error();
        }
        Object.assign(column, _extends({
          Header: emptyRenderer,
          Footer: emptyRenderer
        }, defaultColumn, {}, userDefaultColumn, {}, column));
        Object.assign(column, {
          originalWidth: column.width
        });
        return column;
      }
      function makeHeaderGroups(allColumns2, defaultColumn2, additionalHeaderProperties) {
        if (additionalHeaderProperties === void 0) {
          additionalHeaderProperties = function additionalHeaderProperties2() {
            return {};
          };
        }
        var headerGroups = [];
        var scanColumns = allColumns2;
        var uid2 = 0;
        var getUID = function getUID2() {
          return uid2++;
        };
        var _loop = function _loop2() {
          var headerGroup = {
            headers: []
          };
          var parentColumns = [];
          var hasParents = scanColumns.some(function(d) {
            return d.parent;
          });
          scanColumns.forEach(function(column) {
            var latestParentColumn = [].concat(parentColumns).reverse()[0];
            var newParent;
            if (hasParents) {
              if (column.parent) {
                newParent = _extends({}, column.parent, {
                  originalId: column.parent.id,
                  id: column.parent.id + "_" + getUID(),
                  headers: [column]
                }, additionalHeaderProperties(column));
              } else {
                var originalId = column.id + "_placeholder";
                newParent = decorateColumn(_extends({
                  originalId,
                  id: column.id + "_placeholder_" + getUID(),
                  placeholderOf: column,
                  headers: [column]
                }, additionalHeaderProperties(column)), defaultColumn2);
              }
              if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {
                latestParentColumn.headers.push(column);
              } else {
                parentColumns.push(newParent);
              }
            }
            headerGroup.headers.push(column);
          });
          headerGroups.push(headerGroup);
          scanColumns = parentColumns;
        };
        while (scanColumns.length) {
          _loop();
        }
        return headerGroups.reverse();
      }
      var pathObjCache = /* @__PURE__ */ new Map();
      function getBy(obj, path, def) {
        if (!path) {
          return obj;
        }
        var cacheKey = typeof path === "function" ? path : JSON.stringify(path);
        var pathObj = pathObjCache.get(cacheKey) || function() {
          var pathObj2 = makePathArray(path);
          pathObjCache.set(cacheKey, pathObj2);
          return pathObj2;
        }();
        var val;
        try {
          val = pathObj.reduce(function(cursor, pathPart) {
            return cursor[pathPart];
          }, obj);
        } catch (e) {
        }
        return typeof val !== "undefined" ? val : def;
      }
      function getFirstDefined() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        for (var i = 0; i < args.length; i += 1) {
          if (typeof args[i] !== "undefined") {
            return args[i];
          }
        }
      }
      function isFunction(a) {
        if (typeof a === "function") {
          return a;
        }
      }
      function flattenBy(arr, key) {
        var flat = [];
        var recurse = function recurse2(arr2) {
          arr2.forEach(function(d) {
            if (!d[key]) {
              flat.push(d);
            } else {
              recurse2(d[key]);
            }
          });
        };
        recurse(arr);
        return flat;
      }
      function expandRows(rows, _ref) {
        var manualExpandedKey = _ref.manualExpandedKey, expanded = _ref.expanded, _ref$expandSubRows = _ref.expandSubRows, expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;
        var expandedRows = [];
        var handleRow = function handleRow2(row, addToExpandedRows) {
          if (addToExpandedRows === void 0) {
            addToExpandedRows = true;
          }
          row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];
          row.canExpand = row.subRows && !!row.subRows.length;
          if (addToExpandedRows) {
            expandedRows.push(row);
          }
          if (row.subRows && row.subRows.length && row.isExpanded) {
            row.subRows.forEach(function(row2) {
              return handleRow2(row2, expandSubRows);
            });
          }
        };
        rows.forEach(function(row) {
          return handleRow(row);
        });
        return expandedRows;
      }
      function getFilterMethod(filter, userFilterTypes, filterTypes2) {
        return isFunction(filter) || userFilterTypes[filter] || filterTypes2[filter] || filterTypes2.text;
      }
      function shouldAutoRemoveFilter(autoRemove, value, column) {
        return autoRemove ? autoRemove(value, column) : typeof value === "undefined";
      }
      function unpreparedAccessWarning() {
        throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.");
      }
      var passiveSupported = null;
      function passiveEventSupported() {
        if (typeof passiveSupported === "boolean")
          return passiveSupported;
        var supported = false;
        try {
          var options = {
            get passive() {
              supported = true;
              return false;
            }
          };
          window.addEventListener("test", null, options);
          window.removeEventListener("test", null, options);
        } catch (err) {
          supported = false;
        }
        passiveSupported = supported;
        return passiveSupported;
      }
      var reOpenBracket = /\[/g;
      var reCloseBracket = /\]/g;
      function makePathArray(obj) {
        return flattenDeep(obj).map(function(d) {
          return String(d).replace(".", "_");
        }).join(".").replace(reOpenBracket, ".").replace(reCloseBracket, "").split(".");
      }
      function flattenDeep(arr, newArr) {
        if (newArr === void 0) {
          newArr = [];
        }
        if (!Array.isArray(arr)) {
          newArr.push(arr);
        } else {
          for (var i = 0; i < arr.length; i += 1) {
            flattenDeep(arr[i], newArr);
          }
        }
        return newArr;
      }
      var defaultGetTableProps = function defaultGetTableProps2(props) {
        return _extends({
          role: "table"
        }, props);
      };
      var defaultGetTableBodyProps = function defaultGetTableBodyProps2(props) {
        return _extends({
          role: "rowgroup"
        }, props);
      };
      var defaultGetHeaderProps = function defaultGetHeaderProps2(props, _ref) {
        var column = _ref.column;
        return _extends({
          key: "header_" + column.id,
          colSpan: column.totalVisibleHeaderCount,
          role: "columnheader"
        }, props);
      };
      var defaultGetFooterProps = function defaultGetFooterProps2(props, _ref2) {
        var column = _ref2.column;
        return _extends({
          key: "footer_" + column.id,
          colSpan: column.totalVisibleHeaderCount
        }, props);
      };
      var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps2(props, _ref3) {
        var index = _ref3.index;
        return _extends({
          key: "headerGroup_" + index,
          role: "row"
        }, props);
      };
      var defaultGetFooterGroupProps = function defaultGetFooterGroupProps2(props, _ref4) {
        var index = _ref4.index;
        return _extends({
          key: "footerGroup_" + index
        }, props);
      };
      var defaultGetRowProps = function defaultGetRowProps2(props, _ref5) {
        var row = _ref5.row;
        return _extends({
          key: "row_" + row.id,
          role: "row"
        }, props);
      };
      var defaultGetCellProps = function defaultGetCellProps2(props, _ref6) {
        var cell = _ref6.cell;
        return _extends({
          key: "cell_" + cell.row.id + "_" + cell.column.id,
          role: "cell"
        }, props);
      };
      function makeDefaultPluginHooks() {
        return {
          useOptions: [],
          stateReducers: [],
          useControlledState: [],
          columns: [],
          columnsDeps: [],
          allColumns: [],
          allColumnsDeps: [],
          accessValue: [],
          materializedColumns: [],
          materializedColumnsDeps: [],
          useInstanceAfterData: [],
          visibleColumns: [],
          visibleColumnsDeps: [],
          headerGroups: [],
          headerGroupsDeps: [],
          useInstanceBeforeDimensions: [],
          useInstance: [],
          prepareRow: [],
          getTableProps: [defaultGetTableProps],
          getTableBodyProps: [defaultGetTableBodyProps],
          getHeaderGroupProps: [defaultGetHeaderGroupProps],
          getFooterGroupProps: [defaultGetFooterGroupProps],
          getHeaderProps: [defaultGetHeaderProps],
          getFooterProps: [defaultGetFooterProps],
          getRowProps: [defaultGetRowProps],
          getCellProps: [defaultGetCellProps],
          useFinalInstance: []
        };
      }
      actions.resetHiddenColumns = "resetHiddenColumns";
      actions.toggleHideColumn = "toggleHideColumn";
      actions.setHiddenColumns = "setHiddenColumns";
      actions.toggleHideAllColumns = "toggleHideAllColumns";
      var useColumnVisibility = function useColumnVisibility2(hooks) {
        hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];
        hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];
        hooks.stateReducers.push(reducer);
        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);
        hooks.headerGroupsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.hiddenColumns]);
        });
        hooks.useInstance.push(useInstance);
      };
      useColumnVisibility.pluginName = "useColumnVisibility";
      var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps2(props, _ref2) {
        var column = _ref2.column;
        return [props, {
          onChange: function onChange(e) {
            column.toggleHidden(!e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: column.isVisible,
          title: "Toggle Column Visible"
        }];
      };
      var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps2(props, _ref3) {
        var instance = _ref3.instance;
        return [props, {
          onChange: function onChange(e) {
            instance.toggleHideAllColumns(!e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,
          title: "Toggle All Columns Hidden",
          indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length
        }];
      };
      function reducer(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            hiddenColumns: []
          }, state);
        }
        if (action.type === actions.resetHiddenColumns) {
          return _extends({}, state, {
            hiddenColumns: instance.initialState.hiddenColumns || []
          });
        }
        if (action.type === actions.toggleHideColumn) {
          var should = typeof action.value !== "undefined" ? action.value : !state.hiddenColumns.includes(action.columnId);
          var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function(d) {
            return d !== action.columnId;
          });
          return _extends({}, state, {
            hiddenColumns
          });
        }
        if (action.type === actions.setHiddenColumns) {
          return _extends({}, state, {
            hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)
          });
        }
        if (action.type === actions.toggleHideAllColumns) {
          var shouldAll = typeof action.value !== "undefined" ? action.value : !state.hiddenColumns.length;
          return _extends({}, state, {
            hiddenColumns: shouldAll ? instance.allColumns.map(function(d) {
              return d.id;
            }) : []
          });
        }
      }
      function useInstanceBeforeDimensions(instance) {
        var headers = instance.headers, hiddenColumns = instance.state.hiddenColumns;
        var isMountedRef = React2.useRef(false);
        if (!isMountedRef.current)
          ;
        var handleColumn = function handleColumn2(column, parentVisible) {
          column.isVisible = parentVisible && !hiddenColumns.includes(column.id);
          var totalVisibleHeaderCount2 = 0;
          if (column.headers && column.headers.length) {
            column.headers.forEach(function(subColumn) {
              return totalVisibleHeaderCount2 += handleColumn2(subColumn, column.isVisible);
            });
          } else {
            totalVisibleHeaderCount2 = column.isVisible ? 1 : 0;
          }
          column.totalVisibleHeaderCount = totalVisibleHeaderCount2;
          return totalVisibleHeaderCount2;
        };
        var totalVisibleHeaderCount = 0;
        headers.forEach(function(subHeader) {
          return totalVisibleHeaderCount += handleColumn(subHeader, true);
        });
      }
      function useInstance(instance) {
        var columns = instance.columns, flatHeaders = instance.flatHeaders, dispatch = instance.dispatch, allColumns2 = instance.allColumns, getHooks = instance.getHooks, hiddenColumns = instance.state.hiddenColumns, _instance$autoResetHi = instance.autoResetHiddenColumns, autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;
        var getInstance = useGetLatest(instance);
        var allColumnsHidden = allColumns2.length === hiddenColumns.length;
        var toggleHideColumn = React2.useCallback(function(columnId, value) {
          return dispatch({
            type: actions.toggleHideColumn,
            columnId,
            value
          });
        }, [dispatch]);
        var setHiddenColumns = React2.useCallback(function(value) {
          return dispatch({
            type: actions.setHiddenColumns,
            value
          });
        }, [dispatch]);
        var toggleHideAllColumns = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleHideAllColumns,
            value
          });
        }, [dispatch]);
        var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {
          instance: getInstance()
        });
        flatHeaders.forEach(function(column) {
          column.toggleHidden = function(value) {
            dispatch({
              type: actions.toggleHideColumn,
              columnId: column.id,
              value
            });
          };
          column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {
            instance: getInstance(),
            column
          });
        });
        var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);
        useMountedLayoutEffect(function() {
          if (getAutoResetHiddenColumns()) {
            dispatch({
              type: actions.resetHiddenColumns
            });
          }
        }, [dispatch, columns]);
        Object.assign(instance, {
          allColumnsHidden,
          toggleHideColumn,
          setHiddenColumns,
          toggleHideAllColumns,
          getToggleHideAllColumnsProps
        });
      }
      var defaultInitialState = {};
      var defaultColumnInstance = {};
      var defaultReducer = function defaultReducer2(state, action, prevState) {
        return state;
      };
      var defaultGetSubRows = function defaultGetSubRows2(row, index) {
        return row.subRows || [];
      };
      var defaultGetRowId = function defaultGetRowId2(row, index, parent) {
        return "" + (parent ? [parent.id, index].join(".") : index);
      };
      var defaultUseControlledState = function defaultUseControlledState2(d) {
        return d;
      };
      function applyDefaults(props) {
        var _props$initialState = props.initialState, initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState, _props$defaultColumn = props.defaultColumn, defaultColumn2 = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn, _props$getSubRows = props.getSubRows, getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows, _props$getRowId = props.getRowId, getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId, _props$stateReducer = props.stateReducer, stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer, _props$useControlledS = props.useControlledState, useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS, rest = _objectWithoutPropertiesLoose(props, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]);
        return _extends({}, rest, {
          initialState,
          defaultColumn: defaultColumn2,
          getSubRows,
          getRowId,
          stateReducer,
          useControlledState
        });
      }
      var useTable2 = function useTable3(props) {
        for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          plugins[_key - 1] = arguments[_key];
        }
        props = applyDefaults(props);
        plugins = [useColumnVisibility].concat(plugins);
        var instanceRef = React2.useRef({});
        var getInstance = useGetLatest(instanceRef.current);
        Object.assign(getInstance(), _extends({}, props, {
          plugins,
          hooks: makeDefaultPluginHooks()
        }));
        plugins.filter(Boolean).forEach(function(plugin) {
          plugin(getInstance().hooks);
        });
        var getHooks = useGetLatest(getInstance().hooks);
        getInstance().getHooks = getHooks;
        delete getInstance().hooks;
        Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));
        var _getInstance = getInstance(), data2 = _getInstance.data, userColumns = _getInstance.columns, initialState = _getInstance.initialState, defaultColumn2 = _getInstance.defaultColumn, getSubRows = _getInstance.getSubRows, getRowId = _getInstance.getRowId, stateReducer = _getInstance.stateReducer, useControlledState = _getInstance.useControlledState;
        var getStateReducer = useGetLatest(stateReducer);
        var reducer2 = React2.useCallback(function(state2, action) {
          if (!action.type) {
            console.info({
              action
            });
            throw new Error("Unknown Action \u{1F446}");
          }
          return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function(s, handler) {
            return handler(s, action, state2, getInstance()) || s;
          }, state2);
        }, [getHooks, getStateReducer, getInstance]);
        var _React$useReducer = React2.useReducer(reducer2, void 0, function() {
          return reducer2(initialState, {
            type: actions.init
          });
        }), reducerState = _React$useReducer[0], dispatch = _React$useReducer[1];
        var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {
          instance: getInstance()
        });
        Object.assign(getInstance(), {
          state,
          dispatch
        });
        var columns = React2.useMemo(function() {
          return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {
            instance: getInstance()
          }));
        }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {
          instance: getInstance()
        })));
        getInstance().columns = columns;
        var allColumns2 = React2.useMemo(function() {
          return reduceHooks(getHooks().allColumns, flattenColumns(columns), {
            instance: getInstance()
          }).map(assignColumnAccessor);
        }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {
          instance: getInstance()
        })));
        getInstance().allColumns = allColumns2;
        var _React$useMemo = React2.useMemo(function() {
          var rows2 = [];
          var flatRows2 = [];
          var rowsById2 = {};
          var allColumnsQueue = [].concat(allColumns2);
          while (allColumnsQueue.length) {
            var column = allColumnsQueue.shift();
            accessRowsForColumn({
              data: data2,
              rows: rows2,
              flatRows: flatRows2,
              rowsById: rowsById2,
              column,
              getRowId,
              getSubRows,
              accessValueHooks: getHooks().accessValue,
              getInstance
            });
          }
          return [rows2, flatRows2, rowsById2];
        }, [allColumns2, data2, getRowId, getSubRows, getHooks, getInstance]), rows = _React$useMemo[0], flatRows = _React$useMemo[1], rowsById = _React$useMemo[2];
        Object.assign(getInstance(), {
          rows,
          initialRows: [].concat(rows),
          flatRows,
          rowsById
        });
        loopHooks(getHooks().useInstanceAfterData, getInstance());
        var visibleColumns2 = React2.useMemo(function() {
          return reduceHooks(getHooks().visibleColumns, allColumns2, {
            instance: getInstance()
          }).map(function(d) {
            return decorateColumn(d, defaultColumn2);
          });
        }, [getHooks, allColumns2, getInstance, defaultColumn2].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {
          instance: getInstance()
        })));
        allColumns2 = React2.useMemo(function() {
          var columns2 = [].concat(visibleColumns2);
          allColumns2.forEach(function(column) {
            if (!columns2.find(function(d) {
              return d.id === column.id;
            })) {
              columns2.push(column);
            }
          });
          return columns2;
        }, [allColumns2, visibleColumns2]);
        getInstance().allColumns = allColumns2;
        {
          var duplicateColumns = allColumns2.filter(function(column, i) {
            return allColumns2.findIndex(function(d) {
              return d.id === column.id;
            }) !== i;
          });
          if (duplicateColumns.length) {
            console.info(allColumns2);
            throw new Error('Duplicate columns were found with ids: "' + duplicateColumns.map(function(d) {
              return d.id;
            }).join(", ") + '" in the columns array above');
          }
        }
        var headerGroups = React2.useMemo(function() {
          return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns2, defaultColumn2), getInstance());
        }, [getHooks, visibleColumns2, defaultColumn2, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {
          instance: getInstance()
        })));
        getInstance().headerGroups = headerGroups;
        var headers = React2.useMemo(function() {
          return headerGroups.length ? headerGroups[0].headers : [];
        }, [headerGroups]);
        getInstance().headers = headers;
        getInstance().flatHeaders = headerGroups.reduce(function(all, headerGroup) {
          return [].concat(all, headerGroup.headers);
        }, []);
        loopHooks(getHooks().useInstanceBeforeDimensions, getInstance());
        var visibleColumnsDep = visibleColumns2.filter(function(d) {
          return d.isVisible;
        }).map(function(d) {
          return d.id;
        }).sort().join("_");
        visibleColumns2 = React2.useMemo(
          function() {
            return visibleColumns2.filter(function(d) {
              return d.isVisible;
            });
          },
          [visibleColumns2, visibleColumnsDep]
        );
        getInstance().visibleColumns = visibleColumns2;
        var _calculateHeaderWidth = calculateHeaderWidths(headers), totalColumnsMinWidth = _calculateHeaderWidth[0], totalColumnsWidth = _calculateHeaderWidth[1], totalColumnsMaxWidth = _calculateHeaderWidth[2];
        getInstance().totalColumnsMinWidth = totalColumnsMinWidth;
        getInstance().totalColumnsWidth = totalColumnsWidth;
        getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;
        loopHooks(getHooks().useInstance, getInstance());
        [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function(column) {
          column.render = makeRenderer(getInstance(), column);
          column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {
            instance: getInstance(),
            column
          });
          column.getFooterProps = makePropGetter(getHooks().getFooterProps, {
            instance: getInstance(),
            column
          });
        });
        getInstance().headerGroups = React2.useMemo(function() {
          return headerGroups.filter(function(headerGroup, i) {
            headerGroup.headers = headerGroup.headers.filter(function(column) {
              var recurse = function recurse2(headers2) {
                return headers2.filter(function(column2) {
                  if (column2.headers) {
                    return recurse2(column2.headers);
                  }
                  return column2.isVisible;
                }).length;
              };
              if (column.headers) {
                return recurse(column.headers);
              }
              return column.isVisible;
            });
            if (headerGroup.headers.length) {
              headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {
                instance: getInstance(),
                headerGroup,
                index: i
              });
              headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {
                instance: getInstance(),
                headerGroup,
                index: i
              });
              return true;
            }
            return false;
          });
        }, [headerGroups, getInstance, getHooks]);
        getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse();
        getInstance().prepareRow = React2.useCallback(function(row) {
          row.getRowProps = makePropGetter(getHooks().getRowProps, {
            instance: getInstance(),
            row
          });
          row.allCells = allColumns2.map(function(column) {
            var value = row.values[column.id];
            var cell = {
              column,
              row,
              value
            };
            cell.getCellProps = makePropGetter(getHooks().getCellProps, {
              instance: getInstance(),
              cell
            });
            cell.render = makeRenderer(getInstance(), column, {
              row,
              cell,
              value
            });
            return cell;
          });
          row.cells = visibleColumns2.map(function(column) {
            return row.allCells.find(function(cell) {
              return cell.column.id === column.id;
            });
          });
          loopHooks(getHooks().prepareRow, row, {
            instance: getInstance()
          });
        }, [getHooks, getInstance, allColumns2, visibleColumns2]);
        getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {
          instance: getInstance()
        });
        getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {
          instance: getInstance()
        });
        loopHooks(getHooks().useFinalInstance, getInstance());
        return getInstance();
      };
      function calculateHeaderWidths(headers, left) {
        if (left === void 0) {
          left = 0;
        }
        var sumTotalMinWidth = 0;
        var sumTotalWidth = 0;
        var sumTotalMaxWidth = 0;
        var sumTotalFlexWidth = 0;
        headers.forEach(function(header) {
          var subHeaders = header.headers;
          header.totalLeft = left;
          if (subHeaders && subHeaders.length) {
            var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left), totalMinWidth = _calculateHeaderWidth2[0], totalWidth = _calculateHeaderWidth2[1], totalMaxWidth = _calculateHeaderWidth2[2], totalFlexWidth = _calculateHeaderWidth2[3];
            header.totalMinWidth = totalMinWidth;
            header.totalWidth = totalWidth;
            header.totalMaxWidth = totalMaxWidth;
            header.totalFlexWidth = totalFlexWidth;
          } else {
            header.totalMinWidth = header.minWidth;
            header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);
            header.totalMaxWidth = header.maxWidth;
            header.totalFlexWidth = header.canResize ? header.totalWidth : 0;
          }
          if (header.isVisible) {
            left += header.totalWidth;
            sumTotalMinWidth += header.totalMinWidth;
            sumTotalWidth += header.totalWidth;
            sumTotalMaxWidth += header.totalMaxWidth;
            sumTotalFlexWidth += header.totalFlexWidth;
          }
        });
        return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];
      }
      function accessRowsForColumn(_ref) {
        var data2 = _ref.data, rows = _ref.rows, flatRows = _ref.flatRows, rowsById = _ref.rowsById, column = _ref.column, getRowId = _ref.getRowId, getSubRows = _ref.getSubRows, accessValueHooks = _ref.accessValueHooks, getInstance = _ref.getInstance;
        var accessRow = function accessRow2(originalRow, rowIndex, depth, parent, parentRows) {
          if (depth === void 0) {
            depth = 0;
          }
          var original = originalRow;
          var id2 = getRowId(originalRow, rowIndex, parent);
          var row = rowsById[id2];
          if (!row) {
            row = {
              id: id2,
              original,
              index: rowIndex,
              depth,
              cells: [{}]
            };
            row.cells.map = unpreparedAccessWarning;
            row.cells.filter = unpreparedAccessWarning;
            row.cells.forEach = unpreparedAccessWarning;
            row.cells[0].getCellProps = unpreparedAccessWarning;
            row.values = {};
            parentRows.push(row);
            flatRows.push(row);
            rowsById[id2] = row;
            row.originalSubRows = getSubRows(originalRow, rowIndex);
            if (row.originalSubRows) {
              var subRows = [];
              row.originalSubRows.forEach(function(d, i) {
                return accessRow2(d, i, depth + 1, row, subRows);
              });
              row.subRows = subRows;
            }
          } else if (row.subRows) {
            row.originalSubRows.forEach(function(d, i) {
              return accessRow2(d, i, depth + 1, row);
            });
          }
          if (column.accessor) {
            row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data2);
          }
          row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {
            row,
            column,
            instance: getInstance()
          }, true);
        };
        data2.forEach(function(originalRow, rowIndex) {
          return accessRow(originalRow, rowIndex, 0, void 0, rows);
        });
      }
      actions.resetExpanded = "resetExpanded";
      actions.toggleRowExpanded = "toggleRowExpanded";
      actions.toggleAllRowsExpanded = "toggleAllRowsExpanded";
      var useExpanded = function useExpanded2(hooks) {
        hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];
        hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];
        hooks.stateReducers.push(reducer$1);
        hooks.useInstance.push(useInstance$1);
        hooks.prepareRow.push(prepareRow);
      };
      useExpanded.pluginName = "useExpanded";
      var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          onClick: function onClick(e) {
            instance.toggleAllRowsExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle All Rows Expanded"
        }];
      };
      var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps2(props, _ref2) {
        var row = _ref2.row;
        return [props, {
          onClick: function onClick() {
            row.toggleRowExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle Row Expanded"
        }];
      };
      function reducer$1(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            expanded: {}
          }, state);
        }
        if (action.type === actions.resetExpanded) {
          return _extends({}, state, {
            expanded: instance.initialState.expanded || {}
          });
        }
        if (action.type === actions.toggleAllRowsExpanded) {
          var value = action.value;
          var rowsById = instance.rowsById;
          var isAllRowsExpanded = Object.keys(rowsById).length === Object.keys(state.expanded).length;
          var expandAll = typeof value !== "undefined" ? value : !isAllRowsExpanded;
          if (expandAll) {
            var expanded = {};
            Object.keys(rowsById).forEach(function(rowId) {
              expanded[rowId] = true;
            });
            return _extends({}, state, {
              expanded
            });
          }
          return _extends({}, state, {
            expanded: {}
          });
        }
        if (action.type === actions.toggleRowExpanded) {
          var id2 = action.id, setExpanded = action.value;
          var exists = state.expanded[id2];
          var shouldExist = typeof setExpanded !== "undefined" ? setExpanded : !exists;
          if (!exists && shouldExist) {
            var _extends2;
            return _extends({}, state, {
              expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id2] = true, _extends2))
            });
          } else if (exists && !shouldExist) {
            var _state$expanded = state.expanded, _2 = _state$expanded[id2], rest = _objectWithoutPropertiesLoose(_state$expanded, [id2].map(_toPropertyKey));
            return _extends({}, state, {
              expanded: rest
            });
          } else {
            return state;
          }
        }
      }
      function useInstance$1(instance) {
        var data2 = instance.data, rows = instance.rows, rowsById = instance.rowsById, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? "expanded" : _instance$manualExpan, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$autoResetEx = instance.autoResetExpanded, autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx, getHooks = instance.getHooks, plugins = instance.plugins, expanded = instance.state.expanded, dispatch = instance.dispatch;
        ensurePluginOrder(plugins, ["useSortBy", "useGroupBy", "usePivotColumns", "useGlobalFilter"], "useExpanded");
        var getAutoResetExpanded = useGetLatest(autoResetExpanded);
        var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);
        if (isAllRowsExpanded) {
          if (Object.keys(rowsById).some(function(id2) {
            return !expanded[id2];
          })) {
            isAllRowsExpanded = false;
          }
        }
        useMountedLayoutEffect(function() {
          if (getAutoResetExpanded()) {
            dispatch({
              type: actions.resetExpanded
            });
          }
        }, [dispatch, data2]);
        var toggleRowExpanded = React2.useCallback(function(id2, value) {
          dispatch({
            type: actions.toggleRowExpanded,
            id: id2,
            value
          });
        }, [dispatch]);
        var toggleAllRowsExpanded = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllRowsExpanded,
            value
          });
        }, [dispatch]);
        var expandedRows = React2.useMemo(function() {
          if (paginateExpandedRows) {
            return expandRows(rows, {
              manualExpandedKey,
              expanded,
              expandSubRows
            });
          }
          return rows;
        }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);
        var expandedDepth = React2.useMemo(function() {
          return findExpandedDepth(expanded);
        }, [expanded]);
        var getInstance = useGetLatest(instance);
        var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {
          instance: getInstance()
        });
        Object.assign(instance, {
          preExpandedRows: rows,
          expandedRows,
          rows: expandedRows,
          expandedDepth,
          isAllRowsExpanded,
          toggleRowExpanded,
          toggleAllRowsExpanded,
          getToggleAllRowsExpandedProps
        });
      }
      function prepareRow(row, _ref3) {
        var getHooks = _ref3.instance.getHooks, instance = _ref3.instance;
        row.toggleRowExpanded = function(set2) {
          return instance.toggleRowExpanded(row.id, set2);
        };
        row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {
          instance,
          row
        });
      }
      function findExpandedDepth(expanded) {
        var maxDepth = 0;
        Object.keys(expanded).forEach(function(id2) {
          var splitId = id2.split(".");
          maxDepth = Math.max(maxDepth, splitId.length);
        });
        return maxDepth;
      }
      var text = function text2(rows, ids, filterValue) {
        rows = rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());
          });
        });
        return rows;
      };
      text.autoRemove = function(val) {
        return !val;
      };
      var exactText = function exactText2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue !== void 0 ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;
          });
        });
      };
      exactText.autoRemove = function(val) {
        return !val;
      };
      var exactTextCase = function exactTextCase2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue !== void 0 ? String(rowValue) === String(filterValue) : true;
          });
        });
      };
      exactTextCase.autoRemove = function(val) {
        return !val;
      };
      var includes3 = function includes4(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue.includes(filterValue);
          });
        });
      };
      includes3.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesAll = function includesAll2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue && rowValue.length && filterValue.every(function(val) {
              return rowValue.includes(val);
            });
          });
        });
      };
      includesAll.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesSome = function includesSome2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue && rowValue.length && filterValue.some(function(val) {
              return rowValue.includes(val);
            });
          });
        });
      };
      includesSome.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesValue = function includesValue2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return filterValue.includes(rowValue);
          });
        });
      };
      includesValue.autoRemove = function(val) {
        return !val || !val.length;
      };
      var exact = function exact2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue === filterValue;
          });
        });
      };
      exact.autoRemove = function(val) {
        return typeof val === "undefined";
      };
      var equals = function equals2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue == filterValue;
          });
        });
      };
      equals.autoRemove = function(val) {
        return val == null;
      };
      var between = function between2(rows, ids, filterValue) {
        var _ref = filterValue || [], min3 = _ref[0], max3 = _ref[1];
        min3 = typeof min3 === "number" ? min3 : -Infinity;
        max3 = typeof max3 === "number" ? max3 : Infinity;
        if (min3 > max3) {
          var temp = min3;
          min3 = max3;
          max3 = temp;
        }
        return rows.filter(function(row) {
          return ids.some(function(id2) {
            var rowValue = row.values[id2];
            return rowValue >= min3 && rowValue <= max3;
          });
        });
      };
      between.autoRemove = function(val) {
        return !val || typeof val[0] !== "number" && typeof val[1] !== "number";
      };
      var filterTypes = Object.freeze({
        __proto__: null,
        text,
        exactText,
        exactTextCase,
        includes: includes3,
        includesAll,
        includesSome,
        includesValue,
        exact,
        equals,
        between
      });
      actions.resetFilters = "resetFilters";
      actions.setFilter = "setFilter";
      actions.setAllFilters = "setAllFilters";
      var useFilters = function useFilters2(hooks) {
        hooks.stateReducers.push(reducer$2);
        hooks.useInstance.push(useInstance$2);
      };
      useFilters.pluginName = "useFilters";
      function reducer$2(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            filters: []
          }, state);
        }
        if (action.type === actions.resetFilters) {
          return _extends({}, state, {
            filters: instance.initialState.filters || []
          });
        }
        if (action.type === actions.setFilter) {
          var columnId = action.columnId, filterValue = action.filterValue;
          var allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes;
          var column = allColumns2.find(function(d) {
            return d.id === columnId;
          });
          if (!column) {
            throw new Error("React-Table: Could not find a column with id: " + columnId);
          }
          var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
          var previousfilter = state.filters.find(function(d) {
            return d.id === columnId;
          });
          var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value);
          if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {
            return _extends({}, state, {
              filters: state.filters.filter(function(d) {
                return d.id !== columnId;
              })
            });
          }
          if (previousfilter) {
            return _extends({}, state, {
              filters: state.filters.map(function(d) {
                if (d.id === columnId) {
                  return {
                    id: columnId,
                    value: newFilter
                  };
                }
                return d;
              })
            });
          }
          return _extends({}, state, {
            filters: [].concat(state.filters, [{
              id: columnId,
              value: newFilter
            }])
          });
        }
        if (action.type === actions.setAllFilters) {
          var filters = action.filters;
          var _allColumns = instance.allColumns, _userFilterTypes = instance.filterTypes;
          return _extends({}, state, {
            filters: functionalUpdate(filters, state.filters).filter(function(filter) {
              var column2 = _allColumns.find(function(d) {
                return d.id === filter.id;
              });
              var filterMethod2 = getFilterMethod(column2.filter, _userFilterTypes || {}, filterTypes);
              if (shouldAutoRemoveFilter(filterMethod2.autoRemove, filter.value, column2)) {
                return false;
              }
              return true;
            })
          });
        }
      }
      function useInstance$2(instance) {
        var data2 = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes, manualFilters = instance.manualFilters, _instance$defaultCanF = instance.defaultCanFilter, defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF, disableFilters = instance.disableFilters, filters = instance.state.filters, dispatch = instance.dispatch, _instance$autoResetFi = instance.autoResetFilters, autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;
        var setFilter = React2.useCallback(function(columnId, filterValue) {
          dispatch({
            type: actions.setFilter,
            columnId,
            filterValue
          });
        }, [dispatch]);
        var setAllFilters = React2.useCallback(function(filters2) {
          dispatch({
            type: actions.setAllFilters,
            filters: filters2
          });
        }, [dispatch]);
        allColumns2.forEach(function(column) {
          var id2 = column.id, accessor = column.accessor, columnDefaultCanFilter = column.defaultCanFilter, columnDisableFilters = column.disableFilters;
          column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : void 0, disableFilters === true ? false : void 0, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false);
          column.setFilter = function(val) {
            return setFilter(column.id, val);
          };
          var found = filters.find(function(d) {
            return d.id === id2;
          });
          column.filterValue = found && found.value;
        });
        var _React$useMemo = React2.useMemo(function() {
          if (manualFilters || !filters.length) {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows2 = [];
          var filteredRowsById2 = {};
          var filterRows = function filterRows2(rows2, depth) {
            if (depth === void 0) {
              depth = 0;
            }
            var filteredRows2 = rows2;
            filteredRows2 = filters.reduce(function(filteredSoFar, _ref) {
              var columnId = _ref.id, filterValue = _ref.value;
              var column = allColumns2.find(function(d) {
                return d.id === columnId;
              });
              if (!column) {
                return filteredSoFar;
              }
              if (depth === 0) {
                column.preFilteredRows = filteredSoFar;
              }
              var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
              if (!filterMethod) {
                console.warn("Could not find a valid 'column.filter' for column with the ID: " + column.id + ".");
                return filteredSoFar;
              }
              column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);
              return column.filteredRows;
            }, rows2);
            filteredRows2.forEach(function(row) {
              filteredFlatRows2.push(row);
              filteredRowsById2[row.id] = row;
              if (!row.subRows) {
                return;
              }
              row.subRows = row.subRows && row.subRows.length > 0 ? filterRows2(row.subRows, depth + 1) : row.subRows;
            });
            return filteredRows2;
          };
          return [filterRows(rows), filteredFlatRows2, filteredRowsById2];
        }, [manualFilters, filters, rows, flatRows, rowsById, allColumns2, userFilterTypes]), filteredRows = _React$useMemo[0], filteredFlatRows = _React$useMemo[1], filteredRowsById = _React$useMemo[2];
        React2.useMemo(function() {
          var nonFilteredColumns = allColumns2.filter(function(column) {
            return !filters.find(function(d) {
              return d.id === column.id;
            });
          });
          nonFilteredColumns.forEach(function(column) {
            column.preFilteredRows = filteredRows;
            column.filteredRows = filteredRows;
          });
        }, [filteredRows, filters, allColumns2]);
        var getAutoResetFilters = useGetLatest(autoResetFilters);
        useMountedLayoutEffect(function() {
          if (getAutoResetFilters()) {
            dispatch({
              type: actions.resetFilters
            });
          }
        }, [dispatch, manualFilters ? null : data2]);
        Object.assign(instance, {
          preFilteredRows: rows,
          preFilteredFlatRows: flatRows,
          preFilteredRowsById: rowsById,
          filteredRows,
          filteredFlatRows,
          filteredRowsById,
          rows: filteredRows,
          flatRows: filteredFlatRows,
          rowsById: filteredRowsById,
          setFilter,
          setAllFilters
        });
      }
      actions.resetGlobalFilter = "resetGlobalFilter";
      actions.setGlobalFilter = "setGlobalFilter";
      var useGlobalFilter = function useGlobalFilter2(hooks) {
        hooks.stateReducers.push(reducer$3);
        hooks.useInstance.push(useInstance$3);
      };
      useGlobalFilter.pluginName = "useGlobalFilter";
      function reducer$3(state, action, previousState, instance) {
        if (action.type === actions.resetGlobalFilter) {
          return _extends({}, state, {
            globalFilter: instance.initialState.globalFilter || void 0
          });
        }
        if (action.type === actions.setGlobalFilter) {
          var filterValue = action.filterValue;
          var userFilterTypes = instance.userFilterTypes;
          var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);
          var newFilter = functionalUpdate(filterValue, state.globalFilter);
          if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {
            var globalFilter = state.globalFilter, stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, ["globalFilter"]);
            return stateWithoutGlobalFilter;
          }
          return _extends({}, state, {
            globalFilter: newFilter
          });
        }
      }
      function useInstance$3(instance) {
        var data2 = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes, globalFilter = instance.globalFilter, manualGlobalFilter = instance.manualGlobalFilter, globalFilterValue = instance.state.globalFilter, dispatch = instance.dispatch, _instance$autoResetGl = instance.autoResetGlobalFilter, autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl, disableGlobalFilter = instance.disableGlobalFilter;
        var setGlobalFilter = React2.useCallback(function(filterValue) {
          dispatch({
            type: actions.setGlobalFilter,
            filterValue
          });
        }, [dispatch]);
        var _React$useMemo = React2.useMemo(function() {
          if (manualGlobalFilter || typeof globalFilterValue === "undefined") {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows = [];
          var filteredRowsById = {};
          var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);
          if (!filterMethod) {
            console.warn("Could not find a valid 'globalFilter' option.");
            return rows;
          }
          allColumns2.forEach(function(column) {
            var columnDisableGlobalFilter = column.disableGlobalFilter;
            column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : void 0, disableGlobalFilter === true ? false : void 0, true);
          });
          var filterableColumns = allColumns2.filter(function(c) {
            return c.canFilter === true;
          });
          var filterRows = function filterRows2(filteredRows) {
            filteredRows = filterMethod(filteredRows, filterableColumns.map(function(d) {
              return d.id;
            }), globalFilterValue);
            filteredRows.forEach(function(row) {
              filteredFlatRows.push(row);
              filteredRowsById[row.id] = row;
              row.subRows = row.subRows && row.subRows.length ? filterRows2(row.subRows) : row.subRows;
            });
            return filteredRows;
          };
          return [filterRows(rows), filteredFlatRows, filteredRowsById];
        }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns2, rows, flatRows, rowsById, disableGlobalFilter]), globalFilteredRows = _React$useMemo[0], globalFilteredFlatRows = _React$useMemo[1], globalFilteredRowsById = _React$useMemo[2];
        var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);
        useMountedLayoutEffect(function() {
          if (getAutoResetGlobalFilter()) {
            dispatch({
              type: actions.resetGlobalFilter
            });
          }
        }, [dispatch, manualGlobalFilter ? null : data2]);
        Object.assign(instance, {
          preGlobalFilteredRows: rows,
          preGlobalFilteredFlatRows: flatRows,
          preGlobalFilteredRowsById: rowsById,
          globalFilteredRows,
          globalFilteredFlatRows,
          globalFilteredRowsById,
          rows: globalFilteredRows,
          flatRows: globalFilteredFlatRows,
          rowsById: globalFilteredRowsById,
          setGlobalFilter,
          disableGlobalFilter
        });
      }
      function sum(values2, aggregatedValues) {
        return aggregatedValues.reduce(function(sum2, next) {
          return sum2 + (typeof next === "number" ? next : 0);
        }, 0);
      }
      function min2(values2) {
        var min3 = values2[0] || 0;
        values2.forEach(function(value) {
          if (typeof value === "number") {
            min3 = Math.min(min3, value);
          }
        });
        return min3;
      }
      function max2(values2) {
        var max3 = values2[0] || 0;
        values2.forEach(function(value) {
          if (typeof value === "number") {
            max3 = Math.max(max3, value);
          }
        });
        return max3;
      }
      function minMax(values2) {
        var min3 = values2[0] || 0;
        var max3 = values2[0] || 0;
        values2.forEach(function(value) {
          if (typeof value === "number") {
            min3 = Math.min(min3, value);
            max3 = Math.max(max3, value);
          }
        });
        return min3 + ".." + max3;
      }
      function average(values2) {
        return sum(null, values2) / values2.length;
      }
      function median(values2) {
        if (!values2.length) {
          return null;
        }
        var mid = Math.floor(values2.length / 2);
        var nums = [].concat(values2).sort(function(a, b) {
          return a - b;
        });
        return values2.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
      }
      function unique(values2) {
        return Array.from(new Set(values2).values());
      }
      function uniqueCount(values2) {
        return new Set(values2).size;
      }
      function count(values2) {
        return values2.length;
      }
      var aggregations = Object.freeze({
        __proto__: null,
        sum,
        min: min2,
        max: max2,
        minMax,
        average,
        median,
        unique,
        uniqueCount,
        count
      });
      var emptyArray = [];
      var emptyObject = {};
      actions.resetGroupBy = "resetGroupBy";
      actions.setGroupBy = "setGroupBy";
      actions.toggleGroupBy = "toggleGroupBy";
      var useGroupBy = function useGroupBy2(hooks) {
        hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];
        hooks.stateReducers.push(reducer$4);
        hooks.visibleColumnsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.groupBy]);
        });
        hooks.visibleColumns.push(visibleColumns);
        hooks.useInstance.push(useInstance$4);
        hooks.prepareRow.push(prepareRow$1);
      };
      useGroupBy.pluginName = "useGroupBy";
      var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps2(props, _ref2) {
        var header = _ref2.header;
        return [props, {
          onClick: header.canGroupBy ? function(e) {
            e.persist();
            header.toggleGroupBy();
          } : void 0,
          style: {
            cursor: header.canGroupBy ? "pointer" : void 0
          },
          title: "Toggle GroupBy"
        }];
      };
      function reducer$4(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            groupBy: []
          }, state);
        }
        if (action.type === actions.resetGroupBy) {
          return _extends({}, state, {
            groupBy: instance.initialState.groupBy || []
          });
        }
        if (action.type === actions.setGroupBy) {
          var value = action.value;
          return _extends({}, state, {
            groupBy: value
          });
        }
        if (action.type === actions.toggleGroupBy) {
          var columnId = action.columnId, setGroupBy = action.value;
          var resolvedGroupBy = typeof setGroupBy !== "undefined" ? setGroupBy : !state.groupBy.includes(columnId);
          if (resolvedGroupBy) {
            return _extends({}, state, {
              groupBy: [].concat(state.groupBy, [columnId])
            });
          }
          return _extends({}, state, {
            groupBy: state.groupBy.filter(function(d) {
              return d !== columnId;
            })
          });
        }
      }
      function visibleColumns(columns, _ref3) {
        var groupBy = _ref3.instance.state.groupBy;
        var groupByColumns = groupBy.map(function(g) {
          return columns.find(function(col) {
            return col.id === g;
          });
        }).filter(Boolean);
        var nonGroupByColumns = columns.filter(function(col) {
          return !groupBy.includes(col.id);
        });
        columns = [].concat(groupByColumns, nonGroupByColumns);
        columns.forEach(function(column) {
          column.isGrouped = groupBy.includes(column.id);
          column.groupedIndex = groupBy.indexOf(column.id);
        });
        return columns;
      }
      var defaultUserAggregations = {};
      function useInstance$4(instance) {
        var data2 = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, flatHeaders = instance.flatHeaders, _instance$groupByFn = instance.groupByFn, groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn, manualGroupBy = instance.manualGroupBy, _instance$aggregation = instance.aggregations, userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation, plugins = instance.plugins, groupBy = instance.state.groupBy, dispatch = instance.dispatch, _instance$autoResetGr = instance.autoResetGroupBy, autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr, disableGroupBy = instance.disableGroupBy, defaultCanGroupBy = instance.defaultCanGroupBy, getHooks = instance.getHooks;
        ensurePluginOrder(plugins, ["useColumnOrder", "useFilters"], "useGroupBy");
        var getInstance = useGetLatest(instance);
        allColumns2.forEach(function(column) {
          var accessor = column.accessor, defaultColumnGroupBy = column.defaultGroupBy, columnDisableGroupBy = column.disableGroupBy;
          column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : void 0, disableGroupBy === true ? false : void 0, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);
          if (column.canGroupBy) {
            column.toggleGroupBy = function() {
              return instance.toggleGroupBy(column.id);
            };
          }
          column.Aggregated = column.Aggregated || column.Cell;
        });
        var toggleGroupBy = React2.useCallback(function(columnId, value) {
          dispatch({
            type: actions.toggleGroupBy,
            columnId,
            value
          });
        }, [dispatch]);
        var setGroupBy = React2.useCallback(function(value) {
          dispatch({
            type: actions.setGroupBy,
            value
          });
        }, [dispatch]);
        flatHeaders.forEach(function(header) {
          header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {
            instance: getInstance(),
            header
          });
        });
        var _React$useMemo = React2.useMemo(function() {
          if (manualGroupBy || !groupBy.length) {
            return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];
          }
          var existingGroupBy = groupBy.filter(function(g) {
            return allColumns2.find(function(col) {
              return col.id === g;
            });
          });
          var aggregateRowsToValues = function aggregateRowsToValues2(leafRows, groupedRows3, depth) {
            var values2 = {};
            allColumns2.forEach(function(column) {
              if (existingGroupBy.includes(column.id)) {
                values2[column.id] = groupedRows3[0] ? groupedRows3[0].values[column.id] : null;
                return;
              }
              var aggregateFn = typeof column.aggregate === "function" ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];
              if (aggregateFn) {
                var groupedValues = groupedRows3.map(function(row) {
                  return row.values[column.id];
                });
                var leafValues = leafRows.map(function(row) {
                  var columnValue = row.values[column.id];
                  if (!depth && column.aggregateValue) {
                    var aggregateValueFn = typeof column.aggregateValue === "function" ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];
                    if (!aggregateValueFn) {
                      console.info({
                        column
                      });
                      throw new Error("React Table: Invalid column.aggregateValue option for column listed above");
                    }
                    columnValue = aggregateValueFn(columnValue, row, column);
                  }
                  return columnValue;
                });
                values2[column.id] = aggregateFn(leafValues, groupedValues);
              } else if (column.aggregate) {
                console.info({
                  column
                });
                throw new Error("React Table: Invalid column.aggregate option for column listed above");
              } else {
                values2[column.id] = null;
              }
            });
            return values2;
          };
          var groupedFlatRows2 = [];
          var groupedRowsById2 = {};
          var onlyGroupedFlatRows2 = [];
          var onlyGroupedRowsById2 = {};
          var nonGroupedFlatRows2 = [];
          var nonGroupedRowsById2 = {};
          var groupUpRecursively = function groupUpRecursively2(rows2, depth, parentId) {
            if (depth === void 0) {
              depth = 0;
            }
            if (depth === existingGroupBy.length) {
              return rows2.map(function(row) {
                return _extends({}, row, {
                  depth
                });
              });
            }
            var columnId = existingGroupBy[depth];
            var rowGroupsMap = groupByFn(rows2, columnId);
            var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function(_ref4, index) {
              var groupByVal = _ref4[0], groupedRows3 = _ref4[1];
              var id2 = columnId + ":" + groupByVal;
              id2 = parentId ? parentId + ">" + id2 : id2;
              var subRows = groupUpRecursively2(groupedRows3, depth + 1, id2);
              var leafRows = depth ? flattenBy(groupedRows3, "leafRows") : groupedRows3;
              var values2 = aggregateRowsToValues(leafRows, groupedRows3, depth);
              var row = {
                id: id2,
                isGrouped: true,
                groupByID: columnId,
                groupByVal,
                values: values2,
                subRows,
                leafRows,
                depth,
                index
              };
              subRows.forEach(function(subRow) {
                groupedFlatRows2.push(subRow);
                groupedRowsById2[subRow.id] = subRow;
                if (subRow.isGrouped) {
                  onlyGroupedFlatRows2.push(subRow);
                  onlyGroupedRowsById2[subRow.id] = subRow;
                } else {
                  nonGroupedFlatRows2.push(subRow);
                  nonGroupedRowsById2[subRow.id] = subRow;
                }
              });
              return row;
            });
            return aggregatedGroupedRows;
          };
          var groupedRows2 = groupUpRecursively(rows);
          groupedRows2.forEach(function(subRow) {
            groupedFlatRows2.push(subRow);
            groupedRowsById2[subRow.id] = subRow;
            if (subRow.isGrouped) {
              onlyGroupedFlatRows2.push(subRow);
              onlyGroupedRowsById2[subRow.id] = subRow;
            } else {
              nonGroupedFlatRows2.push(subRow);
              nonGroupedRowsById2[subRow.id] = subRow;
            }
          });
          return [groupedRows2, groupedFlatRows2, groupedRowsById2, onlyGroupedFlatRows2, onlyGroupedRowsById2, nonGroupedFlatRows2, nonGroupedRowsById2];
        }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns2, userAggregations, groupByFn]), groupedRows = _React$useMemo[0], groupedFlatRows = _React$useMemo[1], groupedRowsById = _React$useMemo[2], onlyGroupedFlatRows = _React$useMemo[3], onlyGroupedRowsById = _React$useMemo[4], nonGroupedFlatRows = _React$useMemo[5], nonGroupedRowsById = _React$useMemo[6];
        var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);
        useMountedLayoutEffect(function() {
          if (getAutoResetGroupBy()) {
            dispatch({
              type: actions.resetGroupBy
            });
          }
        }, [dispatch, manualGroupBy ? null : data2]);
        Object.assign(instance, {
          preGroupedRows: rows,
          preGroupedFlatRow: flatRows,
          preGroupedRowsById: rowsById,
          groupedRows,
          groupedFlatRows,
          groupedRowsById,
          onlyGroupedFlatRows,
          onlyGroupedRowsById,
          nonGroupedFlatRows,
          nonGroupedRowsById,
          rows: groupedRows,
          flatRows: groupedFlatRows,
          rowsById: groupedRowsById,
          toggleGroupBy,
          setGroupBy
        });
      }
      function prepareRow$1(row) {
        row.allCells.forEach(function(cell) {
          var _row$subRows;
          cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID;
          cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped;
          cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);
        });
      }
      function defaultGroupByFn(rows, columnId) {
        return rows.reduce(function(prev, row, i) {
          var resKey = "" + row.values[columnId];
          prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];
          prev[resKey].push(row);
          return prev;
        }, {});
      }
      var reSplitAlphaNumeric = /([0-9]+)/gm;
      var alphanumeric = function alphanumeric2(rowA, rowB, columnId) {
        var _getRowValuesByColumn = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn[0], b = _getRowValuesByColumn[1];
        a = toString3(a);
        b = toString3(b);
        a = a.split(reSplitAlphaNumeric).filter(Boolean);
        b = b.split(reSplitAlphaNumeric).filter(Boolean);
        while (a.length && b.length) {
          var aa = a.shift();
          var bb = b.shift();
          var an = parseInt(aa, 10);
          var bn = parseInt(bb, 10);
          var combo = [an, bn].sort();
          if (isNaN(combo[0])) {
            if (aa > bb) {
              return 1;
            }
            if (bb > aa) {
              return -1;
            }
            continue;
          }
          if (isNaN(combo[1])) {
            return isNaN(an) ? -1 : 1;
          }
          if (an > bn) {
            return 1;
          }
          if (bn > an) {
            return -1;
          }
        }
        return a.length - b.length;
      };
      function datetime(rowA, rowB, columnId) {
        var _getRowValuesByColumn2 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn2[0], b = _getRowValuesByColumn2[1];
        a = a.getTime();
        b = b.getTime();
        return compareBasic(a, b);
      }
      function basic(rowA, rowB, columnId) {
        var _getRowValuesByColumn3 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn3[0], b = _getRowValuesByColumn3[1];
        return compareBasic(a, b);
      }
      function string(rowA, rowB, columnId) {
        var _getRowValuesByColumn4 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn4[0], b = _getRowValuesByColumn4[1];
        a = a.split("").filter(Boolean);
        b = b.split("").filter(Boolean);
        while (a.length && b.length) {
          var aa = a.shift();
          var bb = b.shift();
          var alower = aa.toLowerCase();
          var blower = bb.toLowerCase();
          if (alower > blower) {
            return 1;
          }
          if (blower > alower) {
            return -1;
          }
          if (aa > bb) {
            return 1;
          }
          if (bb > aa) {
            return -1;
          }
          continue;
        }
        return a.length - b.length;
      }
      function number(rowA, rowB, columnId) {
        var _getRowValuesByColumn5 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn5[0], b = _getRowValuesByColumn5[1];
        var replaceNonNumeric = /[^0-9.]/gi;
        a = Number(String(a).replace(replaceNonNumeric, ""));
        b = Number(String(b).replace(replaceNonNumeric, ""));
        return compareBasic(a, b);
      }
      function compareBasic(a, b) {
        return a === b ? 0 : a > b ? 1 : -1;
      }
      function getRowValuesByColumnID(row1, row2, columnId) {
        return [row1.values[columnId], row2.values[columnId]];
      }
      function toString3(a) {
        if (typeof a === "number") {
          if (isNaN(a) || a === Infinity || a === -Infinity) {
            return "";
          }
          return String(a);
        }
        if (typeof a === "string") {
          return a;
        }
        return "";
      }
      var sortTypes = Object.freeze({
        __proto__: null,
        alphanumeric,
        datetime,
        basic,
        string,
        number
      });
      actions.resetSortBy = "resetSortBy";
      actions.setSortBy = "setSortBy";
      actions.toggleSortBy = "toggleSortBy";
      actions.clearSortBy = "clearSortBy";
      defaultColumn.sortType = "alphanumeric";
      defaultColumn.sortDescFirst = false;
      var useSortBy = function useSortBy2(hooks) {
        hooks.getSortByToggleProps = [defaultGetSortByToggleProps];
        hooks.stateReducers.push(reducer$5);
        hooks.useInstance.push(useInstance$5);
      };
      useSortBy.pluginName = "useSortBy";
      var defaultGetSortByToggleProps = function defaultGetSortByToggleProps2(props, _ref) {
        var instance = _ref.instance, column = _ref.column;
        var _instance$isMultiSort = instance.isMultiSortEvent, isMultiSortEvent = _instance$isMultiSort === void 0 ? function(e) {
          return e.shiftKey;
        } : _instance$isMultiSort;
        return [props, {
          onClick: column.canSort ? function(e) {
            e.persist();
            column.toggleSortBy(void 0, !instance.disableMultiSort && isMultiSortEvent(e));
          } : void 0,
          style: {
            cursor: column.canSort ? "pointer" : void 0
          },
          title: column.canSort ? "Toggle SortBy" : void 0
        }];
      };
      function reducer$5(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            sortBy: []
          }, state);
        }
        if (action.type === actions.resetSortBy) {
          return _extends({}, state, {
            sortBy: instance.initialState.sortBy || []
          });
        }
        if (action.type === actions.clearSortBy) {
          var sortBy = state.sortBy;
          var newSortBy = sortBy.filter(function(d) {
            return d.id !== action.columnId;
          });
          return _extends({}, state, {
            sortBy: newSortBy
          });
        }
        if (action.type === actions.setSortBy) {
          var _sortBy = action.sortBy;
          return _extends({}, state, {
            sortBy: _sortBy
          });
        }
        if (action.type === actions.toggleSortBy) {
          var columnId = action.columnId, desc = action.desc, multi = action.multi;
          var allColumns2 = instance.allColumns, disableMultiSort = instance.disableMultiSort, disableSortRemove = instance.disableSortRemove, disableMultiRemove = instance.disableMultiRemove, _instance$maxMultiSor = instance.maxMultiSortColCount, maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;
          var _sortBy2 = state.sortBy;
          var column = allColumns2.find(function(d) {
            return d.id === columnId;
          });
          var sortDescFirst = column.sortDescFirst;
          var existingSortBy = _sortBy2.find(function(d) {
            return d.id === columnId;
          });
          var existingIndex = _sortBy2.findIndex(function(d) {
            return d.id === columnId;
          });
          var hasDescDefined = typeof desc !== "undefined" && desc !== null;
          var _newSortBy = [];
          var sortAction;
          if (!disableMultiSort && multi) {
            if (existingSortBy) {
              sortAction = "toggle";
            } else {
              sortAction = "add";
            }
          } else {
            if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) {
              sortAction = "replace";
            } else if (existingSortBy) {
              sortAction = "toggle";
            } else {
              sortAction = "replace";
            }
          }
          if (sortAction === "toggle" && !disableSortRemove && !hasDescDefined && (multi ? !disableMultiRemove : true) && (existingSortBy && existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {
            sortAction = "remove";
          }
          if (sortAction === "replace") {
            _newSortBy = [{
              id: columnId,
              desc: hasDescDefined ? desc : sortDescFirst
            }];
          } else if (sortAction === "add") {
            _newSortBy = [].concat(_sortBy2, [{
              id: columnId,
              desc: hasDescDefined ? desc : sortDescFirst
            }]);
            _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);
          } else if (sortAction === "toggle") {
            _newSortBy = _sortBy2.map(function(d) {
              if (d.id === columnId) {
                return _extends({}, d, {
                  desc: hasDescDefined ? desc : !existingSortBy.desc
                });
              }
              return d;
            });
          } else if (sortAction === "remove") {
            _newSortBy = _sortBy2.filter(function(d) {
              return d.id !== columnId;
            });
          }
          return _extends({}, state, {
            sortBy: _newSortBy
          });
        }
      }
      function useInstance$5(instance) {
        var data2 = instance.data, rows = instance.rows, flatRows = instance.flatRows, allColumns2 = instance.allColumns, _instance$orderByFn = instance.orderByFn, orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn, userSortTypes = instance.sortTypes, manualSortBy = instance.manualSortBy, defaultCanSort = instance.defaultCanSort, disableSortBy = instance.disableSortBy, flatHeaders = instance.flatHeaders, sortBy = instance.state.sortBy, dispatch = instance.dispatch, plugins = instance.plugins, getHooks = instance.getHooks, _instance$autoResetSo = instance.autoResetSortBy, autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;
        ensurePluginOrder(plugins, ["useFilters", "useGlobalFilter", "useGroupBy", "usePivotColumns"], "useSortBy");
        var setSortBy = React2.useCallback(function(sortBy2) {
          dispatch({
            type: actions.setSortBy,
            sortBy: sortBy2
          });
        }, [dispatch]);
        var toggleSortBy = React2.useCallback(function(columnId, desc, multi) {
          dispatch({
            type: actions.toggleSortBy,
            columnId,
            desc,
            multi
          });
        }, [dispatch]);
        var getInstance = useGetLatest(instance);
        flatHeaders.forEach(function(column) {
          var accessor = column.accessor, defaultColumnCanSort = column.canSort, columnDisableSortBy = column.disableSortBy, id2 = column.id;
          var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : void 0, disableSortBy === true ? false : void 0, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);
          column.canSort = canSort;
          if (column.canSort) {
            column.toggleSortBy = function(desc, multi) {
              return toggleSortBy(column.id, desc, multi);
            };
            column.clearSortBy = function() {
              dispatch({
                type: actions.clearSortBy,
                columnId: column.id
              });
            };
          }
          column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {
            instance: getInstance(),
            column
          });
          var columnSort = sortBy.find(function(d) {
            return d.id === id2;
          });
          column.isSorted = !!columnSort;
          column.sortedIndex = sortBy.findIndex(function(d) {
            return d.id === id2;
          });
          column.isSortedDesc = column.isSorted ? columnSort.desc : void 0;
        });
        var _React$useMemo = React2.useMemo(function() {
          if (manualSortBy || !sortBy.length) {
            return [rows, flatRows];
          }
          var sortedFlatRows2 = [];
          var availableSortBy = sortBy.filter(function(sort2) {
            return allColumns2.find(function(col) {
              return col.id === sort2.id;
            });
          });
          var sortData = function sortData2(rows2) {
            var sortedData = orderByFn(
              rows2,
              availableSortBy.map(function(sort2) {
                var column = allColumns2.find(function(d) {
                  return d.id === sort2.id;
                });
                if (!column) {
                  throw new Error("React-Table: Could not find a column with id: " + sort2.id + " while sorting");
                }
                var sortType = column.sortType;
                var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];
                if (!sortMethod) {
                  throw new Error("React-Table: Could not find a valid sortType of '" + sortType + "' for column '" + sort2.id + "'.");
                }
                return function(a, b) {
                  return sortMethod(a, b, sort2.id, sort2.desc);
                };
              }),
              availableSortBy.map(function(sort2) {
                var column = allColumns2.find(function(d) {
                  return d.id === sort2.id;
                });
                if (column && column.sortInverted) {
                  return sort2.desc;
                }
                return !sort2.desc;
              })
            );
            sortedData.forEach(function(row) {
              sortedFlatRows2.push(row);
              if (!row.subRows || row.subRows.length === 0) {
                return;
              }
              row.subRows = sortData2(row.subRows);
            });
            return sortedData;
          };
          return [sortData(rows), sortedFlatRows2];
        }, [manualSortBy, sortBy, rows, flatRows, allColumns2, orderByFn, userSortTypes]), sortedRows = _React$useMemo[0], sortedFlatRows = _React$useMemo[1];
        var getAutoResetSortBy = useGetLatest(autoResetSortBy);
        useMountedLayoutEffect(function() {
          if (getAutoResetSortBy()) {
            dispatch({
              type: actions.resetSortBy
            });
          }
        }, [manualSortBy ? null : data2]);
        Object.assign(instance, {
          preSortedRows: rows,
          preSortedFlatRows: flatRows,
          sortedRows,
          sortedFlatRows,
          rows: sortedRows,
          flatRows: sortedFlatRows,
          setSortBy,
          toggleSortBy
        });
      }
      function defaultOrderByFn(arr, funcs, dirs) {
        return [].concat(arr).sort(function(rowA, rowB) {
          for (var i = 0; i < funcs.length; i += 1) {
            var sortFn = funcs[i];
            var desc = dirs[i] === false || dirs[i] === "desc";
            var sortInt = sortFn(rowA, rowB);
            if (sortInt !== 0) {
              return desc ? -sortInt : sortInt;
            }
          }
          return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;
        });
      }
      var pluginName = "usePagination";
      actions.resetPage = "resetPage";
      actions.gotoPage = "gotoPage";
      actions.setPageSize = "setPageSize";
      var usePagination = function usePagination2(hooks) {
        hooks.stateReducers.push(reducer$6);
        hooks.useInstance.push(useInstance$6);
      };
      usePagination.pluginName = pluginName;
      function reducer$6(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            pageSize: 10,
            pageIndex: 0
          }, state);
        }
        if (action.type === actions.resetPage) {
          return _extends({}, state, {
            pageIndex: instance.initialState.pageIndex || 0
          });
        }
        if (action.type === actions.gotoPage) {
          var pageCount = instance.pageCount, page = instance.page;
          var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);
          var canNavigate = false;
          if (newPageIndex > state.pageIndex) {
            canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;
          } else if (newPageIndex < state.pageIndex) {
            canNavigate = newPageIndex > -1;
          }
          if (!canNavigate) {
            return state;
          }
          return _extends({}, state, {
            pageIndex: newPageIndex
          });
        }
        if (action.type === actions.setPageSize) {
          var pageSize = action.pageSize;
          var topRowIndex = state.pageSize * state.pageIndex;
          var pageIndex = Math.floor(topRowIndex / pageSize);
          return _extends({}, state, {
            pageIndex,
            pageSize
          });
        }
      }
      function useInstance$6(instance) {
        var rows = instance.rows, _instance$autoResetPa = instance.autoResetPage, autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? "expanded" : _instance$manualExpan, plugins = instance.plugins, userPageCount = instance.pageCount, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$state = instance.state, pageSize = _instance$state.pageSize, pageIndex = _instance$state.pageIndex, expanded = _instance$state.expanded, globalFilter = _instance$state.globalFilter, filters = _instance$state.filters, groupBy = _instance$state.groupBy, sortBy = _instance$state.sortBy, dispatch = instance.dispatch, data2 = instance.data, manualPagination = instance.manualPagination;
        ensurePluginOrder(plugins, ["useGlobalFilter", "useFilters", "useGroupBy", "useSortBy", "useExpanded"], "usePagination");
        var getAutoResetPage = useGetLatest(autoResetPage);
        useMountedLayoutEffect(function() {
          if (getAutoResetPage()) {
            dispatch({
              type: actions.resetPage
            });
          }
        }, [dispatch, manualPagination ? null : data2, globalFilter, filters, groupBy, sortBy]);
        var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);
        var pageOptions = React2.useMemo(function() {
          return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function(d, i) {
            return i;
          }) : [];
        }, [pageCount]);
        var page = React2.useMemo(function() {
          var page2;
          if (manualPagination) {
            page2 = rows;
          } else {
            var pageStart = pageSize * pageIndex;
            var pageEnd = pageStart + pageSize;
            page2 = rows.slice(pageStart, pageEnd);
          }
          if (paginateExpandedRows) {
            return page2;
          }
          return expandRows(page2, {
            manualExpandedKey,
            expanded,
            expandSubRows
          });
        }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);
        var canPreviousPage = pageIndex > 0;
        var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;
        var gotoPage = React2.useCallback(function(pageIndex2) {
          dispatch({
            type: actions.gotoPage,
            pageIndex: pageIndex2
          });
        }, [dispatch]);
        var previousPage = React2.useCallback(function() {
          return gotoPage(function(old) {
            return old - 1;
          });
        }, [gotoPage]);
        var nextPage = React2.useCallback(function() {
          return gotoPage(function(old) {
            return old + 1;
          });
        }, [gotoPage]);
        var setPageSize = React2.useCallback(function(pageSize2) {
          dispatch({
            type: actions.setPageSize,
            pageSize: pageSize2
          });
        }, [dispatch]);
        Object.assign(instance, {
          pageOptions,
          pageCount,
          page,
          canPreviousPage,
          canNextPage,
          gotoPage,
          previousPage,
          nextPage,
          setPageSize
        });
      }
      actions.resetPivot = "resetPivot";
      actions.togglePivot = "togglePivot";
      var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns2(hooks) {
        hooks.getPivotToggleProps = [defaultGetPivotToggleProps];
        hooks.stateReducers.push(reducer$7);
        hooks.useInstanceAfterData.push(useInstanceAfterData);
        hooks.allColumns.push(allColumns);
        hooks.accessValue.push(accessValue);
        hooks.materializedColumns.push(materializedColumns);
        hooks.materializedColumnsDeps.push(materializedColumnsDeps);
        hooks.visibleColumns.push(visibleColumns$1);
        hooks.visibleColumnsDeps.push(visibleColumnsDeps);
        hooks.useInstance.push(useInstance$7);
        hooks.prepareRow.push(prepareRow$2);
      };
      _UNSTABLE_usePivotColumns.pluginName = "usePivotColumns";
      var defaultPivotColumns = [];
      var defaultGetPivotToggleProps = function defaultGetPivotToggleProps2(props, _ref) {
        var header = _ref.header;
        return [props, {
          onClick: header.canPivot ? function(e) {
            e.persist();
            header.togglePivot();
          } : void 0,
          style: {
            cursor: header.canPivot ? "pointer" : void 0
          },
          title: "Toggle Pivot"
        }];
      };
      function reducer$7(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            pivotColumns: defaultPivotColumns
          }, state);
        }
        if (action.type === actions.resetPivot) {
          return _extends({}, state, {
            pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns
          });
        }
        if (action.type === actions.togglePivot) {
          var columnId = action.columnId, setPivot = action.value;
          var resolvedPivot = typeof setPivot !== "undefined" ? setPivot : !state.pivotColumns.includes(columnId);
          if (resolvedPivot) {
            return _extends({}, state, {
              pivotColumns: [].concat(state.pivotColumns, [columnId])
            });
          }
          return _extends({}, state, {
            pivotColumns: state.pivotColumns.filter(function(d) {
              return d !== columnId;
            })
          });
        }
      }
      function useInstanceAfterData(instance) {
        instance.allColumns.forEach(function(column) {
          column.isPivotSource = instance.state.pivotColumns.includes(column.id);
        });
      }
      function allColumns(columns, _ref2) {
        var instance = _ref2.instance;
        columns.forEach(function(column) {
          column.isPivotSource = instance.state.pivotColumns.includes(column.id);
          column.uniqueValues = /* @__PURE__ */ new Set();
        });
        return columns;
      }
      function accessValue(value, _ref3) {
        var column = _ref3.column;
        if (column.uniqueValues && typeof value !== "undefined") {
          column.uniqueValues.add(value);
        }
        return value;
      }
      function materializedColumns(materialized, _ref4) {
        var instance = _ref4.instance;
        var allColumns2 = instance.allColumns, state = instance.state;
        if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {
          return materialized;
        }
        var pivotColumns = state.pivotColumns.map(function(id2) {
          return allColumns2.find(function(d) {
            return d.id === id2;
          });
        }).filter(Boolean);
        var sourceColumns = allColumns2.filter(function(d) {
          return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);
        });
        var buildPivotColumns = function buildPivotColumns2(depth, parent, pivotFilters) {
          if (depth === void 0) {
            depth = 0;
          }
          if (pivotFilters === void 0) {
            pivotFilters = [];
          }
          var pivotColumn = pivotColumns[depth];
          if (!pivotColumn) {
            return sourceColumns.map(function(sourceColumn) {
              return _extends({}, sourceColumn, {
                canPivot: false,
                isPivoted: true,
                parent,
                depth,
                id: "" + (parent ? parent.id + "." + sourceColumn.id : sourceColumn.id),
                accessor: function accessor(originalRow, i, row) {
                  if (pivotFilters.every(function(filter) {
                    return filter(row);
                  })) {
                    return row.values[sourceColumn.id];
                  }
                }
              });
            });
          }
          var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();
          return uniqueValues.map(function(uniqueValue) {
            var columnGroup = _extends({}, pivotColumn, {
              Header: pivotColumn.PivotHeader || typeof pivotColumn.header === "string" ? pivotColumn.Header + ": " + uniqueValue : uniqueValue,
              isPivotGroup: true,
              parent,
              depth,
              id: parent ? parent.id + "." + pivotColumn.id + "." + uniqueValue : pivotColumn.id + "." + uniqueValue,
              pivotValue: uniqueValue
            });
            columnGroup.columns = buildPivotColumns2(depth + 1, columnGroup, [].concat(pivotFilters, [function(row) {
              return row.values[pivotColumn.id] === uniqueValue;
            }]));
            return columnGroup;
          });
        };
        var newMaterialized = flattenColumns(buildPivotColumns());
        return [].concat(materialized, newMaterialized);
      }
      function materializedColumnsDeps(deps, _ref5) {
        var _ref5$instance$state = _ref5.instance.state, pivotColumns = _ref5$instance$state.pivotColumns, groupBy = _ref5$instance$state.groupBy;
        return [].concat(deps, [pivotColumns, groupBy]);
      }
      function visibleColumns$1(visibleColumns2, _ref6) {
        var state = _ref6.instance.state;
        visibleColumns2 = visibleColumns2.filter(function(d) {
          return !d.isPivotSource;
        });
        if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {
          visibleColumns2 = visibleColumns2.filter(function(column) {
            return column.isGrouped || column.isPivoted;
          });
        }
        return visibleColumns2;
      }
      function visibleColumnsDeps(deps, _ref7) {
        var instance = _ref7.instance;
        return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);
      }
      function useInstance$7(instance) {
        var columns = instance.columns, allColumns2 = instance.allColumns, flatHeaders = instance.flatHeaders, getHooks = instance.getHooks, plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetPi = instance.autoResetPivot, autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi, manaulPivot = instance.manaulPivot, disablePivot = instance.disablePivot, defaultCanPivot = instance.defaultCanPivot;
        ensurePluginOrder(plugins, ["useGroupBy"], "usePivotColumns");
        var getInstance = useGetLatest(instance);
        allColumns2.forEach(function(column) {
          var accessor = column.accessor, defaultColumnPivot = column.defaultPivot, columnDisablePivot = column.disablePivot;
          column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : void 0, disablePivot === true ? false : void 0, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);
          if (column.canPivot) {
            column.togglePivot = function() {
              return instance.togglePivot(column.id);
            };
          }
          column.Aggregated = column.Aggregated || column.Cell;
        });
        var togglePivot = function togglePivot2(columnId, value) {
          dispatch({
            type: actions.togglePivot,
            columnId,
            value
          });
        };
        flatHeaders.forEach(function(header) {
          header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {
            instance: getInstance(),
            header
          });
        });
        var getAutoResetPivot = useGetLatest(autoResetPivot);
        useMountedLayoutEffect(function() {
          if (getAutoResetPivot()) {
            dispatch({
              type: actions.resetPivot
            });
          }
        }, [dispatch, manaulPivot ? null : columns]);
        Object.assign(instance, {
          togglePivot
        });
      }
      function prepareRow$2(row) {
        row.allCells.forEach(function(cell) {
          cell.isPivoted = cell.column.isPivoted;
        });
      }
      var pluginName$1 = "useRowSelect";
      actions.resetSelectedRows = "resetSelectedRows";
      actions.toggleAllRowsSelected = "toggleAllRowsSelected";
      actions.toggleRowSelected = "toggleRowSelected";
      actions.toggleAllPageRowsSelected = "toggleAllPageRowsSelected";
      var useRowSelect = function useRowSelect2(hooks) {
        hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];
        hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];
        hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];
        hooks.stateReducers.push(reducer$8);
        hooks.useInstance.push(useInstance$8);
        hooks.prepareRow.push(prepareRow$3);
      };
      useRowSelect.pluginName = pluginName$1;
      var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps2(props, _ref) {
        var instance = _ref.instance, row = _ref.row;
        var _instance$manualRowSe = instance.manualRowSelectedKey, manualRowSelectedKey = _instance$manualRowSe === void 0 ? "isSelected" : _instance$manualRowSe;
        var checked = false;
        if (row.original && row.original[manualRowSelectedKey]) {
          checked = true;
        } else {
          checked = row.isSelected;
        }
        return [props, {
          onChange: function onChange(e) {
            row.toggleRowSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked,
          title: "Toggle Row Selected",
          indeterminate: row.isSomeSelected
        }];
      };
      var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps2(props, _ref2) {
        var instance = _ref2.instance;
        return [props, {
          onChange: function onChange(e) {
            instance.toggleAllRowsSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: instance.isAllRowsSelected,
          title: "Toggle All Rows Selected",
          indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)
        }];
      };
      var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps2(props, _ref3) {
        var instance = _ref3.instance;
        return [props, {
          onChange: function onChange(e) {
            instance.toggleAllPageRowsSelected(e.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: instance.isAllPageRowsSelected,
          title: "Toggle All Current Page Rows Selected",
          indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function(_ref4) {
            var id2 = _ref4.id;
            return instance.state.selectedRowIds[id2];
          }))
        }];
      };
      function reducer$8(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            selectedRowIds: {}
          }, state);
        }
        if (action.type === actions.resetSelectedRows) {
          return _extends({}, state, {
            selectedRowIds: instance.initialState.selectedRowIds || {}
          });
        }
        if (action.type === actions.toggleAllRowsSelected) {
          var setSelected = action.value;
          var isAllRowsSelected = instance.isAllRowsSelected, rowsById = instance.rowsById, _instance$nonGroupedR = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;
          var selectAll = typeof setSelected !== "undefined" ? setSelected : !isAllRowsSelected;
          var selectedRowIds = Object.assign({}, state.selectedRowIds);
          if (selectAll) {
            Object.keys(nonGroupedRowsById).forEach(function(rowId) {
              selectedRowIds[rowId] = true;
            });
          } else {
            Object.keys(nonGroupedRowsById).forEach(function(rowId) {
              delete selectedRowIds[rowId];
            });
          }
          return _extends({}, state, {
            selectedRowIds
          });
        }
        if (action.type === actions.toggleRowSelected) {
          var id2 = action.id, _setSelected = action.value;
          var _rowsById = instance.rowsById, _instance$selectSubRo = instance.selectSubRows, selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo, getSubRows = instance.getSubRows;
          var isSelected = state.selectedRowIds[id2];
          var shouldExist = typeof _setSelected !== "undefined" ? _setSelected : !isSelected;
          if (isSelected === shouldExist) {
            return state;
          }
          var newSelectedRowIds = _extends({}, state.selectedRowIds);
          var handleRowById = function handleRowById2(id3) {
            var row = _rowsById[id3];
            if (row) {
              if (!row.isGrouped) {
                if (shouldExist) {
                  newSelectedRowIds[id3] = true;
                } else {
                  delete newSelectedRowIds[id3];
                }
              }
              if (selectSubRows && getSubRows(row)) {
                return getSubRows(row).forEach(function(row2) {
                  return handleRowById2(row2.id);
                });
              }
            }
          };
          handleRowById(id2);
          return _extends({}, state, {
            selectedRowIds: newSelectedRowIds
          });
        }
        if (action.type === actions.toggleAllPageRowsSelected) {
          var _setSelected2 = action.value;
          var page = instance.page, _rowsById2 = instance.rowsById, _instance$selectSubRo2 = instance.selectSubRows, _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2, isAllPageRowsSelected = instance.isAllPageRowsSelected, _getSubRows = instance.getSubRows;
          var _selectAll = typeof _setSelected2 !== "undefined" ? _setSelected2 : !isAllPageRowsSelected;
          var _newSelectedRowIds = _extends({}, state.selectedRowIds);
          var _handleRowById = function _handleRowById2(id3) {
            var row = _rowsById2[id3];
            if (!row.isGrouped) {
              if (_selectAll) {
                _newSelectedRowIds[id3] = true;
              } else {
                delete _newSelectedRowIds[id3];
              }
            }
            if (_selectSubRows && _getSubRows(row)) {
              return _getSubRows(row).forEach(function(row2) {
                return _handleRowById2(row2.id);
              });
            }
          };
          page.forEach(function(row) {
            return _handleRowById(row.id);
          });
          return _extends({}, state, {
            selectedRowIds: _newSelectedRowIds
          });
        }
        return state;
      }
      function useInstance$8(instance) {
        var data2 = instance.data, rows = instance.rows, getHooks = instance.getHooks, plugins = instance.plugins, rowsById = instance.rowsById, _instance$nonGroupedR2 = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2, _instance$autoResetSe = instance.autoResetSelectedRows, autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe, selectedRowIds = instance.state.selectedRowIds, _instance$selectSubRo3 = instance.selectSubRows, selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3, dispatch = instance.dispatch, page = instance.page, getSubRows = instance.getSubRows;
        ensurePluginOrder(plugins, ["useFilters", "useGroupBy", "useSortBy", "useExpanded", "usePagination"], "useRowSelect");
        var selectedFlatRows = React2.useMemo(function() {
          var selectedFlatRows2 = [];
          rows.forEach(function(row) {
            var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];
            row.isSelected = !!isSelected;
            row.isSomeSelected = isSelected === null;
            if (isSelected) {
              selectedFlatRows2.push(row);
            }
          });
          return selectedFlatRows2;
        }, [rows, selectSubRows, selectedRowIds, getSubRows]);
        var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);
        var isAllPageRowsSelected = isAllRowsSelected;
        if (isAllRowsSelected) {
          if (Object.keys(nonGroupedRowsById).some(function(id2) {
            return !selectedRowIds[id2];
          })) {
            isAllRowsSelected = false;
          }
        }
        if (!isAllRowsSelected) {
          if (page && page.length && page.some(function(_ref5) {
            var id2 = _ref5.id;
            return !selectedRowIds[id2];
          })) {
            isAllPageRowsSelected = false;
          }
        }
        var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);
        useMountedLayoutEffect(function() {
          if (getAutoResetSelectedRows()) {
            dispatch({
              type: actions.resetSelectedRows
            });
          }
        }, [dispatch, data2]);
        var toggleAllRowsSelected = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllRowsSelected,
            value
          });
        }, [dispatch]);
        var toggleAllPageRowsSelected = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllPageRowsSelected,
            value
          });
        }, [dispatch]);
        var toggleRowSelected = React2.useCallback(function(id2, value) {
          return dispatch({
            type: actions.toggleRowSelected,
            id: id2,
            value
          });
        }, [dispatch]);
        var getInstance = useGetLatest(instance);
        var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {
          instance: getInstance()
        });
        var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {
          instance: getInstance()
        });
        Object.assign(instance, {
          selectedFlatRows,
          isAllRowsSelected,
          isAllPageRowsSelected,
          toggleRowSelected,
          toggleAllRowsSelected,
          getToggleAllRowsSelectedProps,
          getToggleAllPageRowsSelectedProps,
          toggleAllPageRowsSelected
        });
      }
      function prepareRow$3(row, _ref6) {
        var instance = _ref6.instance;
        row.toggleRowSelected = function(set2) {
          return instance.toggleRowSelected(row.id, set2);
        };
        row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {
          instance,
          row
        });
      }
      function getRowIsSelected(row, selectedRowIds, getSubRows) {
        if (selectedRowIds[row.id]) {
          return true;
        }
        var subRows = getSubRows(row);
        if (subRows && subRows.length) {
          var allChildrenSelected = true;
          var someSelected = false;
          subRows.forEach(function(subRow) {
            if (someSelected && !allChildrenSelected) {
              return;
            }
            if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {
              someSelected = true;
            } else {
              allChildrenSelected = false;
            }
          });
          return allChildrenSelected ? true : someSelected ? null : false;
        }
        return false;
      }
      var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor2(row) {
        return {};
      };
      var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor2(cell) {
        return {};
      };
      actions.setRowState = "setRowState";
      actions.setCellState = "setCellState";
      actions.resetRowState = "resetRowState";
      var useRowState = function useRowState2(hooks) {
        hooks.stateReducers.push(reducer$9);
        hooks.useInstance.push(useInstance$9);
        hooks.prepareRow.push(prepareRow$4);
      };
      useRowState.pluginName = "useRowState";
      function reducer$9(state, action, previousState, instance) {
        var _instance$initialRowS = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS, _instance$initialCell = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell, rowsById = instance.rowsById;
        if (action.type === actions.init) {
          return _extends({
            rowState: {}
          }, state);
        }
        if (action.type === actions.resetRowState) {
          return _extends({}, state, {
            rowState: instance.initialState.rowState || {}
          });
        }
        if (action.type === actions.setRowState) {
          var _extends2;
          var rowId = action.rowId, value = action.value;
          var oldRowState = typeof state.rowState[rowId] !== "undefined" ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);
          return _extends({}, state, {
            rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))
          });
        }
        if (action.type === actions.setCellState) {
          var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends3, _extends4;
          var _rowId = action.rowId, columnId = action.columnId, _value = action.value;
          var _oldRowState = typeof state.rowState[_rowId] !== "undefined" ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);
          var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== "undefined" ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function(cell) {
            return cell.column.id === columnId;
          }));
          return _extends({}, state, {
            rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {
              cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))
            }), _extends4))
          });
        }
      }
      function useInstance$9(instance) {
        var _instance$autoResetRo = instance.autoResetRowState, autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo, data2 = instance.data, dispatch = instance.dispatch;
        var setRowState = React2.useCallback(function(rowId, value) {
          return dispatch({
            type: actions.setRowState,
            rowId,
            value
          });
        }, [dispatch]);
        var setCellState = React2.useCallback(function(rowId, columnId, value) {
          return dispatch({
            type: actions.setCellState,
            rowId,
            columnId,
            value
          });
        }, [dispatch]);
        var getAutoResetRowState = useGetLatest(autoResetRowState);
        useMountedLayoutEffect(function() {
          if (getAutoResetRowState()) {
            dispatch({
              type: actions.resetRowState
            });
          }
        }, [data2]);
        Object.assign(instance, {
          setRowState,
          setCellState
        });
      }
      function prepareRow$4(row, _ref) {
        var instance = _ref.instance;
        var _instance$initialRowS2 = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2, _instance$initialCell2 = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2, rowState = instance.state.rowState;
        if (row) {
          row.state = typeof rowState[row.id] !== "undefined" ? rowState[row.id] : initialRowStateAccessor(row);
          row.setState = function(updater) {
            return instance.setRowState(row.id, updater);
          };
          row.cells.forEach(function(cell) {
            if (!row.state.cellState) {
              row.state.cellState = {};
            }
            cell.state = typeof row.state.cellState[cell.column.id] !== "undefined" ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);
            cell.setState = function(updater) {
              return instance.setCellState(row.id, cell.column.id, updater);
            };
          });
        }
      }
      actions.resetColumnOrder = "resetColumnOrder";
      actions.setColumnOrder = "setColumnOrder";
      var useColumnOrder = function useColumnOrder2(hooks) {
        hooks.stateReducers.push(reducer$a);
        hooks.visibleColumnsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.columnOrder]);
        });
        hooks.visibleColumns.push(visibleColumns$2);
        hooks.useInstance.push(useInstance$a);
      };
      useColumnOrder.pluginName = "useColumnOrder";
      function reducer$a(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            columnOrder: []
          }, state);
        }
        if (action.type === actions.resetColumnOrder) {
          return _extends({}, state, {
            columnOrder: instance.initialState.columnOrder || []
          });
        }
        if (action.type === actions.setColumnOrder) {
          return _extends({}, state, {
            columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)
          });
        }
      }
      function visibleColumns$2(columns, _ref2) {
        var columnOrder = _ref2.instance.state.columnOrder;
        if (!columnOrder || !columnOrder.length) {
          return columns;
        }
        var columnOrderCopy = [].concat(columnOrder);
        var columnsCopy = [].concat(columns);
        var columnsInOrder = [];
        var _loop = function _loop2() {
          var targetColumnId = columnOrderCopy.shift();
          var foundIndex = columnsCopy.findIndex(function(d) {
            return d.id === targetColumnId;
          });
          if (foundIndex > -1) {
            columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);
          }
        };
        while (columnsCopy.length && columnOrderCopy.length) {
          _loop();
        }
        return [].concat(columnsInOrder, columnsCopy);
      }
      function useInstance$a(instance) {
        var dispatch = instance.dispatch;
        instance.setColumnOrder = React2.useCallback(function(columnOrder) {
          return dispatch({
            type: actions.setColumnOrder,
            columnOrder
          });
        }, [dispatch]);
      }
      defaultColumn.canResize = true;
      actions.columnStartResizing = "columnStartResizing";
      actions.columnResizing = "columnResizing";
      actions.columnDoneResizing = "columnDoneResizing";
      actions.resetResize = "resetResize";
      var useResizeColumns = function useResizeColumns2(hooks) {
        hooks.getResizerProps = [defaultGetResizerProps];
        hooks.getHeaderProps.push({
          style: {
            position: "relative"
          }
        });
        hooks.stateReducers.push(reducer$b);
        hooks.useInstance.push(useInstance$b);
        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);
      };
      var defaultGetResizerProps = function defaultGetResizerProps2(props, _ref) {
        var instance = _ref.instance, header = _ref.header;
        var dispatch = instance.dispatch;
        var onResizeStart = function onResizeStart2(e, header2) {
          var isTouchEvent = false;
          if (e.type === "touchstart") {
            if (e.touches && e.touches.length > 1) {
              return;
            }
            isTouchEvent = true;
          }
          var headersToResize = getLeafHeaders(header2);
          var headerIdWidths = headersToResize.map(function(d) {
            return [d.id, d.totalWidth];
          });
          var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;
          var raf;
          var mostRecentClientX;
          var dispatchEnd = function dispatchEnd2() {
            window.cancelAnimationFrame(raf);
            raf = null;
            dispatch({
              type: actions.columnDoneResizing
            });
          };
          var dispatchMove = function dispatchMove2() {
            window.cancelAnimationFrame(raf);
            raf = null;
            dispatch({
              type: actions.columnResizing,
              clientX: mostRecentClientX
            });
          };
          var scheduleDispatchMoveOnNextAnimationFrame = function scheduleDispatchMoveOnNextAnimationFrame2(clientXPos) {
            mostRecentClientX = clientXPos;
            if (!raf) {
              raf = window.requestAnimationFrame(dispatchMove);
            }
          };
          var handlersAndEvents = {
            mouse: {
              moveEvent: "mousemove",
              moveHandler: function moveHandler(e2) {
                return scheduleDispatchMoveOnNextAnimationFrame(e2.clientX);
              },
              upEvent: "mouseup",
              upHandler: function upHandler(e2) {
                document.removeEventListener("mousemove", handlersAndEvents.mouse.moveHandler);
                document.removeEventListener("mouseup", handlersAndEvents.mouse.upHandler);
                dispatchEnd();
              }
            },
            touch: {
              moveEvent: "touchmove",
              moveHandler: function moveHandler(e2) {
                if (e2.cancelable) {
                  e2.preventDefault();
                  e2.stopPropagation();
                }
                scheduleDispatchMoveOnNextAnimationFrame(e2.touches[0].clientX);
                return false;
              },
              upEvent: "touchend",
              upHandler: function upHandler(e2) {
                document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);
                document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);
                dispatchEnd();
              }
            }
          };
          var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;
          var passiveIfSupported = passiveEventSupported() ? {
            passive: false
          } : false;
          document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);
          document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);
          dispatch({
            type: actions.columnStartResizing,
            columnId: header2.id,
            columnWidth: header2.totalWidth,
            headerIdWidths,
            clientX
          });
        };
        return [props, {
          onMouseDown: function onMouseDown(e) {
            return e.persist() || onResizeStart(e, header);
          },
          onTouchStart: function onTouchStart(e) {
            return e.persist() || onResizeStart(e, header);
          },
          style: {
            cursor: "col-resize"
          },
          draggable: false,
          role: "separator"
        }];
      };
      useResizeColumns.pluginName = "useResizeColumns";
      function reducer$b(state, action) {
        if (action.type === actions.init) {
          return _extends({
            columnResizing: {
              columnWidths: {}
            }
          }, state);
        }
        if (action.type === actions.resetResize) {
          return _extends({}, state, {
            columnResizing: {
              columnWidths: {}
            }
          });
        }
        if (action.type === actions.columnStartResizing) {
          var clientX = action.clientX, columnId = action.columnId, columnWidth = action.columnWidth, headerIdWidths = action.headerIdWidths;
          return _extends({}, state, {
            columnResizing: _extends({}, state.columnResizing, {
              startX: clientX,
              headerIdWidths,
              columnWidth,
              isResizingColumn: columnId
            })
          });
        }
        if (action.type === actions.columnResizing) {
          var _clientX = action.clientX;
          var _state$columnResizing = state.columnResizing, startX = _state$columnResizing.startX, _columnWidth = _state$columnResizing.columnWidth, _state$columnResizing2 = _state$columnResizing.headerIdWidths, _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;
          var deltaX = _clientX - startX;
          var percentageDeltaX = deltaX / _columnWidth;
          var newColumnWidths = {};
          _headerIdWidths.forEach(function(_ref2) {
            var headerId = _ref2[0], headerWidth = _ref2[1];
            newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
          });
          return _extends({}, state, {
            columnResizing: _extends({}, state.columnResizing, {
              columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)
            })
          });
        }
        if (action.type === actions.columnDoneResizing) {
          return _extends({}, state, {
            columnResizing: _extends({}, state.columnResizing, {
              startX: null,
              isResizingColumn: null
            })
          });
        }
      }
      var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions2(instance) {
        var flatHeaders = instance.flatHeaders, disableResizing = instance.disableResizing, getHooks = instance.getHooks, columnResizing = instance.state.columnResizing;
        var getInstance = useGetLatest(instance);
        flatHeaders.forEach(function(header) {
          var canResize = getFirstDefined(header.disableResizing === true ? false : void 0, disableResizing === true ? false : void 0, true);
          header.canResize = canResize;
          header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;
          header.isResizing = columnResizing.isResizingColumn === header.id;
          if (canResize) {
            header.getResizerProps = makePropGetter(getHooks().getResizerProps, {
              instance: getInstance(),
              header
            });
          }
        });
      };
      function useInstance$b(instance) {
        var plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetRe = instance.autoResetResize, autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe, columns = instance.columns;
        ensurePluginOrder(plugins, ["useAbsoluteLayout"], "useResizeColumns");
        var getAutoResetResize = useGetLatest(autoResetResize);
        useMountedLayoutEffect(function() {
          if (getAutoResetResize()) {
            dispatch({
              type: actions.resetResize
            });
          }
        }, [columns]);
        var resetResizing = React2.useCallback(function() {
          return dispatch({
            type: actions.resetResize
          });
        }, [dispatch]);
        Object.assign(instance, {
          resetResizing
        });
      }
      function getLeafHeaders(header) {
        var leafHeaders = [];
        var recurseHeader = function recurseHeader2(header2) {
          if (header2.columns && header2.columns.length) {
            header2.columns.map(recurseHeader2);
          }
          leafHeaders.push(header2);
        };
        recurseHeader(header);
        return leafHeaders;
      }
      var cellStyles = {
        position: "absolute",
        top: 0
      };
      var useAbsoluteLayout = function useAbsoluteLayout2(hooks) {
        hooks.getTableBodyProps.push(getRowStyles);
        hooks.getRowProps.push(getRowStyles);
        hooks.getHeaderGroupProps.push(getRowStyles);
        hooks.getFooterGroupProps.push(getRowStyles);
        hooks.getHeaderProps.push(function(props, _ref) {
          var column = _ref.column;
          return [props, {
            style: _extends({}, cellStyles, {
              left: column.totalLeft + "px",
              width: column.totalWidth + "px"
            })
          }];
        });
        hooks.getCellProps.push(function(props, _ref2) {
          var cell = _ref2.cell;
          return [props, {
            style: _extends({}, cellStyles, {
              left: cell.column.totalLeft + "px",
              width: cell.column.totalWidth + "px"
            })
          }];
        });
        hooks.getFooterProps.push(function(props, _ref3) {
          var column = _ref3.column;
          return [props, {
            style: _extends({}, cellStyles, {
              left: column.totalLeft + "px",
              width: column.totalWidth + "px"
            })
          }];
        });
      };
      useAbsoluteLayout.pluginName = "useAbsoluteLayout";
      var getRowStyles = function getRowStyles2(props, _ref4) {
        var instance = _ref4.instance;
        return [props, {
          style: {
            position: "relative",
            width: instance.totalColumnsWidth + "px"
          }
        }];
      };
      var cellStyles$1 = {
        display: "inline-block",
        boxSizing: "border-box"
      };
      var getRowStyles$1 = function getRowStyles2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          style: {
            display: "flex",
            width: instance.totalColumnsWidth + "px"
          }
        }];
      };
      var useBlockLayout = function useBlockLayout2(hooks) {
        hooks.getRowProps.push(getRowStyles$1);
        hooks.getHeaderGroupProps.push(getRowStyles$1);
        hooks.getFooterGroupProps.push(getRowStyles$1);
        hooks.getHeaderProps.push(function(props, _ref2) {
          var column = _ref2.column;
          return [props, {
            style: _extends({}, cellStyles$1, {
              width: column.totalWidth + "px"
            })
          }];
        });
        hooks.getCellProps.push(function(props, _ref3) {
          var cell = _ref3.cell;
          return [props, {
            style: _extends({}, cellStyles$1, {
              width: cell.column.totalWidth + "px"
            })
          }];
        });
        hooks.getFooterProps.push(function(props, _ref4) {
          var column = _ref4.column;
          return [props, {
            style: _extends({}, cellStyles$1, {
              width: column.totalWidth + "px"
            })
          }];
        });
      };
      useBlockLayout.pluginName = "useBlockLayout";
      function useFlexLayout(hooks) {
        hooks.getTableProps.push(getTableProps);
        hooks.getRowProps.push(getRowStyles$2);
        hooks.getHeaderGroupProps.push(getRowStyles$2);
        hooks.getFooterGroupProps.push(getRowStyles$2);
        hooks.getHeaderProps.push(getHeaderProps);
        hooks.getCellProps.push(getCellProps);
        hooks.getFooterProps.push(getFooterProps);
      }
      useFlexLayout.pluginName = "useFlexLayout";
      var getTableProps = function getTableProps2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          style: {
            minWidth: instance.totalColumnsMinWidth + "px"
          }
        }];
      };
      var getRowStyles$2 = function getRowStyles2(props, _ref2) {
        var instance = _ref2.instance;
        return [props, {
          style: {
            display: "flex",
            flex: "1 0 auto",
            minWidth: instance.totalColumnsMinWidth + "px"
          }
        }];
      };
      var getHeaderProps = function getHeaderProps2(props, _ref3) {
        var column = _ref3.column;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : void 0,
            minWidth: column.totalMinWidth + "px",
            width: column.totalWidth + "px"
          }
        }];
      };
      var getCellProps = function getCellProps2(props, _ref4) {
        var cell = _ref4.cell;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: cell.column.totalFlexWidth + " 0 auto",
            minWidth: cell.column.totalMinWidth + "px",
            width: cell.column.totalWidth + "px"
          }
        }];
      };
      var getFooterProps = function getFooterProps2(props, _ref5) {
        var column = _ref5.column;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : void 0,
            minWidth: column.totalMinWidth + "px",
            width: column.totalWidth + "px"
          }
        }];
      };
      actions.columnStartResizing = "columnStartResizing";
      actions.columnResizing = "columnResizing";
      actions.columnDoneResizing = "columnDoneResizing";
      actions.resetResize = "resetResize";
      function useGridLayout(hooks) {
        hooks.stateReducers.push(reducer$c);
        hooks.getTableProps.push(getTableProps$1);
        hooks.getHeaderProps.push(getHeaderProps$1);
        hooks.getRowProps.push(getRowProps);
      }
      useGridLayout.pluginName = "useGridLayout";
      var getTableProps$1 = function getTableProps2(props, _ref) {
        var instance = _ref.instance;
        var gridTemplateColumns = instance.visibleColumns.map(function(column) {
          var _instance$state$colum;
          if (instance.state.gridLayout.columnWidths[column.id])
            return instance.state.gridLayout.columnWidths[column.id] + "px";
          if ((_instance$state$colum = instance.state.columnResizing) == null ? void 0 : _instance$state$colum.isResizingColumn)
            return instance.state.gridLayout.startWidths[column.id] + "px";
          if (typeof column.width === "number")
            return column.width + "px";
          return column.width;
        });
        return [props, {
          style: {
            display: "grid",
            gridTemplateColumns: gridTemplateColumns.join(" ")
          }
        }];
      };
      var getHeaderProps$1 = function getHeaderProps2(props, _ref2) {
        var column = _ref2.column;
        return [props, {
          id: "header-cell-" + column.id,
          style: {
            position: "sticky",
            gridColumn: "span " + column.totalVisibleHeaderCount
          }
        }];
      };
      var getRowProps = function getRowProps2(props, _ref3) {
        var row = _ref3.row;
        if (row.isExpanded) {
          return [props, {
            style: {
              gridColumn: "1 / " + (row.cells.length + 1)
            }
          }];
        }
        return [props, {}];
      };
      function reducer$c(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends({
            gridLayout: {
              columnWidths: {}
            }
          }, state);
        }
        if (action.type === actions.resetResize) {
          return _extends({}, state, {
            gridLayout: {
              columnWidths: {}
            }
          });
        }
        if (action.type === actions.columnStartResizing) {
          var columnId = action.columnId, headerIdWidths = action.headerIdWidths;
          var columnWidth = getElementWidth(columnId);
          if (columnWidth !== void 0) {
            var startWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends2;
              return _extends({}, acc, (_extends2 = {}, _extends2[column.id] = getElementWidth(column.id), _extends2));
            }, {});
            var minWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends3;
              return _extends({}, acc, (_extends3 = {}, _extends3[column.id] = column.minWidth, _extends3));
            }, {});
            var maxWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends4;
              return _extends({}, acc, (_extends4 = {}, _extends4[column.id] = column.maxWidth, _extends4));
            }, {});
            var headerIdGridWidths = headerIdWidths.map(function(_ref4) {
              var headerId = _ref4[0];
              return [headerId, getElementWidth(headerId)];
            });
            return _extends({}, state, {
              gridLayout: _extends({}, state.gridLayout, {
                startWidths,
                minWidths,
                maxWidths,
                headerIdGridWidths,
                columnWidth
              })
            });
          } else {
            return state;
          }
        }
        if (action.type === actions.columnResizing) {
          var clientX = action.clientX;
          var startX = state.columnResizing.startX;
          var _state$gridLayout = state.gridLayout, _columnWidth = _state$gridLayout.columnWidth, _minWidths = _state$gridLayout.minWidths, _maxWidths = _state$gridLayout.maxWidths, _state$gridLayout$hea = _state$gridLayout.headerIdGridWidths, _headerIdGridWidths = _state$gridLayout$hea === void 0 ? [] : _state$gridLayout$hea;
          var deltaX = clientX - startX;
          var percentageDeltaX = deltaX / _columnWidth;
          var newColumnWidths = {};
          _headerIdGridWidths.forEach(function(_ref5) {
            var headerId = _ref5[0], headerWidth = _ref5[1];
            newColumnWidths[headerId] = Math.min(Math.max(_minWidths[headerId], headerWidth + headerWidth * percentageDeltaX), _maxWidths[headerId]);
          });
          return _extends({}, state, {
            gridLayout: _extends({}, state.gridLayout, {
              columnWidths: _extends({}, state.gridLayout.columnWidths, {}, newColumnWidths)
            })
          });
        }
        if (action.type === actions.columnDoneResizing) {
          return _extends({}, state, {
            gridLayout: _extends({}, state.gridLayout, {
              startWidths: {},
              minWidths: {},
              maxWidths: {}
            })
          });
        }
      }
      function getElementWidth(columnId) {
        var _document$getElementB;
        var width = (_document$getElementB = document.getElementById("header-cell-" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;
        if (width !== void 0) {
          return width;
        }
      }
      exports2._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;
      exports2.actions = actions;
      exports2.defaultColumn = defaultColumn;
      exports2.defaultGroupByFn = defaultGroupByFn;
      exports2.defaultOrderByFn = defaultOrderByFn;
      exports2.defaultRenderer = defaultRenderer;
      exports2.emptyRenderer = emptyRenderer;
      exports2.ensurePluginOrder = ensurePluginOrder;
      exports2.flexRender = flexRender;
      exports2.functionalUpdate = functionalUpdate;
      exports2.loopHooks = loopHooks;
      exports2.makePropGetter = makePropGetter;
      exports2.makeRenderer = makeRenderer;
      exports2.reduceHooks = reduceHooks;
      exports2.safeUseLayoutEffect = safeUseLayoutEffect;
      exports2.useAbsoluteLayout = useAbsoluteLayout;
      exports2.useAsyncDebounce = useAsyncDebounce;
      exports2.useBlockLayout = useBlockLayout;
      exports2.useColumnOrder = useColumnOrder;
      exports2.useExpanded = useExpanded;
      exports2.useFilters = useFilters;
      exports2.useFlexLayout = useFlexLayout;
      exports2.useGetLatest = useGetLatest;
      exports2.useGlobalFilter = useGlobalFilter;
      exports2.useGridLayout = useGridLayout;
      exports2.useGroupBy = useGroupBy;
      exports2.useMountedLayoutEffect = useMountedLayoutEffect;
      exports2.usePagination = usePagination;
      exports2.useResizeColumns = useResizeColumns;
      exports2.useRowSelect = useRowSelect;
      exports2.useRowState = useRowState;
      exports2.useSortBy = useSortBy;
      exports2.useTable = useTable2;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/react-table/index.js
var require_react_table = __commonJS({
  "node_modules/react-table/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_table_development();
    }
  }
});

// node_modules/@daohaus/moloch-v3-macro-ui/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_utils = __toESM(require_src3());
var import_react = __toESM(require_react());
var import_ri = __toESM(require_ri());
var import_keychain_utils = __toESM(require_src2());
var import_react_table = __toESM(require_react_table());
var import_moloch_v3_legos = __toESM(require_src5());
var import_abis = __toESM(require_src());
init_tx_builder();
var import_moloch_v3_data = __toESM(require_src4());

// node_modules/react-icons/ai/index.esm.js
var import_lib = __toESM(require_cjs());
function AiOutlineCheck(props) {
  return (0, import_lib.GenIcon)({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 0 0-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" } }] })(props);
}

// node_modules/@daohaus/moloch-v3-macro-ui/index.js
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : {};
var check = function(it) {
  return it && it.Math == Math && it;
};
var global$d = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || function() {
  return this;
}() || commonjsGlobal || Function("return this")();
var objectGetOwnPropertyDescriptor = {};
var fails$g = function(exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};
var fails$f = fails$g;
var descriptors = !fails$f(function() {
  return Object.defineProperty({}, 1, { get: function() {
    return 7;
  } })[1] != 7;
});
var fails$e = fails$g;
var functionBindNative = !fails$e(function() {
  var test2 = function() {
  }.bind();
  return typeof test2 != "function" || test2.hasOwnProperty("prototype");
});
var NATIVE_BIND$1 = functionBindNative;
var call$7 = Function.prototype.call;
var functionCall = NATIVE_BIND$1 ? call$7.bind(call$7) : function() {
  return call$7.apply(call$7, arguments);
};
var objectPropertyIsEnumerable = {};
var $propertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
var NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable.call({ 1: 2 }, 1);
objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$2(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;
var createPropertyDescriptor$4 = function(bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value
  };
};
var NATIVE_BIND = functionBindNative;
var FunctionPrototype$1 = Function.prototype;
var call$6 = FunctionPrototype$1.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype$1.bind.bind(call$6, call$6);
var functionUncurryThis = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
  return function() {
    return call$6.apply(fn, arguments);
  };
};
var uncurryThis$h = functionUncurryThis;
var toString$7 = uncurryThis$h({}.toString);
var stringSlice$3 = uncurryThis$h("".slice);
var classofRaw$2 = function(it) {
  return stringSlice$3(toString$7(it), 8, -1);
};
var uncurryThis$g = functionUncurryThis;
var fails$d = fails$g;
var classof$4 = classofRaw$2;
var $Object$4 = Object;
var split = uncurryThis$g("".split);
var indexedObject = fails$d(function() {
  return !$Object$4("z").propertyIsEnumerable(0);
}) ? function(it) {
  return classof$4(it) == "String" ? split(it, "") : $Object$4(it);
} : $Object$4;
var isNullOrUndefined$2 = function(it) {
  return it === null || it === void 0;
};
var isNullOrUndefined$1 = isNullOrUndefined$2;
var $TypeError$9 = TypeError;
var requireObjectCoercible$5 = function(it) {
  if (isNullOrUndefined$1(it))
    throw $TypeError$9("Can't call method on " + it);
  return it;
};
var IndexedObject$2 = indexedObject;
var requireObjectCoercible$4 = requireObjectCoercible$5;
var toIndexedObject$5 = function(it) {
  return IndexedObject$2(requireObjectCoercible$4(it));
};
var documentAll$2 = typeof document == "object" && document.all;
var IS_HTMLDDA = typeof documentAll$2 == "undefined" && documentAll$2 !== void 0;
var documentAll_1 = {
  all: documentAll$2,
  IS_HTMLDDA
};
var $documentAll$1 = documentAll_1;
var documentAll$1 = $documentAll$1.all;
var isCallable$g = $documentAll$1.IS_HTMLDDA ? function(argument) {
  return typeof argument == "function" || argument === documentAll$1;
} : function(argument) {
  return typeof argument == "function";
};
var isCallable$f = isCallable$g;
var $documentAll = documentAll_1;
var documentAll = $documentAll.all;
var isObject$7 = $documentAll.IS_HTMLDDA ? function(it) {
  return typeof it == "object" ? it !== null : isCallable$f(it) || it === documentAll;
} : function(it) {
  return typeof it == "object" ? it !== null : isCallable$f(it);
};
var global$c = global$d;
var isCallable$e = isCallable$g;
var aFunction = function(argument) {
  return isCallable$e(argument) ? argument : void 0;
};
var getBuiltIn$3 = function(namespace, method) {
  return arguments.length < 2 ? aFunction(global$c[namespace]) : global$c[namespace] && global$c[namespace][method];
};
var uncurryThis$f = functionUncurryThis;
var objectIsPrototypeOf = uncurryThis$f({}.isPrototypeOf);
var engineUserAgent = typeof navigator != "undefined" && String(navigator.userAgent) || "";
var global$b = global$d;
var userAgent$2 = engineUserAgent;
var process$1 = global$b.process;
var Deno = global$b.Deno;
var versions = process$1 && process$1.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match;
var version;
if (v8) {
  match = v8.split(".");
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}
if (!version && userAgent$2) {
  match = userAgent$2.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent$2.match(/Chrome\/(\d+)/);
    if (match)
      version = +match[1];
  }
}
var engineV8Version = version;
var V8_VERSION = engineV8Version;
var fails$c = fails$g;
var global$a = global$d;
var $String$6 = global$a.String;
var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$c(function() {
  var symbol = Symbol();
  return !$String$6(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});
var NATIVE_SYMBOL$2 = symbolConstructorDetection;
var useSymbolAsUid = NATIVE_SYMBOL$2 && !Symbol.sham && typeof Symbol.iterator == "symbol";
var getBuiltIn$2 = getBuiltIn$3;
var isCallable$d = isCallable$g;
var isPrototypeOf$2 = objectIsPrototypeOf;
var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
var $Object$3 = Object;
var isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function(it) {
  return typeof it == "symbol";
} : function(it) {
  var $Symbol = getBuiltIn$2("Symbol");
  return isCallable$d($Symbol) && isPrototypeOf$2($Symbol.prototype, $Object$3(it));
};
var $String$5 = String;
var tryToString$2 = function(argument) {
  try {
    return $String$5(argument);
  } catch (error) {
    return "Object";
  }
};
var isCallable$c = isCallable$g;
var tryToString$1 = tryToString$2;
var $TypeError$8 = TypeError;
var aCallable$4 = function(argument) {
  if (isCallable$c(argument))
    return argument;
  throw $TypeError$8(tryToString$1(argument) + " is not a function");
};
var aCallable$3 = aCallable$4;
var isNullOrUndefined = isNullOrUndefined$2;
var getMethod$1 = function(V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? void 0 : aCallable$3(func);
};
var call$5 = functionCall;
var isCallable$b = isCallable$g;
var isObject$6 = isObject$7;
var $TypeError$7 = TypeError;
var ordinaryToPrimitive$1 = function(input, pref) {
  var fn, val;
  if (pref === "string" && isCallable$b(fn = input.toString) && !isObject$6(val = call$5(fn, input)))
    return val;
  if (isCallable$b(fn = input.valueOf) && !isObject$6(val = call$5(fn, input)))
    return val;
  if (pref !== "string" && isCallable$b(fn = input.toString) && !isObject$6(val = call$5(fn, input)))
    return val;
  throw $TypeError$7("Can't convert object to primitive value");
};
var shared$3 = { exports: {} };
var global$9 = global$d;
var defineProperty$6 = Object.defineProperty;
var defineGlobalProperty$3 = function(key, value) {
  try {
    defineProperty$6(global$9, key, { value, configurable: true, writable: true });
  } catch (error) {
    global$9[key] = value;
  }
  return value;
};
var global$8 = global$d;
var defineGlobalProperty$2 = defineGlobalProperty$3;
var SHARED = "__core-js_shared__";
var store$3 = global$8[SHARED] || defineGlobalProperty$2(SHARED, {});
var sharedStore = store$3;
var store$2 = sharedStore;
(shared$3.exports = function(key, value) {
  return store$2[key] || (store$2[key] = value !== void 0 ? value : {});
})("versions", []).push({
  version: "3.32.0",
  mode: "global",
  copyright: "\xA9 2014-2023 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.32.0/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var requireObjectCoercible$3 = requireObjectCoercible$5;
var $Object$2 = Object;
var toObject$5 = function(argument) {
  return $Object$2(requireObjectCoercible$3(argument));
};
var uncurryThis$e = functionUncurryThis;
var toObject$4 = toObject$5;
var hasOwnProperty = uncurryThis$e({}.hasOwnProperty);
var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject$4(it), key);
};
var uncurryThis$d = functionUncurryThis;
var id = 0;
var postfix = Math.random();
var toString$6 = uncurryThis$d(1 .toString);
var uid$2 = function(key) {
  return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString$6(++id + postfix, 36);
};
var global$7 = global$d;
var shared$2 = shared$3.exports;
var hasOwn$a = hasOwnProperty_1;
var uid$1 = uid$2;
var NATIVE_SYMBOL$1 = symbolConstructorDetection;
var USE_SYMBOL_AS_UID = useSymbolAsUid;
var Symbol$1 = global$7.Symbol;
var WellKnownSymbolsStore = shared$2("wks");
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1["for"] || Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;
var wellKnownSymbol$a = function(name) {
  if (!hasOwn$a(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL$1 && hasOwn$a(Symbol$1, name) ? Symbol$1[name] : createWellKnownSymbol("Symbol." + name);
  }
  return WellKnownSymbolsStore[name];
};
var call$4 = functionCall;
var isObject$5 = isObject$7;
var isSymbol$1 = isSymbol$2;
var getMethod = getMethod$1;
var ordinaryToPrimitive = ordinaryToPrimitive$1;
var wellKnownSymbol$9 = wellKnownSymbol$a;
var $TypeError$6 = TypeError;
var TO_PRIMITIVE = wellKnownSymbol$9("toPrimitive");
var toPrimitive$1 = function(input, pref) {
  if (!isObject$5(input) || isSymbol$1(input))
    return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === void 0)
      pref = "default";
    result = call$4(exoticToPrim, input, pref);
    if (!isObject$5(result) || isSymbol$1(result))
      return result;
    throw $TypeError$6("Can't convert object to primitive value");
  }
  if (pref === void 0)
    pref = "number";
  return ordinaryToPrimitive(input, pref);
};
var toPrimitive = toPrimitive$1;
var isSymbol = isSymbol$2;
var toPropertyKey$3 = function(argument) {
  var key = toPrimitive(argument, "string");
  return isSymbol(key) ? key : key + "";
};
var global$6 = global$d;
var isObject$4 = isObject$7;
var document$1 = global$6.document;
var EXISTS$1 = isObject$4(document$1) && isObject$4(document$1.createElement);
var documentCreateElement$2 = function(it) {
  return EXISTS$1 ? document$1.createElement(it) : {};
};
var DESCRIPTORS$a = descriptors;
var fails$b = fails$g;
var createElement = documentCreateElement$2;
var ie8DomDefine = !DESCRIPTORS$a && !fails$b(function() {
  return Object.defineProperty(createElement("div"), "a", {
    get: function() {
      return 7;
    }
  }).a != 7;
});
var DESCRIPTORS$9 = descriptors;
var call$3 = functionCall;
var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
var createPropertyDescriptor$3 = createPropertyDescriptor$4;
var toIndexedObject$4 = toIndexedObject$5;
var toPropertyKey$2 = toPropertyKey$3;
var hasOwn$9 = hasOwnProperty_1;
var IE8_DOM_DEFINE$1 = ie8DomDefine;
var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
objectGetOwnPropertyDescriptor.f = DESCRIPTORS$9 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject$4(O);
  P = toPropertyKey$2(P);
  if (IE8_DOM_DEFINE$1)
    try {
      return $getOwnPropertyDescriptor$1(O, P);
    } catch (error) {
    }
  if (hasOwn$9(O, P))
    return createPropertyDescriptor$3(!call$3(propertyIsEnumerableModule$1.f, O, P), O[P]);
};
var objectDefineProperty = {};
var DESCRIPTORS$8 = descriptors;
var fails$a = fails$g;
var v8PrototypeDefineBug = DESCRIPTORS$8 && fails$a(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: false
  }).prototype != 42;
});
var isObject$3 = isObject$7;
var $String$4 = String;
var $TypeError$5 = TypeError;
var anObject$7 = function(argument) {
  if (isObject$3(argument))
    return argument;
  throw $TypeError$5($String$4(argument) + " is not an object");
};
var DESCRIPTORS$7 = descriptors;
var IE8_DOM_DEFINE = ie8DomDefine;
var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
var anObject$6 = anObject$7;
var toPropertyKey$1 = toPropertyKey$3;
var $TypeError$4 = TypeError;
var $defineProperty = Object.defineProperty;
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = "enumerable";
var CONFIGURABLE$1 = "configurable";
var WRITABLE = "writable";
objectDefineProperty.f = DESCRIPTORS$7 ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
  anObject$6(O);
  P = toPropertyKey$1(P);
  anObject$6(Attributes);
  if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }
  return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty2(O, P, Attributes) {
  anObject$6(O);
  P = toPropertyKey$1(P);
  anObject$6(Attributes);
  if (IE8_DOM_DEFINE)
    try {
      return $defineProperty(O, P, Attributes);
    } catch (error) {
    }
  if ("get" in Attributes || "set" in Attributes)
    throw $TypeError$4("Accessors not supported");
  if ("value" in Attributes)
    O[P] = Attributes.value;
  return O;
};
var DESCRIPTORS$6 = descriptors;
var definePropertyModule$4 = objectDefineProperty;
var createPropertyDescriptor$2 = createPropertyDescriptor$4;
var createNonEnumerableProperty$4 = DESCRIPTORS$6 ? function(object, key, value) {
  return definePropertyModule$4.f(object, key, createPropertyDescriptor$2(1, value));
} : function(object, key, value) {
  object[key] = value;
  return object;
};
var makeBuiltIn$3 = { exports: {} };
var DESCRIPTORS$5 = descriptors;
var hasOwn$8 = hasOwnProperty_1;
var FunctionPrototype = Function.prototype;
var getDescriptor = DESCRIPTORS$5 && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn$8(FunctionPrototype, "name");
var PROPER = EXISTS && function something() {
}.name === "something";
var CONFIGURABLE = EXISTS && (!DESCRIPTORS$5 || DESCRIPTORS$5 && getDescriptor(FunctionPrototype, "name").configurable);
var functionName = {
  EXISTS,
  PROPER,
  CONFIGURABLE
};
var uncurryThis$c = functionUncurryThis;
var isCallable$a = isCallable$g;
var store$1 = sharedStore;
var functionToString = uncurryThis$c(Function.toString);
if (!isCallable$a(store$1.inspectSource)) {
  store$1.inspectSource = function(it) {
    return functionToString(it);
  };
}
var inspectSource$1 = store$1.inspectSource;
var global$5 = global$d;
var isCallable$9 = isCallable$g;
var WeakMap$1 = global$5.WeakMap;
var weakMapBasicDetection = isCallable$9(WeakMap$1) && /native code/.test(String(WeakMap$1));
var shared$1 = shared$3.exports;
var uid = uid$2;
var keys = shared$1("keys");
var sharedKey$3 = function(key) {
  return keys[key] || (keys[key] = uid(key));
};
var hiddenKeys$4 = {};
var NATIVE_WEAK_MAP = weakMapBasicDetection;
var global$4 = global$d;
var isObject$2 = isObject$7;
var createNonEnumerableProperty$3 = createNonEnumerableProperty$4;
var hasOwn$7 = hasOwnProperty_1;
var shared = sharedStore;
var sharedKey$2 = sharedKey$3;
var hiddenKeys$3 = hiddenKeys$4;
var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
var TypeError$1 = global$4.TypeError;
var WeakMap = global$4.WeakMap;
var set;
var get;
var has;
var enforce = function(it) {
  return has(it) ? get(it) : set(it, {});
};
var getterFor = function(TYPE) {
  return function(it) {
    var state;
    if (!isObject$2(it) || (state = get(it)).type !== TYPE) {
      throw TypeError$1("Incompatible receiver, " + TYPE + " required");
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP || shared.state) {
  store = shared.state || (shared.state = new WeakMap());
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  set = function(it, metadata) {
    if (store.has(it))
      throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function(it) {
    return store.get(it) || {};
  };
  has = function(it) {
    return store.has(it);
  };
} else {
  STATE = sharedKey$2("state");
  hiddenKeys$3[STATE] = true;
  set = function(it, metadata) {
    if (hasOwn$7(it, STATE))
      throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty$3(it, STATE, metadata);
    return metadata;
  };
  get = function(it) {
    return hasOwn$7(it, STATE) ? it[STATE] : {};
  };
  has = function(it) {
    return hasOwn$7(it, STATE);
  };
}
var store;
var STATE;
var internalState = {
  set,
  get,
  has,
  enforce,
  getterFor
};
var uncurryThis$b = functionUncurryThis;
var fails$9 = fails$g;
var isCallable$8 = isCallable$g;
var hasOwn$6 = hasOwnProperty_1;
var DESCRIPTORS$4 = descriptors;
var CONFIGURABLE_FUNCTION_NAME$1 = functionName.CONFIGURABLE;
var inspectSource = inspectSource$1;
var InternalStateModule$1 = internalState;
var enforceInternalState = InternalStateModule$1.enforce;
var getInternalState$1 = InternalStateModule$1.get;
var $String$3 = String;
var defineProperty$5 = Object.defineProperty;
var stringSlice$2 = uncurryThis$b("".slice);
var replace$1 = uncurryThis$b("".replace);
var join = uncurryThis$b([].join);
var CONFIGURABLE_LENGTH = DESCRIPTORS$4 && !fails$9(function() {
  return defineProperty$5(function() {
  }, "length", { value: 8 }).length !== 8;
});
var TEMPLATE = String(String).split("String");
var makeBuiltIn$2 = makeBuiltIn$3.exports = function(value, name, options) {
  if (stringSlice$2($String$3(name), 0, 7) === "Symbol(") {
    name = "[" + replace$1($String$3(name), /^Symbol\(([^)]*)\)/, "$1") + "]";
  }
  if (options && options.getter)
    name = "get " + name;
  if (options && options.setter)
    name = "set " + name;
  if (!hasOwn$6(value, "name") || CONFIGURABLE_FUNCTION_NAME$1 && value.name !== name) {
    if (DESCRIPTORS$4)
      defineProperty$5(value, "name", { value: name, configurable: true });
    else
      value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn$6(options, "arity") && value.length !== options.arity) {
    defineProperty$5(value, "length", { value: options.arity });
  }
  try {
    if (options && hasOwn$6(options, "constructor") && options.constructor) {
      if (DESCRIPTORS$4)
        defineProperty$5(value, "prototype", { writable: false });
    } else if (value.prototype)
      value.prototype = void 0;
  } catch (error) {
  }
  var state = enforceInternalState(value);
  if (!hasOwn$6(state, "source")) {
    state.source = join(TEMPLATE, typeof name == "string" ? name : "");
  }
  return value;
};
Function.prototype.toString = makeBuiltIn$2(function toString() {
  return isCallable$8(this) && getInternalState$1(this).source || inspectSource(this);
}, "toString");
var isCallable$7 = isCallable$g;
var definePropertyModule$3 = objectDefineProperty;
var makeBuiltIn$1 = makeBuiltIn$3.exports;
var defineGlobalProperty$1 = defineGlobalProperty$3;
var defineBuiltIn$4 = function(O, key, value, options) {
  if (!options)
    options = {};
  var simple = options.enumerable;
  var name = options.name !== void 0 ? options.name : key;
  if (isCallable$7(value))
    makeBuiltIn$1(value, name, options);
  if (options.global) {
    if (simple)
      O[key] = value;
    else
      defineGlobalProperty$1(key, value);
  } else {
    try {
      if (!options.unsafe)
        delete O[key];
      else if (O[key])
        simple = true;
    } catch (error) {
    }
    if (simple)
      O[key] = value;
    else
      definePropertyModule$3.f(O, key, {
        value,
        enumerable: false,
        configurable: !options.nonConfigurable,
        writable: !options.nonWritable
      });
  }
  return O;
};
var objectGetOwnPropertyNames = {};
var ceil = Math.ceil;
var floor$2 = Math.floor;
var mathTrunc = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor$2 : ceil)(n);
};
var trunc2 = mathTrunc;
var toIntegerOrInfinity$4 = function(argument) {
  var number = +argument;
  return number !== number || number === 0 ? 0 : trunc2(number);
};
var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;
var max$1 = Math.max;
var min$2 = Math.min;
var toAbsoluteIndex$2 = function(index, length) {
  var integer = toIntegerOrInfinity$3(index);
  return integer < 0 ? max$1(integer + length, 0) : min$2(integer, length);
};
var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;
var min$1 = Math.min;
var toLength$2 = function(argument) {
  return argument > 0 ? min$1(toIntegerOrInfinity$2(argument), 9007199254740991) : 0;
};
var toLength$1 = toLength$2;
var lengthOfArrayLike$4 = function(obj) {
  return toLength$1(obj.length);
};
var toIndexedObject$3 = toIndexedObject$5;
var toAbsoluteIndex$1 = toAbsoluteIndex$2;
var lengthOfArrayLike$3 = lengthOfArrayLike$4;
var createMethod$1 = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIndexedObject$3($this);
    var length = lengthOfArrayLike$3(O);
    var index = toAbsoluteIndex$1(fromIndex, length);
    var value;
    if (IS_INCLUDES && el != el)
      while (length > index) {
        value = O[index++];
        if (value != value)
          return true;
      }
    else
      for (; length > index; index++) {
        if ((IS_INCLUDES || index in O) && O[index] === el)
          return IS_INCLUDES || index || 0;
      }
    return !IS_INCLUDES && -1;
  };
};
var arrayIncludes = {
  includes: createMethod$1(true),
  indexOf: createMethod$1(false)
};
var uncurryThis$a = functionUncurryThis;
var hasOwn$5 = hasOwnProperty_1;
var toIndexedObject$2 = toIndexedObject$5;
var indexOf = arrayIncludes.indexOf;
var hiddenKeys$2 = hiddenKeys$4;
var push$1 = uncurryThis$a([].push);
var objectKeysInternal = function(object, names) {
  var O = toIndexedObject$2(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O)
    !hasOwn$5(hiddenKeys$2, key) && hasOwn$5(O, key) && push$1(result, key);
  while (names.length > i)
    if (hasOwn$5(O, key = names[i++])) {
      ~indexOf(result, key) || push$1(result, key);
    }
  return result;
};
var enumBugKeys$3 = [
  "constructor",
  "hasOwnProperty",
  "isPrototypeOf",
  "propertyIsEnumerable",
  "toLocaleString",
  "toString",
  "valueOf"
];
var internalObjectKeys$1 = objectKeysInternal;
var enumBugKeys$2 = enumBugKeys$3;
var hiddenKeys$1 = enumBugKeys$2.concat("length", "prototype");
objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys$1(O, hiddenKeys$1);
};
var objectGetOwnPropertySymbols = {};
objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
var getBuiltIn$1 = getBuiltIn$3;
var uncurryThis$9 = functionUncurryThis;
var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
var anObject$5 = anObject$7;
var concat$1 = uncurryThis$9([].concat);
var ownKeys$1 = getBuiltIn$1("Reflect", "ownKeys") || function ownKeys(it) {
  var keys3 = getOwnPropertyNamesModule.f(anObject$5(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
  return getOwnPropertySymbols ? concat$1(keys3, getOwnPropertySymbols(it)) : keys3;
};
var hasOwn$4 = hasOwnProperty_1;
var ownKeys2 = ownKeys$1;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var definePropertyModule$2 = objectDefineProperty;
var copyConstructorProperties$2 = function(target, source, exceptions) {
  var keys3 = ownKeys2(source);
  var defineProperty4 = definePropertyModule$2.f;
  var getOwnPropertyDescriptor3 = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys3.length; i++) {
    var key = keys3[i];
    if (!hasOwn$4(target, key) && !(exceptions && hasOwn$4(exceptions, key))) {
      defineProperty4(target, key, getOwnPropertyDescriptor3(source, key));
    }
  }
};
var fails$8 = fails$g;
var isCallable$6 = isCallable$g;
var replacement = /#|\.prototype\./;
var isForced$1 = function(feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true : value == NATIVE ? false : isCallable$6(detection) ? fails$8(detection) : !!detection;
};
var normalize = isForced$1.normalize = function(string) {
  return String(string).replace(replacement, ".").toLowerCase();
};
var data = isForced$1.data = {};
var NATIVE = isForced$1.NATIVE = "N";
var POLYFILL = isForced$1.POLYFILL = "P";
var isForced_1 = isForced$1;
var global$3 = global$d;
var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
var createNonEnumerableProperty$2 = createNonEnumerableProperty$4;
var defineBuiltIn$3 = defineBuiltIn$4;
var defineGlobalProperty = defineGlobalProperty$3;
var copyConstructorProperties$1 = copyConstructorProperties$2;
var isForced = isForced_1;
var _export = function(options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED2, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global$3;
  } else if (STATIC) {
    target = global$3[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global$3[TARGET] || {}).prototype;
  }
  if (target)
    for (key in source) {
      sourceProperty = source[key];
      if (options.dontCallGetSet) {
        descriptor = getOwnPropertyDescriptor$1(target, key);
        targetProperty = descriptor && descriptor.value;
      } else
        targetProperty = target[key];
      FORCED2 = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
      if (!FORCED2 && targetProperty !== void 0) {
        if (typeof sourceProperty == typeof targetProperty)
          continue;
        copyConstructorProperties$1(sourceProperty, targetProperty);
      }
      if (options.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty$2(sourceProperty, "sham", true);
      }
      defineBuiltIn$3(target, key, sourceProperty, options);
    }
};
var internalObjectKeys = objectKeysInternal;
var enumBugKeys$1 = enumBugKeys$3;
var objectKeys$2 = Object.keys || function keys2(O) {
  return internalObjectKeys(O, enumBugKeys$1);
};
var DESCRIPTORS$3 = descriptors;
var uncurryThis$8 = functionUncurryThis;
var call$2 = functionCall;
var fails$7 = fails$g;
var objectKeys$1 = objectKeys$2;
var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
var propertyIsEnumerableModule = objectPropertyIsEnumerable;
var toObject$3 = toObject$5;
var IndexedObject$1 = indexedObject;
var $assign = Object.assign;
var defineProperty$4 = Object.defineProperty;
var concat = uncurryThis$8([].concat);
var objectAssign = !$assign || fails$7(function() {
  if (DESCRIPTORS$3 && $assign({ b: 1 }, $assign(defineProperty$4({}, "a", {
    enumerable: true,
    get: function() {
      defineProperty$4(this, "b", {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1)
    return true;
  var A = {};
  var B = {};
  var symbol = Symbol();
  var alphabet = "abcdefghijklmnopqrst";
  A[symbol] = 7;
  alphabet.split("").forEach(function(chr) {
    B[chr] = chr;
  });
  return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join("") != alphabet;
}) ? function assign(target, source) {
  var T = toObject$3(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable2 = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject$1(arguments[index++]);
    var keys3 = getOwnPropertySymbols ? concat(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
    var length = keys3.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys3[j++];
      if (!DESCRIPTORS$3 || call$2(propertyIsEnumerable2, S, key))
        T[key] = S[key];
    }
  }
  return T;
} : $assign;
var $$8 = _export;
var assign2 = objectAssign;
$$8({ target: "Object", stat: true, arity: 2, forced: Object.assign !== assign2 }, {
  assign: assign2
});
var wellKnownSymbol$8 = wellKnownSymbol$a;
var TO_STRING_TAG$3 = wellKnownSymbol$8("toStringTag");
var test$1 = {};
test$1[TO_STRING_TAG$3] = "z";
var toStringTagSupport = String(test$1) === "[object z]";
var TO_STRING_TAG_SUPPORT = toStringTagSupport;
var isCallable$5 = isCallable$g;
var classofRaw$1 = classofRaw$2;
var wellKnownSymbol$7 = wellKnownSymbol$a;
var TO_STRING_TAG$2 = wellKnownSymbol$7("toStringTag");
var $Object$1 = Object;
var CORRECT_ARGUMENTS = classofRaw$1(function() {
  return arguments;
}()) == "Arguments";
var tryGet = function(it, key) {
  try {
    return it[key];
  } catch (error) {
  }
};
var classof$3 = TO_STRING_TAG_SUPPORT ? classofRaw$1 : function(it) {
  var O, tag, result;
  return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object$1(it), TO_STRING_TAG$2)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw$1(O) : (result = classofRaw$1(O)) == "Object" && isCallable$5(O.callee) ? "Arguments" : result;
};
var classof$2 = classof$3;
var $String$2 = String;
var toString$5 = function(argument) {
  if (classof$2(argument) === "Symbol")
    throw TypeError("Cannot convert a Symbol value to a string");
  return $String$2(argument);
};
var makeBuiltIn = makeBuiltIn$3.exports;
var defineProperty$3 = objectDefineProperty;
var defineBuiltInAccessor$1 = function(target, name, descriptor) {
  if (descriptor.get)
    makeBuiltIn(descriptor.get, name, { getter: true });
  if (descriptor.set)
    makeBuiltIn(descriptor.set, name, { setter: true });
  return defineProperty$3.f(target, name, descriptor);
};
var $$7 = _export;
var DESCRIPTORS$2 = descriptors;
var global$2 = global$d;
var uncurryThis$7 = functionUncurryThis;
var hasOwn$3 = hasOwnProperty_1;
var isCallable$4 = isCallable$g;
var isPrototypeOf$1 = objectIsPrototypeOf;
var toString$4 = toString$5;
var defineBuiltInAccessor = defineBuiltInAccessor$1;
var copyConstructorProperties = copyConstructorProperties$2;
var NativeSymbol = global$2.Symbol;
var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;
if (DESCRIPTORS$2 && isCallable$4(NativeSymbol) && (!("description" in SymbolPrototype) || NativeSymbol().description !== void 0)) {
  EmptyStringDescriptionStore = {};
  SymbolWrapper = function Symbol2() {
    var description = arguments.length < 1 || arguments[0] === void 0 ? void 0 : toString$4(arguments[0]);
    var result = isPrototypeOf$1(SymbolPrototype, this) ? new NativeSymbol(description) : description === void 0 ? NativeSymbol() : NativeSymbol(description);
    if (description === "")
      EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  SymbolWrapper.prototype = SymbolPrototype;
  SymbolPrototype.constructor = SymbolWrapper;
  NATIVE_SYMBOL = String(NativeSymbol("test")) == "Symbol(test)";
  thisSymbolValue = uncurryThis$7(SymbolPrototype.valueOf);
  symbolDescriptiveString = uncurryThis$7(SymbolPrototype.toString);
  regexp = /^Symbol\((.*)\)[^)]+$/;
  replace = uncurryThis$7("".replace);
  stringSlice$1 = uncurryThis$7("".slice);
  defineBuiltInAccessor(SymbolPrototype, "description", {
    configurable: true,
    get: function description() {
      var symbol = thisSymbolValue(this);
      if (hasOwn$3(EmptyStringDescriptionStore, symbol))
        return "";
      var string = symbolDescriptiveString(symbol);
      var desc = NATIVE_SYMBOL ? stringSlice$1(string, 7, -1) : replace(string, regexp, "$1");
      return desc === "" ? void 0 : desc;
    }
  });
  $$7({ global: true, constructor: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}
var EmptyStringDescriptionStore;
var SymbolWrapper;
var NATIVE_SYMBOL;
var thisSymbolValue;
var symbolDescriptiveString;
var regexp;
var replace;
var stringSlice$1;
var _$r = (t) => t;
var _t$r;
var _t2$h;
var _t3$d;
var _t4$9;
var _t5$8;
var _t6$8;
var _t7$7;
var OverviewCard = st(Card)(_t$r || (_t$r = _$r`
  width: 64rem;
  padding: 2rem;
  border: none;
  margin-bottom: 3.4rem;
  @media ${0} {
    max-width: 100%;
    min-width: 0;
  }
`), widthQuery.md);
var TokensCard = st(OverviewCard)(_t2$h || (_t2$h = _$r`
  padding: 2.4rem;
`));
var DataGrid$3 = st.div(_t3$d || (_t3$d = _$r`
  display: flex;
  width: 100%;
  justify-content: space-between;
  flex-wrap: wrap;

  div {
    padding: 2rem 0;
  }
`));
var DaoProfileContainer = st.div(_t4$9 || (_t4$9 = _$r`
  width: 100%;
  border-radius: ${0};
  border: 1px ${0} solid;
  background-color: ${0};
  padding: 2.2rem;
  .avatar {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    gap: 1.7rem;
    margin-bottom: 2.7rem;
    p {
      margin-right: auto;
    }
    @media ${0} {
      flex-direction: column;
    }
  }
`), ({
  theme
}) => theme.card.radius, ({
  theme
}) => theme.secondary.step5, ({
  theme
}) => theme.secondary.step3, widthQuery.xs);
var DaoProfileAvatar$1 = st(ProfileAvatar)(_t5$8 || (_t5$8 = _$r`
  width: 18rem;
  height: 18rem;
`));
var MissingProfileCard = st(Card)(_t6$8 || (_t6$8 = _$r`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2.3rem;
`));
var TagListContainer = st.div(_t7$7 || (_t7$7 = _$r`
  margin-top: 2.8rem;
`));
var missingDaoProfileData = (dao) => {
  if (!(dao === null || dao === void 0 ? void 0 : dao.profile) || !dao.profile.length)
    return true;
  return dao.description === "" && dao.avatarImg === "";
};
var daoProfileHasLinks = (links) => {
  return links === null || links === void 0 ? void 0 : links.some((link) => link.url);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var _$q = (t) => t;
var _t$q;
var StyledRouterLink$4 = st(Link)(_t$q || (_t$q = _$q`
  text-decoration: none;
  color: unset;
  &:hover {
    text-decoration: none;
  }
`));
var ButtonRouterLink = (_a) => {
  var {
    to,
    target,
    disabled,
    children,
    linkType,
    hideIcon,
    rel
  } = _a, buttonProps = __rest(_a, ["to", "target", "disabled", "children", "linkType", "hideIcon", "rel"]);
  return (0, import_jsx_runtime.jsx)(StyledRouterLink$4, Object.assign({
    to,
    target,
    className: "button-link",
    rel
  }, {
    children: (0, import_jsx_runtime.jsx)(Button, Object.assign({
      disabled
    }, buttonProps, {
      children
    }))
  }));
};
var _$p = (t) => t;
var _t$p;
var DataGrid$2 = st.div(_t$p || (_t$p = _$p`
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  align-content: space-between;
  div {
    padding: 2rem 0;
    width: 19.7rem;

    @media ${0} {
      min-width: 100%;
    }
  }
`), widthQuery.sm);
var _$o = (t) => t;
var _t$o;
var _t2$g;
var _t3$c;
var isPredefinedSettingsLink = (link) => {
  return link.label && ["Github", "Discord", "Telegram", "Twitter", "Blog", "Web"].indexOf(link.label) >= 0;
};
var LinkContainer$1 = st.div(_t$o || (_t$o = _$o`
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  margin-top: 1.5rem;
`));
var LinkContents = st.div(_t2$g || (_t2$g = _$o`
  display: flex;
  align-items: self-start;
  gap: 0.5rem;
`));
var IconLinkContainer = st.div(_t3$c || (_t3$c = _$o`
  display: flex;
  gap: 1.5rem;
  margin: 1.5rem 0;
`));
var MetadataLinkIcons = {
  Github: (0, import_jsx_runtime.jsx)(import_ri.RiGithubFill, {
    size: "2.5rem"
  }),
  Discord: (0, import_jsx_runtime.jsx)(import_ri.RiDiscordFill, {
    size: "2.5rem"
  }),
  Twitter: (0, import_jsx_runtime.jsx)(import_ri.RiTwitterFill, {
    size: "2.5rem"
  }),
  Telegram: (0, import_jsx_runtime.jsx)(import_ri.RiTelegramFill, {
    size: "2.5rem"
  }),
  Blog: (0, import_jsx_runtime.jsx)(import_ri.RiArticleLine, {
    size: "2.5rem"
  }),
  default: (0, import_jsx_runtime.jsx)(import_ri.RiLinksFill, {
    size: "2.5rem"
  })
};
var SettingsLinkList = ({
  links
}) => {
  if (!links) {
    return null;
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)(ParMd, {
      children: "Links"
    }), (0, import_jsx_runtime.jsx)(LinkContainer$1, {
      children: links.filter((link) => link.url).map((link, i) => (0, import_jsx_runtime.jsx)(Link$1, Object.assign({
        showExternalIcon: false,
        href: link.url
      }, {
        children: (0, import_jsx_runtime.jsxs)(LinkContents, {
          children: [link.label && MetadataLinkIcons[link.label] || MetadataLinkIcons["default"], (0, import_jsx_runtime.jsx)(DataMd, {
            children: (0, import_utils.charLimit)(link.url, 28)
          })]
        })
      }), i))
    })]
  });
};
var OverviewIconLinkList = ({
  links
}) => {
  if (!links) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(IconLinkContainer, {
    children: links.filter((link) => link.url && isPredefinedSettingsLink(link)).map((link, i) => (0, import_jsx_runtime.jsx)(Link$1, Object.assign({
      showExternalIcon: false,
      href: link.url
    }, {
      children: (0, import_jsx_runtime.jsx)(LinkContents, {
        children: link.label && MetadataLinkIcons[link.label] || MetadataLinkIcons["default"]
      })
    }), i))
  });
};
var OverviewLinkList = ({
  links
}) => {
  if (!links) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(LinkContainer$1, {
    children: links.filter((link) => link.url && !isPredefinedSettingsLink(link)).map((link, i) => (0, import_jsx_runtime.jsx)(Link$1, Object.assign({
      showExternalIcon: false,
      href: link.url
    }, {
      children: (0, import_jsx_runtime.jsxs)(LinkContents, {
        children: [link.label && MetadataLinkIcons[link.label] || MetadataLinkIcons["default"], (0, import_jsx_runtime.jsx)(DataMd, {
          children: (0, import_utils.charLimit)(link.label, 45)
        })]
      })
    }), i))
  });
};
var _$n = (t) => t;
var _t$n;
var _t2$f;
st.div(_t$n || (_t$n = _$n`
  margin-top: 2.8rem;
`));
var TagContainer = st.div(_t2$f || (_t2$f = _$n`
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  gap: 1rem;
`));
var tagColors = ["violet", "green", "blue", "pink", "yellow", "red"];
var TagList = ({
  tags
}) => {
  return (0, import_jsx_runtime.jsx)(TagContainer, {
    children: tags.filter(Boolean).map((tag) => (0, import_jsx_runtime.jsx)(Tag, Object.assign({
      tagColor: tagColors[tagColors.length * Math.random() | 0]
    }, {
      children: tag
    }), tag))
  });
};
var DaoProfile = ({
  dao
}) => {
  const {
    daoChain,
    daoId
  } = useCurrentDao();
  const missingProfile = (0, import_react.useMemo)(() => {
    if (!missingDaoProfileData(dao))
      return null;
    return (0, import_jsx_runtime.jsxs)(MissingProfileCard, {
      children: [(0, import_jsx_runtime.jsx)(ParXs, {
        children: "(\uFF89\xB4\u30EE`)\uFF89*: \uFF65\uFF9F Add some sparkle with a DAO avatar and description!"
      }), (0, import_jsx_runtime.jsx)(Link$1, Object.assign({
        href: `/molochv3/${daoChain}/${daoId}/settings`
      }, {
        children: (0, import_jsx_runtime.jsx)(Button, {
          children: "Go To Settings"
        })
      }))]
    });
  }, [dao, daoChain, daoId]);
  return (0, import_jsx_runtime.jsxs)(DaoProfileContainer, {
    children: [(0, import_jsx_runtime.jsxs)("div", Object.assign({
      className: "avatar"
    }, {
      children: [(0, import_jsx_runtime.jsx)(DaoProfileAvatar$1, {
        address: dao.id,
        image: dao.avatarImg
      }), (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(H4, {
          children: (0, import_utils.charLimit)(dao.name, 21)
        }), (0, import_jsx_runtime.jsx)(AddressDisplay, {
          address: dao.id,
          truncate: true,
          copy: true,
          explorerNetworkId: daoChain
        })]
      })]
    })), missingProfile || (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(ParMd, {
        children: dao.description
      }), daoProfileHasLinks(dao.links) && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
        children: [(0, import_jsx_runtime.jsx)(OverviewLinkList, {
          links: dao.links
        }), (0, import_jsx_runtime.jsx)(OverviewIconLinkList, {
          links: dao.links
        })]
      }), (0, import_jsx_runtime.jsx)(TagListContainer, {
        children: dao.tags && (0, import_jsx_runtime.jsx)(TagList, {
          tags: dao.tags
        })
      })]
    })]
  });
};
var DaoOverview = ({
  daoChain,
  daoId,
  graphApiKeys
}) => {
  var _a;
  const {
    dao
  } = useDaoData({
    daoChain,
    daoId,
    graphApiKeys
  });
  if (!dao)
    return null;
  return (0, import_jsx_runtime.jsx)(SingleColumnLayout, {
    children: dao && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsxs)(OverviewCard, {
        children: [(0, import_jsx_runtime.jsx)(DaoProfile, {
          dao
        }), (0, import_jsx_runtime.jsxs)(DataGrid$3, {
          children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Total in Safes",
            data: (0, import_utils.formatValueTo)({
              value: dao.fiatTotal,
              decimals: 2,
              format: "currencyShort"
            })
          }), (0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Members",
            data: dao.activeMemberCount
          }), (0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Proposals",
            data: dao.proposalCount
          }), (0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Active Proposals",
            data: ((_a = dao.activeProposals) === null || _a === void 0 ? void 0 : _a.length) || "0"
          })]
        })]
      }), (0, import_jsx_runtime.jsxs)(TokensCard, {
        children: [(0, import_jsx_runtime.jsx)(H4, {
          children: "Tokens"
        }), (0, import_jsx_runtime.jsxs)(DataGrid$3, {
          children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Voting",
            data: (0, import_utils.charLimit)(dao.shareTokenName, 20)
          }), (0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Supply",
            data: (0, import_utils.formatValueTo)({
              value: (0, import_utils.fromWei)(dao.totalShares),
              decimals: 2,
              format: "numberShort"
            })
          })]
        }), (0, import_jsx_runtime.jsxs)(DataGrid$3, {
          children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Non-Voting",
            data: (0, import_utils.charLimit)((0, import_utils.lowerCaseLootToken)(dao.lootTokenName), 20)
          }), (0, import_jsx_runtime.jsx)(DataIndicator, {
            label: "Supply",
            data: (0, import_utils.formatValueTo)({
              value: (0, import_utils.fromWei)(dao.totalLoot),
              decimals: 2,
              format: "numberShort"
            })
          })]
        })]
      })]
    })
  });
};
var _$m = (t) => t;
var _t$m;
var _t2$e;
var _t3$b;
var _t4$8;
var _t5$7;
var _t6$7;
var _t7$6;
var _t8$4;
var _t9$3;
var _t10$3;
var _t11$3;
var _t12$3;
var _t13$3;
var _t14$1;
var SettingsContainer = st(Card)(_t$m || (_t$m = _$m`
  width: 110rem;
  padding: 3rem;
  border: none;
  margin-bottom: 3rem;
  @media ${0} {
    max-width: 100%;
    min-width: 0;
  }
`), widthQuery.lg);
var MetaCardHeader = st.div(_t2$e || (_t2$e = _$m`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: wrap;
  margin-bottom: 3rem;
`));
var MetaContent = st.div(_t3$b || (_t3$b = _$m`
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  flex-wrap: wrap;
  gap: 3.4rem;
  .icon {
    margin-top: 1.2rem;
  }
  .section-middle {
    width: 38rem;
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }
  .links {
    margin: 1.2rem 0;
  }
`));
var DaoProfileAvatar = st(ProfileAvatar)(_t4$8 || (_t4$8 = _$m`
  width: 8.9rem;
  height: 8.9rem;
`));
var WarningContainer$1 = st(Card)(_t5$7 || (_t5$7 = _$m`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  width: 100%;
  padding: 1rem 2rem;
  margin-top: 3rem;
  background-color: ${0};
  border-color: ${0};
  .title {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
  }
`), ({
  theme
}) => theme.warning.step3, ({
  theme
}) => theme.warning.step7);
var GovernanceContainer = st.div(_t6$7 || (_t6$7 = _$m`
  h4 {
    margin-top: 4rem;
  }
`));
var GovernanceCardHeader = st.div(_t7$6 || (_t7$6 = _$m`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: wrap;
  margin-bottom: 3rem;
`));
var TokensHeader = st.div(_t8$4 || (_t8$4 = _$m`
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  flex-wrap: wrap;
`));
var DataGrid$1 = st.div(_t9$3 || (_t9$3 = _$m`
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  align-content: space-between;
  div {
    margin-top: 3rem;
    width: 34rem;

    @media ${0} {
      min-width: 100%;
    }
  }
`), widthQuery.sm);
var TokenDataGrid = st(DataGrid$1)(_t10$3 || (_t10$3 = _$m`
  div {
    width: 22.7rem;
  }
`));
var StyledLink = st.a(_t11$3 || (_t11$3 = _$m`
  text-decoration: none;
  color: ${0};
  &:hover {
    text-decoration: none;
  }
`), ({
  theme
}) => theme.primary.step10);
var ShamanContainer = st.div(_t12$3 || (_t12$3 = _$m`
  .tokens {
    margin-top: 3rem;
  }
  h4 {
    margin-top: 4rem;
  }
`));
var ShamanCardHeader = st.div(_t13$3 || (_t13$3 = _$m`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: wrap;
  margin-bottom: 3rem;
`));
var ShamanListContainer = st.div(_t14$1 || (_t14$1 = _$m`
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  align-content: space-between;
  div {
    margin-top: 3rem;

    @media ${0} {
      min-width: 100%;
    }
  }
  .contract {
    width: 60%;
  }
  .manage {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    width: 40%;
  }
`), widthQuery.sm);
var ContractSettings = ({
  dao,
  daoChain
}) => {
  const isMobile = useBreakpoint(widthQuery.sm);
  return (0, import_jsx_runtime.jsxs)(SettingsContainer, {
    children: [(0, import_jsx_runtime.jsx)(MetaCardHeader, {
      children: (0, import_jsx_runtime.jsx)(H3, {
        children: "Contracts"
      })
    }), (0, import_jsx_runtime.jsxs)(MetaContent, {
      children: [(0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParSm, {
          children: "Moloch v3"
        }), (0, import_jsx_runtime.jsx)(AddressDisplay, {
          address: dao.id,
          copy: true,
          explorerNetworkId: daoChain,
          truncate: isMobile
        })]
      }), (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParSm, {
          children: "Gnosis Safe (Treasury)"
        }), (0, import_jsx_runtime.jsx)(AddressDisplay, {
          address: dao.safeAddress,
          copy: true,
          truncate: isMobile,
          explorerNetworkId: daoChain
        })]
      }), (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParSm, {
          children: "Voting Token"
        }), (0, import_jsx_runtime.jsx)(AddressDisplay, {
          address: dao.sharesAddress,
          copy: true,
          truncate: isMobile,
          explorerNetworkId: daoChain
        })]
      }), (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParSm, {
          children: "Non-Voting Token"
        }), (0, import_jsx_runtime.jsx)(AddressDisplay, {
          address: dao.lootAddress,
          copy: true,
          truncate: isMobile,
          explorerNetworkId: daoChain
        })]
      })]
    })]
  });
};
var MetadataSettings = ({
  dao,
  daoChain,
  includeLinks
}) => {
  const {
    address
  } = useDHConnect();
  const {
    member
  } = useDaoMember({
    daoId: dao.id,
    daoChain,
    memberAddress: address
  });
  const enableActions = (0, import_react.useMemo)(() => {
    return member && Number(member.shares) > 0;
  }, [member]);
  const isMobile = useBreakpoint(widthQuery.sm);
  return (0, import_jsx_runtime.jsxs)(SettingsContainer, {
    children: [(0, import_jsx_runtime.jsxs)(MetaCardHeader, {
      children: [(0, import_jsx_runtime.jsx)(H3, {
        children: "Metadata"
      }), includeLinks && enableActions && (0, import_jsx_runtime.jsx)(ButtonRouterLink, Object.assign({
        color: "secondary",
        to: `/molochv3/${daoChain}/${dao.id}/settings/update`
      }, {
        children: "Update Metadata"
      }))]
    }), (0, import_jsx_runtime.jsxs)(MetaContent, {
      children: [(0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParMd, {
          children: "Icon"
        }), (0, import_jsx_runtime.jsx)("div", Object.assign({
          className: "icon"
        }, {
          children: (0, import_jsx_runtime.jsx)(DaoProfileAvatar, {
            address: dao.id,
            image: dao.avatarImg
          })
        }))]
      }), (0, import_jsx_runtime.jsxs)("div", Object.assign({
        className: "section-middle"
      }, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "DAO Name",
          data: (0, import_utils.charLimit)(dao.name, 21),
          size: "sm"
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Summon Date",
          data: (0, import_utils.formatLongDateFromSeconds)(dao.createdAt),
          size: "sm"
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Description",
          data: dao.description,
          size: "sm"
        }), dao.tags && (0, import_jsx_runtime.jsx)("div", Object.assign({
          className: "tags"
        }, {
          children: (0, import_jsx_runtime.jsx)(TagList, {
            tags: dao.tags
          })
        }))]
      })), (0, import_jsx_runtime.jsxs)("div", Object.assign({
        className: "links"
      }, {
        children: [daoProfileHasLinks(dao.links) && (0, import_jsx_runtime.jsx)(SettingsLinkList, {
          links: dao.links
        }), dao.forwarder !== import_utils.ZERO_ADDRESS && (0, import_jsx_runtime.jsxs)(WarningContainer$1, {
          children: [(0, import_jsx_runtime.jsxs)("div", Object.assign({
            className: "title"
          }, {
            children: [(0, import_jsx_runtime.jsx)(ParMd, {
              children: "Forwarder Address"
            }), (0, import_jsx_runtime.jsx)(Tooltip, {
              content: "Forwarder Address is the contract used to sign and send transactions without the original sender paying for gas."
            })]
          })), (0, import_jsx_runtime.jsx)(AddressDisplay, {
            address: dao.sharesAddress,
            copy: true,
            truncate: isMobile,
            explorerNetworkId: daoChain
          })]
        })]
      }))]
    })]
  });
};
var GovernanceSettings = ({
  dao,
  daoChain,
  includeLinks: _includeLinks = false
}) => {
  const networkData = (0, import_react.useMemo)(() => {
    if (!daoChain)
      return null;
    return (0, import_keychain_utils.getNetwork)(daoChain);
  }, [daoChain]);
  const defaultValues = (0, import_react.useMemo)(() => {
    if (!dao)
      return null;
    return {
      votingPeriod: dao.votingPeriod,
      votingPeriodUnits: "seconds",
      gracePeriodUnits: "seconds",
      gracePeriod: dao.gracePeriod,
      quorum: dao.quorumPercent,
      minRetention: dao.minRetentionPercent,
      sponsorThreshold: (0, import_utils.toWholeUnits)(dao.sponsorThreshold),
      newOffering: (0, import_utils.toWholeUnits)(dao.proposalOffering),
      vStake: dao.sharesPaused,
      nvStake: dao.lootPaused
    };
  }, [dao]);
  return (0, import_jsx_runtime.jsx)(SettingsContainer, {
    children: (0, import_jsx_runtime.jsxs)(GovernanceContainer, {
      children: [(0, import_jsx_runtime.jsxs)(GovernanceCardHeader, {
        children: [(0, import_jsx_runtime.jsx)(H3, {
          children: "Governance Settings"
        }), _includeLinks && (0, import_jsx_runtime.jsx)(ButtonRouterLink, Object.assign({
          color: "secondary",
          to: `/molochv3/${daoChain}/${dao.id}/new-proposal?formLego=UPDATE_GOV_SETTINGS&defaultValues=${JSON.stringify(defaultValues)}`
        }, {
          children: "Update Governance"
        }))]
      }), (0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "description"
      }, {
        children: (0, import_jsx_runtime.jsxs)(ParSm, {
          children: [(0, import_jsx_runtime.jsx)(StyledLink, Object.assign({
            href: "https://moloch.daohaus.club/configuration/governance-configuration",
            target: "_blank",
            rel: "noreferrer"
          }, {
            children: "Review the documenation"
          })), " ", "for additional details on governance settings. Updates to settings will go through a proposal."]
        })
      })), (0, import_jsx_runtime.jsxs)(DataGrid$1, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Voting Period",
          data: (0, import_utils.formatPeriods)(dao.votingPeriod),
          info: import_utils.INFO_COPY.VOTING_PERIOD
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Grace Period",
          data: (0, import_utils.formatPeriods)(dao.gracePeriod),
          info: import_utils.INFO_COPY.GRACE_PERIOD
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "New Offering",
          data: `${(0, import_utils.fromWei)(dao.proposalOffering)} ${networkData === null || networkData === void 0 ? void 0 : networkData.symbol}`,
          info: import_utils.INFO_COPY.NEW_OFFERING
        })]
      }), (0, import_jsx_runtime.jsxs)(DataGrid$1, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Quorum %",
          data: (0, import_utils.formatValueTo)({
            value: dao.quorumPercent,
            format: "percent"
          }),
          info: import_utils.INFO_COPY.QUORUM
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Min Retention %",
          data: (0, import_utils.formatValueTo)({
            value: dao.minRetentionPercent,
            format: "percent"
          }),
          info: import_utils.INFO_COPY.MIN_RETENTION
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Sponsor Threshold",
          data: `${(0, import_utils.fromWei)(dao.sponsorThreshold)} Voting Tokens`,
          info: import_utils.INFO_COPY.SPONSOR_THRESHOLD
        })]
      })]
    })
  });
};
var ShamanList = ({
  shamen,
  daoChain,
  daoId,
  includeLinks
}) => {
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsxs)(ShamanListContainer, {
      children: [(0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "contract"
      }, {
        children: (0, import_jsx_runtime.jsx)(DataSm, {
          children: "Contract"
        })
      })), (0, import_jsx_runtime.jsx)("div", {
        children: (0, import_jsx_runtime.jsx)(DataSm, {
          children: "Permissions"
        })
      })]
    }), shamen && shamen.map((shaman) => (0, import_jsx_runtime.jsxs)(ShamanListContainer, {
      children: [(0, import_jsx_runtime.jsx)("span", Object.assign({
        className: "contract"
      }, {
        children: (0, import_jsx_runtime.jsx)(AddressDisplay, {
          address: shaman.shamanAddress,
          explorerNetworkId: daoChain
        })
      })), (0, import_jsx_runtime.jsxs)("div", Object.assign({
        className: "manage"
      }, {
        children: [(0, import_jsx_runtime.jsx)(DataSm, {
          children: shaman.permissions
        }), includeLinks && (0, import_jsx_runtime.jsx)(ButtonRouterLink, Object.assign({
          size: "sm",
          color: "secondary",
          to: `/molochv3/${daoChain}/${daoId}/new-proposal?formLego=UPDATE_SHAMAN&defaultValues=${JSON.stringify({
            shamanAddress: shaman.shamanAddress,
            shamanPermission: shaman.permissions
          })}`
        }, {
          children: "Manage"
        }))]
      }))]
    }, shaman.id))]
  });
};
var ShamanSettings = ({
  dao,
  daoChain,
  includeLinks: _includeLinks = false
}) => {
  return (0, import_jsx_runtime.jsx)(SettingsContainer, {
    children: (0, import_jsx_runtime.jsxs)(ShamanContainer, {
      children: [(0, import_jsx_runtime.jsx)(ShamanCardHeader, {
        children: (0, import_jsx_runtime.jsx)(H3, {
          children: "Shamans"
        })
      }), (0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "description"
      }, {
        children: (0, import_jsx_runtime.jsx)(ParSm, {
          children: "Shamans are contracts that can adjust governance settings, token settings, and memberships without proposals. Because shamans can affect the security of the DAO, be cautious when adding new shamans, and remove any that are no longer needed."
        })
      })), dao.shamen && dao.shamen.length > 0 && (0, import_jsx_runtime.jsx)(ShamanList, {
        shamen: dao.shamen,
        daoChain,
        daoId: dao.id,
        includeLinks: _includeLinks
      })]
    })
  });
};
var TokenSettings = ({
  dao,
  daoChain,
  includeLinks: _includeLinks = false
}) => {
  const defaultValues = (0, import_react.useMemo)(() => {
    if (!dao)
      return null;
    return {
      votingPeriod: dao.votingPeriod,
      votingPeriodUnits: "seconds",
      gracePeriodUnits: "seconds",
      gracePeriod: dao.gracePeriod,
      quorum: dao.quorumPercent,
      minRetention: dao.minRetentionPercent,
      sponsorThreshold: (0, import_utils.toWholeUnits)(dao.sponsorThreshold),
      newOffering: (0, import_utils.toWholeUnits)(dao.proposalOffering),
      vStake: dao.sharesPaused,
      nvStake: dao.lootPaused
    };
  }, [dao]);
  return (0, import_jsx_runtime.jsx)(SettingsContainer, {
    children: (0, import_jsx_runtime.jsxs)(GovernanceContainer, {
      children: [(0, import_jsx_runtime.jsxs)(TokensHeader, {
        children: [(0, import_jsx_runtime.jsx)(H3, Object.assign({
          className: "tokens"
        }, {
          children: "DAO Tokens"
        })), _includeLinks && (0, import_jsx_runtime.jsx)(ButtonRouterLink, Object.assign({
          color: "secondary",
          to: `/molochv3/${daoChain}/${dao.id}/new-proposal?formLego=TOKEN_SETTINGS&defaultValues=${JSON.stringify(defaultValues)}`
        }, {
          children: "Update Tokens"
        }))]
      }), (0, import_jsx_runtime.jsx)(H4, {
        children: "Voting"
      }), (0, import_jsx_runtime.jsxs)(TokenDataGrid, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Total",
          data: (0, import_utils.formatValueTo)({
            value: (0, import_utils.fromWei)(dao.totalShares),
            decimals: 2,
            format: "number"
          })
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Symbol",
          data: dao.shareTokenSymbol
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Name",
          data: (0, import_utils.charLimit)(dao.shareTokenName, 12)
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Transferability",
          data: dao.sharesPaused ? "Off" : "On"
        })]
      }), (0, import_jsx_runtime.jsx)(H4, {
        children: "Non-Voting"
      }), (0, import_jsx_runtime.jsxs)(TokenDataGrid, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Total",
          data: (0, import_utils.formatValueTo)({
            value: (0, import_utils.fromWei)(dao.totalLoot),
            decimals: 2,
            format: "number"
          })
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Symbol",
          data: dao.lootTokenSymbol
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Name",
          data: (0, import_utils.charLimit)((0, import_utils.lowerCaseLootToken)(dao.lootTokenName), 12)
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          size: "sm",
          label: "Transferability",
          data: dao.lootPaused ? "Off" : "On"
        })]
      })]
    })
  });
};
var DaoSettings = ({
  daoChain,
  daoId,
  includeLinks: _includeLinks = false,
  graphApiKeys
}) => {
  const {
    dao
  } = useDaoData({
    daoChain,
    daoId,
    graphApiKeys
  });
  if (!dao)
    return null;
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)(MetadataSettings, {
      dao,
      daoChain,
      includeLinks: _includeLinks
    }), (0, import_jsx_runtime.jsx)(ContractSettings, {
      dao,
      daoChain
    }), (0, import_jsx_runtime.jsx)(GovernanceSettings, {
      dao,
      daoChain,
      includeLinks: _includeLinks
    }), (0, import_jsx_runtime.jsx)(TokenSettings, {
      dao,
      daoChain,
      includeLinks: _includeLinks
    }), (0, import_jsx_runtime.jsx)(ShamanSettings, {
      dao,
      daoChain,
      includeLinks: _includeLinks
    })]
  });
};
var objectDefineProperties = {};
var DESCRIPTORS$1 = descriptors;
var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
var definePropertyModule$1 = objectDefineProperty;
var anObject$4 = anObject$7;
var toIndexedObject$1 = toIndexedObject$5;
var objectKeys = objectKeys$2;
objectDefineProperties.f = DESCRIPTORS$1 && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$4(O);
  var props = toIndexedObject$1(Properties);
  var keys3 = objectKeys(Properties);
  var length = keys3.length;
  var index = 0;
  var key;
  while (length > index)
    definePropertyModule$1.f(O, key = keys3[index++], props[key]);
  return O;
};
var getBuiltIn = getBuiltIn$3;
var html$1 = getBuiltIn("document", "documentElement");
var anObject$3 = anObject$7;
var definePropertiesModule = objectDefineProperties;
var enumBugKeys = enumBugKeys$3;
var hiddenKeys = hiddenKeys$4;
var html = html$1;
var documentCreateElement$1 = documentCreateElement$2;
var sharedKey$1 = sharedKey$3;
var GT = ">";
var LT = "<";
var PROTOTYPE = "prototype";
var SCRIPT = "script";
var IE_PROTO$1 = sharedKey$1("IE_PROTO");
var EmptyConstructor = function() {
};
var scriptTag = function(content) {
  return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
};
var NullProtoObjectViaActiveX = function(activeXDocument2) {
  activeXDocument2.write(scriptTag(""));
  activeXDocument2.close();
  var temp = activeXDocument2.parentWindow.Object;
  activeXDocument2 = null;
  return temp;
};
var NullProtoObjectViaIFrame = function() {
  var iframe = documentCreateElement$1("iframe");
  var JS = "java" + SCRIPT + ":";
  var iframeDocument;
  iframe.style.display = "none";
  html.appendChild(iframe);
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag("document.F=Object"));
  iframeDocument.close();
  return iframeDocument.F;
};
var activeXDocument;
var NullProtoObject = function() {
  try {
    activeXDocument = new ActiveXObject("htmlfile");
  } catch (error) {
  }
  NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
  var length = enumBugKeys.length;
  while (length--)
    delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};
hiddenKeys[IE_PROTO$1] = true;
var objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject$3(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    result[IE_PROTO$1] = O;
  } else
    result = NullProtoObject();
  return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
};
var wellKnownSymbol$6 = wellKnownSymbol$a;
var create$1 = objectCreate;
var defineProperty$2 = objectDefineProperty.f;
var UNSCOPABLES = wellKnownSymbol$6("unscopables");
var ArrayPrototype = Array.prototype;
if (ArrayPrototype[UNSCOPABLES] == void 0) {
  defineProperty$2(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create$1(null)
  });
}
var addToUnscopables$2 = function(key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};
var $$6 = _export;
var $includes = arrayIncludes.includes;
var fails$6 = fails$g;
var addToUnscopables$1 = addToUnscopables$2;
var BROKEN_ON_SPARSE = fails$6(function() {
  return !Array(1).includes();
});
$$6({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes(el) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
  }
});
addToUnscopables$1("includes");
var isObject$1 = isObject$7;
var classof$1 = classofRaw$2;
var wellKnownSymbol$5 = wellKnownSymbol$a;
var MATCH$1 = wellKnownSymbol$5("match");
var isRegexp = function(it) {
  var isRegExp2;
  return isObject$1(it) && ((isRegExp2 = it[MATCH$1]) !== void 0 ? !!isRegExp2 : classof$1(it) == "RegExp");
};
var isRegExp = isRegexp;
var $TypeError$3 = TypeError;
var notARegexp = function(it) {
  if (isRegExp(it)) {
    throw $TypeError$3("The method doesn't accept regular expressions");
  }
  return it;
};
var wellKnownSymbol$4 = wellKnownSymbol$a;
var MATCH = wellKnownSymbol$4("match");
var correctIsRegexpLogic = function(METHOD_NAME) {
  var regexp = /./;
  try {
    "/./"[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return "/./"[METHOD_NAME](regexp);
    } catch (error2) {
    }
  }
  return false;
};
var $$5 = _export;
var uncurryThis$6 = functionUncurryThis;
var notARegExp$1 = notARegexp;
var requireObjectCoercible$2 = requireObjectCoercible$5;
var toString$3 = toString$5;
var correctIsRegExpLogic$1 = correctIsRegexpLogic;
var stringIndexOf = uncurryThis$6("".indexOf);
$$5({ target: "String", proto: true, forced: !correctIsRegExpLogic$1("includes") }, {
  includes: function includes2(searchString) {
    return !!~stringIndexOf(
      toString$3(requireObjectCoercible$2(this)),
      toString$3(notARegExp$1(searchString)),
      arguments.length > 1 ? arguments[1] : void 0
    );
  }
});
var _$l = (t) => t;
var _t$l;
var _t2$d;
var _t3$a;
var _t4$7;
var _t5$6;
var _t6$6;
var _t7$5;
var Table = st.table(_t$l || (_t$l = _$l`
  width: 100%;
  font-size: 1.6rem;
  line-height: 2.4rem;
  border-collapse: collapse;
  text-align: left;
  margin-bottom: 2rem;
`));
var Thead = st.thead(_t2$d || (_t2$d = _$l``));
var Th = st.th(_t3$a || (_t3$a = _$l`
  color: ${0};
  border-bottom: 1px solid ${0};
  padding: 2rem 0.5rem;
`), indigo$1.indigo11, indigo$1.indigo5);
var HeaderCellContainer = st.div(_t4$7 || (_t4$7 = _$l`
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  /* gap: 1rem; */
`));
var Tr = st.tr(_t5$6 || (_t5$6 = _$l``));
var Td = st.td(_t6$6 || (_t6$6 = _$l`
  padding: 2rem 0.5rem;
`));
var TBody = st.tbody(_t7$5 || (_t7$5 = _$l``));
var _$k = (t) => t;
var _t$k;
var SorterContainer = st.div(_t$k || (_t$k = _$k`
  display: flex;
  flex-direction: column;
  margin-left: 0.5rem;
`));
var ColumnSortIcons = ({
  orderBy,
  handleColumnSort
}) => {
  return (0, import_jsx_runtime.jsxs)(SorterContainer, {
    children: [(0, import_jsx_runtime.jsx)(import_ri.RiArrowUpSFill, {
      onClick: () => handleColumnSort(orderBy, "asc")
    }), (0, import_jsx_runtime.jsx)(import_ri.RiArrowDownSFill, {
      onClick: () => handleColumnSort(orderBy, "desc")
    })]
  });
};
function DaoTable({
  tableData,
  columns,
  hasNextPaging,
  handleLoadMore,
  handleColumnSort,
  sortableColumns
}) {
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    prepareRow
  } = (0, import_react_table.useTable)({
    columns,
    data: tableData
  });
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsxs)(Table, Object.assign({}, getTableProps, {
      children: [(0, import_jsx_runtime.jsx)(Thead, {
        children: headerGroups.map((headerGroup) => (0, import_jsx_runtime.jsx)(Tr, Object.assign({}, headerGroup.getHeaderGroupProps(), {
          children: headerGroup.headers.map((column) => {
            return (0, import_jsx_runtime.jsx)(Th, Object.assign({}, column.getHeaderProps(), {
              children: (0, import_jsx_runtime.jsxs)(HeaderCellContainer, {
                children: [column.render("Header"), sortableColumns.includes(column.id) && handleColumnSort && (0, import_jsx_runtime.jsx)(ColumnSortIcons, {
                  orderBy: column.id,
                  handleColumnSort
                })]
              })
            }));
          })
        })))
      }), (0, import_jsx_runtime.jsx)(TBody, Object.assign({}, getTableBodyProps(), {
        children: rows.map((row, i) => {
          prepareRow(row);
          return (0, import_jsx_runtime.jsx)(Tr, Object.assign({}, row.getRowProps(), {
            children: row.cells.map((cell) => {
              return (0, import_jsx_runtime.jsx)(Td, Object.assign({}, cell.getCellProps(), {
                children: cell.render("Cell")
              }));
            })
          }));
        })
      }))]
    })), hasNextPaging && handleLoadMore && (0, import_jsx_runtime.jsx)(Button, Object.assign({
      color: "secondary",
      variant: "outline",
      size: "sm",
      onClick: handleLoadMore
    }, {
      children: "Load More"
    }))]
  });
}
var _$j = (t) => t;
var _t$j;
var _t2$c;
var MemberContainer$2 = st.div(_t$j || (_t$j = _$j`
  button {
    padding-left: 0 !important;
  }
`));
var StyledRouterLink$3 = st(Link)(_t2$c || (_t2$c = _$j`
  ${0}
  &:hover {
    text-decoration: none;
  }
`), DropdownLinkStyles);
var MemberDisplay = ({
  memberAddress,
  daoChain,
  daoId,
  includeLinks: _includeLinks = false
}) => {
  const {
    profile
  } = useProfile({
    address: memberAddress
  });
  const customProfileURI = daoId && daoId && `/molochv3/${daoChain}/${daoId}/members/${memberAddress}`;
  return (0, import_jsx_runtime.jsx)(MemberContainer$2, {
    children: (0, import_jsx_runtime.jsxs)(MemberCard, Object.assign({
      fullWidth: true,
      variant: "ghost",
      profile: profile || {
        address: memberAddress
      }
    }, {
      children: [(0, import_jsx_runtime.jsx)(MemberCardItem, Object.assign({
        asChild: true
      }, {
        children: _includeLinks && (0, import_jsx_runtime.jsx)(StyledRouterLink$3, Object.assign({
          to: customProfileURI ? customProfileURI : "/"
        }, {
          children: "View Profile"
        }))
      })), (0, import_jsx_runtime.jsx)(MemberCardExplorerLink, Object.assign({
        explorerNetworkId: daoChain,
        profileAddress: (profile === null || profile === void 0 ? void 0 : profile.address) || memberAddress
      }, {
        children: "View on Etherscan"
      })), (0, import_jsx_runtime.jsx)(MemberCardCopyAddress, Object.assign({
        profileAddress: (profile === null || profile === void 0 ? void 0 : profile.address) || memberAddress
      }, {
        children: "Copy Address"
      }))]
    }))
  });
};
var ManageDelegate = ({
  daoChain,
  daoId,
  defaultMember
}) => {
  const {
    refetch
  } = useDaoData();
  const {
    refetch: refetchMembers
  } = useDaoMembers();
  const {
    address
  } = useDHConnect();
  const {
    connectedMember,
    refetch: refetchMember
  } = useConnectedMember({
    daoChain,
    daoId,
    memberAddress: address
  });
  const defaultValues = (0, import_react.useMemo)(() => {
    if (defaultMember) {
      return {
        delegatingTo: defaultMember
      };
    }
    if (connectedMember && connectedMember.delegatingTo !== connectedMember.memberAddress) {
      return connectedMember;
    }
  }, [connectedMember, defaultMember]);
  const onFormComplete = () => {
    refetch === null || refetch === void 0 ? void 0 : refetch();
    refetchMembers === null || refetchMembers === void 0 ? void 0 : refetchMembers();
    refetchMember === null || refetchMember === void 0 ? void 0 : refetchMember();
  };
  return (0, import_jsx_runtime.jsx)(FormBuilder, {
    defaultValues,
    form: import_moloch_v3_legos.COMMON_FORMS.MANAGE_DELEGATE,
    customFields: MolochFields,
    lifeCycleFns: {
      onPollSuccess: () => {
        onFormComplete();
      }
    },
    targetNetwork: daoChain
  });
};
var _$i = (t) => t;
var _t$i;
var _t2$b;
var _t3$9;
var _t4$6;
var _t5$5;
var _t6$5;
var _t7$4;
var _t8$3;
var _t9$2;
var _t10$2;
var _t11$2;
var _t12$2;
var _t13$2;
var _t14;
var _t15;
var MProfileCard = st(Card)(_t$i || (_t$i = _$i`
  width: 64rem;
  padding: 2rem;
  border: none;
  margin-bottom: 3.4rem;
  @media ${0} {
    max-width: 100%;
    min-width: 0;
  }
`), widthQuery.md);
var ValueRow = st.div(_t2$b || (_t2$b = _$i`
  width: 64rem;
  padding: 3rem 0;
  text-align: left;
`));
var LoadingContainer$2 = st.div(_t3$9 || (_t3$9 = _$i`
  display: flex;
  flex-direction: column;
  align-items: center;
`));
var AlertContainer$3 = st(Card)(_t4$6 || (_t4$6 = _$i`
  display: flex;
  gap: 3rem;
  width: 100%;
  justify-content: center;
  align-items: center;
  margin-bottom: 3rem;
  padding: 2.3rem 2.5rem;
  border: none;
  min-height: 23.8rem;

  @media ${0} {
    gap: 2rem;
    height: auto;
    margin-bottom: 2rem;
  }
`), widthQuery.sm);
var AvatarLarge = st(ProfileAvatar)(_t5$5 || (_t5$5 = _$i`
  height: 12rem;
  width: 12rem;
`));
var ProfileContainer = st.div(_t6$5 || (_t6$5 = _$i`
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  background: ${0};
  padding: 2.8rem;
  min-height: 30rem;
  border-radius: 0.8rem;
  border: 0.1rem solid ${0};
`), indigo$1.indigo5, indigo$1.indigo5);
var PSubContainer = st.div(_t7$4 || (_t7$4 = _$i`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
`));
var ProfileNameContainer = st.div(_t8$3 || (_t8$3 = _$i`
  display: flex;
  gap: 1rem;
`));
var ProfileMetadataContainer = st.div(_t9$2 || (_t9$2 = _$i`
  display: flex;
  gap: 1rem;
  flex-direction: column;
  align-items: flex-start;
  gap: 2rem;

  @media (min-width: ${0}) {
    flex-direction: row;
    align-items: center;
  }
`), breakpoints.xs);
var ProfileDataGrid = st.div(_t10$2 || (_t10$2 = _$i`
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  align-content: space-between;
  div {
    padding: 2rem 0;
    width: 18rem;

    @media ${0} {
      min-width: 100%;
    }
  }
`), widthQuery.sm);
st(Button)(_t11$2 || (_t11$2 = _$i`
  padding: 0 4px 0 4px;

  &[data-state='open'] {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  svg.icon-right {
    color: ${0};
  }

  svg.icon-left {
    margin-right: 0;
    width: 5rem;
  }
`), ({
  theme
}) => theme.primary.step9);
var ProfileMenuLink = st(Link)(_t12$2 || (_t12$2 = _$i`
  ${0}
  font-weight: ${0};
`), DropdownLinkStyles, font.weight.bold);
var ProfileMenuText = st(DropdownLabel)(_t13$2 || (_t13$2 = _$i`
  border-radius: 2px;
  color: ${0};
  font-weight: ${0};
  cursor: pointer;
  display: flex;
  padding: 1rem;
  transition: 0.2s all;
  width: 100%;
  font-size: ${0};

  svg {
    margin-left: 0.3rem;
  }

  &:hover {
    background-color: ${0};
    border-color: ${0};
    text-decoration: none;
  }

  &.disabled {
    color: ${0};
  }
`), (props) => props.theme.secondary.step12, font.weight.bold, font.size.md, (props) => props.theme.secondary.step4, (props) => props.theme.secondary.step8, (props) => props.theme.secondary.step11);
var MemberContainer$1 = st.div(_t14 || (_t14 = _$i`
  button {
    padding-left: 0 !important;
  }
`));
var StyledRouterLink$2 = st(Link)(_t15 || (_t15 = _$i`
  ${0}
  &:hover {
    text-decoration: none;
  }
`), DropdownLinkStyles);
var MemberProfileAvatar = ({
  memberAddress,
  memberProfile,
  daoChain,
  daoId,
  allowLinks: _allowLinks = false
}) => {
  const {
    profile: currentProfile
  } = useProfile({
    address: !memberProfile ? memberAddress : ""
  });
  return (0, import_jsx_runtime.jsx)(MemberContainer$1, {
    children: (0, import_jsx_runtime.jsxs)(MemberCard, Object.assign({
      fullWidth: true,
      variant: "ghost",
      profile: memberProfile || currentProfile || {
        address: memberAddress
      }
    }, {
      children: [_allowLinks && (0, import_jsx_runtime.jsx)(MemberCardItem, Object.assign({
        asChild: true
      }, {
        children: (0, import_jsx_runtime.jsx)(StyledRouterLink$2, Object.assign({
          to: daoId ? `/molochv3/${daoChain}/${daoId}/member/${memberAddress}` : "/"
        }, {
          children: "View Profile"
        }))
      })), (0, import_jsx_runtime.jsx)(MemberCardExplorerLink, Object.assign({
        explorerNetworkId: daoChain,
        profileAddress: (memberProfile === null || memberProfile === void 0 ? void 0 : memberProfile.address) || memberAddress
      }, {
        children: "View on Etherscan"
      })), (0, import_jsx_runtime.jsx)(MemberCardCopyAddress, Object.assign({
        profileAddress: (memberProfile === null || memberProfile === void 0 ? void 0 : memberProfile.address) || memberAddress
      }, {
        children: "Copy Address"
      }))]
    }))
  });
};
var MemberProfileMenu = ({
  daoChain,
  daoId,
  memberAddress,
  allowLinks: _allowLinks = false,
  allowMemberMenu: _allowMemberMenu = false
}) => {
  const {
    address
  } = useDHConnect();
  const {
    connectedMember
  } = useConnectedMember({
    daoChain,
    daoId,
    memberAddress: address
  });
  const enableActions = (0, import_react.useMemo)(() => {
    return connectedMember && (connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.memberAddress) !== memberAddress && Number(connectedMember.shares) > 0;
  }, [connectedMember, memberAddress]);
  const isMenuForConnectedMember = (0, import_react.useMemo)(() => {
    return (connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.memberAddress) === memberAddress;
  }, [connectedMember, memberAddress]);
  if (!connectedMember || !_allowMemberMenu)
    return null;
  return (0, import_jsx_runtime.jsxs)(Dialog, {
    children: [(0, import_jsx_runtime.jsxs)(DropdownMenu, {
      children: [(0, import_jsx_runtime.jsx)(DropdownIconTrigger, {
        Icon: import_ri.RiMore2Fill,
        color: "primary",
        variant: "ghost"
      }), (0, import_jsx_runtime.jsxs)(DropdownContent, Object.assign({
        side: "left"
      }, {
        children: [isMenuForConnectedMember && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
          children: [(0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
            asChild: true
          }, {
            children: (0, import_jsx_runtime.jsx)(DialogTrigger, Object.assign({
              asChild: true
            }, {
              children: (0, import_jsx_runtime.jsx)(ProfileMenuText, {
                children: "Delegate"
              })
            }))
          }), "delegate"), _allowLinks && (0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
            asChild: true
          }, {
            children: (0, import_jsx_runtime.jsx)(ProfileMenuLink, Object.assign({
              to: `/molochV3/${daoChain}/${daoId}/members/ragequit`
            }, {
              children: "Rage Quit"
            }))
          }), "ragequit")]
        }), !isMenuForConnectedMember && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
          children: [(0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
            asChild: true
          }, {
            children: (0, import_jsx_runtime.jsx)(DialogTrigger, Object.assign({
              asChild: true
            }, {
              children: (0, import_jsx_runtime.jsx)(ProfileMenuText, Object.assign({
                className: enableActions ? "" : "disabled"
              }, {
                children: "Delegate To"
              }))
            }))
          }), "delegateTo"), _allowLinks && (0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
            asChild: true
          }, {
            children: (0, import_jsx_runtime.jsx)(ProfileMenuLink, Object.assign({
              className: enableActions ? "" : "disabled",
              to: `/molochV3/${daoChain}/${daoId}/new-proposal?formLego=GUILDKICK&defaultValues=${JSON.stringify({
                memberAddress
              })}`
            }, {
              children: "Guild Kick"
            }))
          }), "guildkick")]
        })]
      }))]
    }), (0, import_jsx_runtime.jsx)(DialogContent, Object.assign({
      title: "Manage Delegate"
    }, {
      children: (0, import_jsx_runtime.jsx)(ManageDelegate, {
        daoChain,
        daoId,
        defaultMember: !isMenuForConnectedMember ? memberAddress : void 0
      })
    }))]
  });
};
var _$h = (t) => t;
var _t$h;
var _t2$a;
var _t3$8;
var Container = st.div(_t$h || (_t$h = _$h`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`));
var DataIndicatorContainer = st.div(_t2$a || (_t2$a = _$h`
  display: flex;
  flex-direction: column;
`));
var DataIndicatorLabelMd = st(ParMd)(_t3$8 || (_t3$8 = _$h`
  margin-bottom: 0.5rem;
  opacity: 0.9;
`));
var MemberProfile = ({
  daoChain,
  dao,
  profile,
  membership,
  allowLinks: _allowLinks = false,
  allowMemberMenu: _allowMemberMenu = false
}) => {
  return (0, import_jsx_runtime.jsxs)(ProfileContainer, {
    children: [(0, import_jsx_runtime.jsxs)(PSubContainer, {
      children: [(0, import_jsx_runtime.jsxs)(ProfileMetadataContainer, {
        children: [(0, import_jsx_runtime.jsx)(AvatarLarge, {
          image: (profile === null || profile === void 0 ? void 0 : profile.avatar) || "",
          size: "lg",
          alt: "profile image",
          address: profile.address
        }), (0, import_jsx_runtime.jsxs)(Container, {
          children: [(0, import_jsx_runtime.jsx)(ProfileNameContainer, {
            children: (profile === null || profile === void 0 ? void 0 : profile.ens) && (0, import_jsx_runtime.jsx)(H5, {
              children: (profile === null || profile === void 0 ? void 0 : profile.ens) || ""
            })
          }), membership && (0, import_jsx_runtime.jsx)(AddressDisplay, {
            address: membership.memberAddress,
            truncate: true,
            textOverride: profile === null || profile === void 0 ? void 0 : profile.ens,
            copy: true
          }), membership && (0, import_jsx_runtime.jsxs)(DataXs, Object.assign({
            as: "span"
          }, {
            children: ["Joined ", (0, import_utils.formatLongDateFromSeconds)(membership === null || membership === void 0 ? void 0 : membership.createdAt)]
          }))]
        })]
      }), membership && (0, import_jsx_runtime.jsx)(MemberProfileMenu, {
        daoChain,
        daoId: dao.id,
        memberAddress: membership.memberAddress,
        allowLinks: _allowLinks,
        allowMemberMenu: _allowMemberMenu
      })]
    }), membership && dao && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsxs)(ProfileDataGrid, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Power",
          data: (0, import_utils.formatValueTo)({
            value: (0, import_utils.votingPowerPercentage)((dao === null || dao === void 0 ? void 0 : dao.totalShares) || "0", membership.delegateShares),
            decimals: 2,
            format: "percent"
          })
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Voting Tokens",
          data: (0, import_utils.formatValueTo)({
            value: (0, import_utils.fromWei)(membership.shares),
            decimals: 2,
            format: "number"
          })
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Non-Voting Tokens",
          data: (0, import_utils.formatValueTo)({
            value: (0, import_utils.fromWei)(membership.loot),
            decimals: 2,
            format: "number"
          })
        })]
      }), membership.delegatingTo !== membership.memberAddress && (0, import_jsx_runtime.jsxs)(DataIndicatorContainer, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicatorLabelMd, {
          children: "Delegating To"
        }), (0, import_jsx_runtime.jsx)(MemberProfileAvatar, {
          daoChain,
          daoId: dao.id,
          memberAddress: membership.delegatingTo,
          allowLinks: _allowLinks
        })]
      })]
    })]
  });
};
var MemberTokens = ({
  daoChain,
  dao,
  member
}) => {
  const {
    networks
  } = useDHConnect();
  const treasury = (0, import_react.useMemo)(() => {
    if (dao) {
      return dao.vaults.find((v) => v.safeAddress === dao.safeAddress) || void 0;
    }
    return void 0;
  }, [dao]);
  const tableData = (0, import_react.useMemo)(() => {
    if (dao && member && treasury) {
      return treasury.tokenBalances.filter((bal) => Number(bal.balance)).map((bal) => {
        var _a, _b;
        return {
          token: {
            address: bal.tokenAddress || import_utils.NETWORK_TOKEN_ETH_ADDRESS,
            name: (0, import_utils.charLimit)((_a = bal.token) === null || _a === void 0 ? void 0 : _a.name, 21)
          },
          fiatBalance: (0, import_utils.formatValueTo)({
            value: (0, import_utils.memberUsdValueShare)(bal.fiatBalance, dao.totalShares || 0, dao.totalLoot || 0, member.shares || 0, member.loot || 0),
            decimals: 2,
            format: "currency"
          }),
          balance: (0, import_utils.formatValueTo)({
            value: (0, import_utils.memberTokenBalanceShare)(bal.balance, dao.totalShares || 0, dao.totalLoot || 0, member.shares || 0, member.loot || 0, ((_b = bal.token) === null || _b === void 0 ? void 0 : _b.decimals) || 18),
            format: "number"
          })
        };
      });
    } else {
      return null;
    }
  }, [dao, member, treasury]);
  const columns = (0, import_react.useMemo)(() => [{
    Header: "Token",
    accessor: "token",
    Cell: ({
      value
    }) => {
      var _a;
      return value.address === import_utils.NETWORK_TOKEN_ETH_ADDRESS ? (0, import_jsx_runtime.jsx)(DataMd, {
        children: (_a = networks === null || networks === void 0 ? void 0 : networks[daoChain]) === null || _a === void 0 ? void 0 : _a.symbol
      }) : (0, import_jsx_runtime.jsx)(AddressDisplay, {
        address: value.address,
        textOverride: value.name,
        truncate: true,
        copy: true,
        explorerNetworkId: daoChain
      });
    }
  }, {
    Header: "Amount",
    accessor: "balance",
    Cell: ({
      value
    }) => {
      return (0, import_jsx_runtime.jsx)("div", {
        children: value
      });
    }
  }, {
    Header: () => {
      return (0, import_jsx_runtime.jsx)("div", {
        children: "USD Value"
      });
    },
    accessor: "fiatBalance",
    Cell: ({
      value
    }) => {
      return (0, import_jsx_runtime.jsx)("div", {
        children: value
      });
    }
  }], [daoChain, networks]);
  if (treasury && tableData && columns)
    return (0, import_jsx_runtime.jsx)(DaoTable, {
      tableData,
      columns,
      sortableColumns: []
    });
  return null;
};
var MemberProfileCard = ({
  daoChain,
  daoId,
  member,
  allowLinks: _allowLinks = false,
  allowMemberMenu: _allowMemberMenu = false
}) => {
  const {
    dao,
    isLoading: isLoadingDao
  } = useDaoData({
    daoChain,
    daoId
  });
  const {
    profile: currentProfile,
    isLoading: isLoadingProfile
  } = useProfile({
    address: (member === null || member === void 0 ? void 0 : member.memberAddress) || ""
  });
  if (!member || !dao && !isLoadingDao || !currentProfile && !isLoadingProfile)
    return (0, import_jsx_runtime.jsx)(AlertContainer$3, {
      children: (0, import_jsx_runtime.jsx)(ParLg, Object.assign({
        className: "warn"
      }, {
        children: "Member Profile Not Found"
      }))
    });
  return (0, import_jsx_runtime.jsxs)(MProfileCard, {
    children: [(!dao || !member || !currentProfile) && (0, import_jsx_runtime.jsx)(LoadingContainer$2, {
      children: (0, import_jsx_runtime.jsx)(Loading, {
        size: 120
      })
    }), dao && member && currentProfile && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(MemberProfile, {
        daoChain,
        dao,
        profile: currentProfile,
        membership: member,
        allowLinks: _allowLinks,
        allowMemberMenu: _allowMemberMenu
      }), (0, import_jsx_runtime.jsx)(ValueRow, {
        children: (0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Total Exit Amount",
          data: (0, import_utils.formatValueTo)({
            value: (0, import_utils.memberUsdValueShare)((dao === null || dao === void 0 ? void 0 : dao.fiatTotal) || 0, (dao === null || dao === void 0 ? void 0 : dao.totalShares) || 0, (dao === null || dao === void 0 ? void 0 : dao.totalLoot) || 0, (member === null || member === void 0 ? void 0 : member.shares) || 0, (member === null || member === void 0 ? void 0 : member.loot) || 0),
            decimals: 2,
            format: "currency"
          })
        })
      }), (0, import_jsx_runtime.jsx)(MemberTokens, {
        daoChain,
        dao,
        member
      })]
    })]
  });
};
var _$g = (t) => t;
var _t$g;
var _t2$9;
var MembersOverviewCard = st(Card)(_t$g || (_t$g = _$g`
  background-color: ${0};
  border: none;
  padding: 3rem;
  width: 100%;
`), ({
  theme
}) => theme.secondary.step3);
var DataGrid = st.div(_t2$9 || (_t2$9 = _$g`
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  align-content: space-between;
  div {
    padding: 2rem 0;
    width: 19.7rem;

    @media ${0} {
      min-width: 100%;
    }
  }
`), widthQuery.sm);
var MembersOverview = ({
  dao
}) => {
  var _a;
  return (0, import_jsx_runtime.jsx)(MembersOverviewCard, {
    children: (0, import_jsx_runtime.jsxs)(DataGrid, {
      children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
        label: "Token Holders",
        data: dao.activeMemberCount
      }), (0, import_jsx_runtime.jsx)(DataIndicator, {
        label: "Shamans",
        data: ((_a = dao.shamen) === null || _a === void 0 ? void 0 : _a.length) || "0"
      }), (0, import_jsx_runtime.jsx)(DataIndicator, {
        label: (0, import_utils.charLimit)(dao.shareTokenName, 12),
        data: (0, import_utils.formatValueTo)({
          value: (0, import_utils.fromWei)(dao.totalShares),
          decimals: 2,
          format: "numberShort"
        })
      }), (0, import_jsx_runtime.jsx)(DataIndicator, {
        label: (0, import_utils.charLimit)((0, import_utils.lowerCaseLootToken)(dao.lootTokenName), 12),
        data: (0, import_utils.formatValueTo)({
          value: (0, import_utils.fromWei)(dao.totalLoot),
          decimals: 2,
          format: "numberShort"
        })
      })]
    })
  });
};
var _$f = (t) => t;
var _t$f;
var _t2$8;
var _t3$7;
var _t4$5;
var MemberContainer = st(Card)(_t$f || (_t$f = _$f`
  padding: 3rem;
  border: none;
  margin-bottom: 3rem;
  min-height: 20rem;
  width: 100%;
  overflow-x: auto;
  th {
    min-width: 10rem;
  }
  .hide-sm {
    button {
      padding-left: 0.5rem;
    }
  }
  @media ${0} {
    max-width: 100%;
    min-width: 0;
  }
  @media ${0} {
    .hide-sm {
      display: none;
    }
  }
`), widthQuery.lg, widthQuery.md);
var ActionContainer = st.div(_t2$8 || (_t2$8 = _$f`
  display: flex;
  gap: 1rem;
`));
var LoadingContainer$1 = st.div(_t3$7 || (_t3$7 = _$f`
  display: flex;
  flex-direction: column;
  align-items: center;
`));
var AlertContainer$2 = st(Card)(_t4$5 || (_t4$5 = _$f`
  display: flex;
  gap: 3rem;
  width: 100%;
  justify-content: center;
  align-items: center;
  margin-bottom: 3rem;
  padding: 2.3rem 2.5rem;
  border: none;
  min-height: 23.8rem;

  @media ${0} {
    gap: 2rem;
    height: auto;
    margin-bottom: 2rem;
  }
`), widthQuery.sm);
var MemberList = ({
  daoChain,
  daoId,
  allowLinks: _allowLinks = false,
  allowMemberMenu: _allowMemberMenu = false
}) => {
  const {
    dao,
    isLoading: isLoadingDao
  } = useDaoData();
  const {
    members,
    isLoading: isLoadingMembers,
    fetchNextPage,
    hasNextPage,
    orderMembers
  } = useDaoMembers();
  console.log("members", members, hasNextPage);
  const isMd = useBreakpoint(widthQuery.md);
  const tableData = (0, import_react.useMemo)(() => {
    if (members) {
      const filteredMembers = members.filter((member) => member !== void 0);
      return (filteredMembers === null || filteredMembers === void 0 ? void 0 : filteredMembers.length) ? filteredMembers : [];
    }
    return [];
  }, [members]);
  const columns = (0, import_react.useMemo)(() => [{
    Header: "Member",
    accessor: "memberAddress",
    Cell: ({
      value
    }) => {
      return (0, import_jsx_runtime.jsx)(MemberProfileAvatar, {
        daoChain,
        daoId,
        memberAddress: value,
        allowLinks: _allowLinks
      });
    }
  }, {
    Header: () => {
      return (0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "hide-sm"
      }, {
        children: "Join Date"
      }));
    },
    accessor: "createdAt",
    Cell: ({
      value
    }) => {
      return (0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "hide-sm"
      }, {
        children: (0, import_utils.formatDateFromSeconds)(value)
      }));
    }
  }, {
    Header: () => {
      return (0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "hide-sm"
      }, {
        children: "Power"
      }));
    },
    accessor: "delegateShares",
    Cell: ({
      value,
      row
    }) => {
      const delegatedShares = (0, import_utils.sharesDelegatedToMember)(row.original.delegateShares, row.original.shares);
      return (0, import_jsx_runtime.jsxs)("div", Object.assign({
        className: "hide-sm"
      }, {
        children: [(0, import_utils.votingPowerPercentage)((dao === null || dao === void 0 ? void 0 : dao.totalShares) || "0", value), " %", Number(delegatedShares) > 0 && (0, import_jsx_runtime.jsx)(Tooltip, {
          content: `${(0, import_utils.formatValueTo)({
            value: (0, import_utils.fromWei)(delegatedShares),
            decimals: 2,
            format: "number"
          })} voting tokens are delegated to this member`,
          side: "bottom"
        })]
      }));
    }
  }, {
    Header: () => {
      return (0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "hide-sm"
      }, {
        children: "Delegating To"
      }));
    },
    accessor: "delegatingTo",
    Cell: ({
      value,
      row
    }) => {
      return (0, import_jsx_runtime.jsx)("div", Object.assign({
        className: "hide-sm"
      }, {
        children: value === row.original.memberAddress ? "--" : (0, import_jsx_runtime.jsx)(AddressDisplay, {
          address: value,
          truncate: true
        })
      }));
    }
  }, {
    Header: () => {
      return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
        children: "Voting"
      });
    },
    accessor: "shares",
    Cell: ({
      value
    }) => {
      return (0, import_jsx_runtime.jsx)("div", {
        children: (0, import_utils.formatValueTo)({
          value: (0, import_utils.fromWei)(value),
          decimals: 2,
          format: "number"
        })
      });
    }
  }, {
    Header: () => {
      return (0, import_jsx_runtime.jsx)("div", {
        children: "Non-Voting"
      });
    },
    accessor: "loot",
    Cell: ({
      value
    }) => {
      return (0, import_jsx_runtime.jsx)("div", {
        children: (0, import_utils.formatValueTo)({
          value: (0, import_utils.fromWei)(value),
          decimals: 2,
          format: "number"
        })
      });
    }
  }, {
    accessor: "id",
    Cell: ({
      row
    }) => {
      return (0, import_jsx_runtime.jsx)(ActionContainer, {
        children: (0, import_jsx_runtime.jsx)(MemberProfileMenu, {
          daoChain,
          daoId,
          memberAddress: row.original.memberAddress,
          allowLinks: _allowLinks,
          allowMemberMenu: _allowMemberMenu
        })
      });
    }
  }], [daoChain, dao, _allowLinks, daoId, _allowMemberMenu]);
  const handleColumnSort = (orderBy, orderDirection) => {
    orderMembers({
      orderBy,
      orderDirection
    });
  };
  if (!dao && !isLoadingDao || !members && !isLoadingMembers)
    return (0, import_jsx_runtime.jsx)(AlertContainer$2, {
      children: (0, import_jsx_runtime.jsx)(ParLg, Object.assign({
        className: "warn"
      }, {
        children: "No Members Found"
      }))
    });
  return (0, import_jsx_runtime.jsxs)(MemberContainer, {
    children: [!dao && isLoadingDao && (0, import_jsx_runtime.jsx)(LoadingContainer$1, {
      children: (0, import_jsx_runtime.jsx)(Loading, {
        size: 120
      })
    }), dao && (0, import_jsx_runtime.jsx)(MembersOverview, {
      dao
    }), dao && members && tableData && columns && (0, import_jsx_runtime.jsx)(DaoTable, {
      tableData,
      columns,
      hasNextPaging: hasNextPage,
      handleLoadMore: () => fetchNextPage(),
      handleColumnSort,
      sortableColumns: isMd ? ["loot", "shares"] : ["createdAt", "shares", "loot", "delegateShares"]
    }), dao && isLoadingMembers && (0, import_jsx_runtime.jsx)(LoadingContainer$1, {
      children: (0, import_jsx_runtime.jsx)(Loading, {
        size: 120
      })
    })]
  });
};
var _$e = (t) => t;
var _t$e;
var _t2$7;
var _t3$6;
var OverviewContainer$1 = st.div(_t$e || (_t$e = _$e`
  display: flex;
  flex-direction: column;
  margin-top: 1rem;
  width: 100%;
  padding: 2.8rem 3.6rem;

  border-radius: ${0};
  border: 1px ${0} solid;
  background-color: ${0};

  .description {
    word-break: break-word;
    img {
      max-width: 100%;
    }
  }

  .proposal-link {
    margin-top: 1.2rem;
  }
`), ({
  theme
}) => theme.card.radius, ({
  theme
}) => theme.secondary.step5, ({
  theme
}) => theme.secondary.step3);
var DataContainer = st.div(_t2$7 || (_t2$7 = _$e`
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  flex-wrap: wrap;
  gap: 3rem;
  margin-top: 3rem;
`));
var StyledRouterLink$1 = st(Link)(_t3$6 || (_t3$6 = _$e`
  ${0}
  &:hover {
    text-decoration: none;
  }
`), DropdownLinkStyles);
var iterators = {};
var fails$5 = fails$g;
var correctPrototypeGetter = !fails$5(function() {
  function F() {
  }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});
var hasOwn$2 = hasOwnProperty_1;
var isCallable$3 = isCallable$g;
var toObject$2 = toObject$5;
var sharedKey = sharedKey$3;
var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
var IE_PROTO = sharedKey("IE_PROTO");
var $Object = Object;
var ObjectPrototype = $Object.prototype;
var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
  var object = toObject$2(O);
  if (hasOwn$2(object, IE_PROTO))
    return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable$3(constructor) && object instanceof constructor) {
    return constructor.prototype;
  }
  return object instanceof $Object ? ObjectPrototype : null;
};
var fails$4 = fails$g;
var isCallable$2 = isCallable$g;
var isObject = isObject$7;
var getPrototypeOf$1 = objectGetPrototypeOf;
var defineBuiltIn$2 = defineBuiltIn$4;
var wellKnownSymbol$3 = wellKnownSymbol$a;
var ITERATOR$2 = wellKnownSymbol$3("iterator");
var BUGGY_SAFARI_ITERATORS$1 = false;
var IteratorPrototype$2;
var PrototypeOfArrayIteratorPrototype;
var arrayIterator;
if ([].keys) {
  arrayIterator = [].keys();
  if (!("next" in arrayIterator))
    BUGGY_SAFARI_ITERATORS$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf$1(getPrototypeOf$1(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
      IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
  }
}
var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype$2) || fails$4(function() {
  var test2 = {};
  return IteratorPrototype$2[ITERATOR$2].call(test2) !== test2;
});
if (NEW_ITERATOR_PROTOTYPE)
  IteratorPrototype$2 = {};
if (!isCallable$2(IteratorPrototype$2[ITERATOR$2])) {
  defineBuiltIn$2(IteratorPrototype$2, ITERATOR$2, function() {
    return this;
  });
}
var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$2,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};
var defineProperty$1 = objectDefineProperty.f;
var hasOwn$1 = hasOwnProperty_1;
var wellKnownSymbol$2 = wellKnownSymbol$a;
var TO_STRING_TAG$1 = wellKnownSymbol$2("toStringTag");
var setToStringTag$2 = function(target, TAG, STATIC) {
  if (target && !STATIC)
    target = target.prototype;
  if (target && !hasOwn$1(target, TO_STRING_TAG$1)) {
    defineProperty$1(target, TO_STRING_TAG$1, { configurable: true, value: TAG });
  }
};
var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
var create2 = objectCreate;
var createPropertyDescriptor$1 = createPropertyDescriptor$4;
var setToStringTag$1 = setToStringTag$2;
var Iterators$2 = iterators;
var returnThis$1 = function() {
  return this;
};
var iteratorCreateConstructor = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG2 = NAME + " Iterator";
  IteratorConstructor.prototype = create2(IteratorPrototype$1, { next: createPropertyDescriptor$1(+!ENUMERABLE_NEXT, next) });
  setToStringTag$1(IteratorConstructor, TO_STRING_TAG2, false);
  Iterators$2[TO_STRING_TAG2] = returnThis$1;
  return IteratorConstructor;
};
var uncurryThis$5 = functionUncurryThis;
var aCallable$2 = aCallable$4;
var functionUncurryThisAccessor = function(object, key, method) {
  try {
    return uncurryThis$5(aCallable$2(Object.getOwnPropertyDescriptor(object, key)[method]));
  } catch (error) {
  }
};
var isCallable$1 = isCallable$g;
var $String$1 = String;
var $TypeError$2 = TypeError;
var aPossiblePrototype$1 = function(argument) {
  if (typeof argument == "object" || isCallable$1(argument))
    return argument;
  throw $TypeError$2("Can't set " + $String$1(argument) + " as a prototype");
};
var uncurryThisAccessor = functionUncurryThisAccessor;
var anObject$2 = anObject$7;
var aPossiblePrototype = aPossiblePrototype$1;
var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var CORRECT_SETTER = false;
  var test2 = {};
  var setter;
  try {
    setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
    setter(test2, []);
    CORRECT_SETTER = test2 instanceof Array;
  } catch (error) {
  }
  return function setPrototypeOf2(O, proto) {
    anObject$2(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER)
      setter(O, proto);
    else
      O.__proto__ = proto;
    return O;
  };
}() : void 0);
var $$4 = _export;
var call$1 = functionCall;
var FunctionName = functionName;
var isCallable = isCallable$g;
var createIteratorConstructor = iteratorCreateConstructor;
var getPrototypeOf = objectGetPrototypeOf;
var setPrototypeOf = objectSetPrototypeOf;
var setToStringTag = setToStringTag$2;
var createNonEnumerableProperty$1 = createNonEnumerableProperty$4;
var defineBuiltIn$1 = defineBuiltIn$4;
var wellKnownSymbol$1 = wellKnownSymbol$a;
var Iterators$1 = iterators;
var IteratorsCore = iteratorsCore;
var PROPER_FUNCTION_NAME$1 = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$1 = wellKnownSymbol$1("iterator");
var KEYS = "keys";
var VALUES = "values";
var ENTRIES = "entries";
var returnThis = function() {
  return this;
};
var iteratorDefine = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED2) {
  createIteratorConstructor(IteratorConstructor, NAME, next);
  var getIterationMethod = function(KIND) {
    if (KIND === DEFAULT && defaultIterator)
      return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
      return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS:
        return function keys3() {
          return new IteratorConstructor(this, KIND);
        };
      case VALUES:
        return function values2() {
          return new IteratorConstructor(this, KIND);
        };
      case ENTRIES:
        return function entries() {
          return new IteratorConstructor(this, KIND);
        };
    }
    return function() {
      return new IteratorConstructor(this);
    };
  };
  var TO_STRING_TAG2 = NAME + " Iterator";
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$1] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR$1])) {
          defineBuiltIn$1(CurrentIteratorPrototype, ITERATOR$1, returnThis);
        }
      }
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG2, true);
    }
  }
  if (PROPER_FUNCTION_NAME$1 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty$1(IterablePrototype, "name", VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values2() {
        return call$1(nativeIterator, this);
      };
    }
  }
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED2)
      for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          defineBuiltIn$1(IterablePrototype, KEY, methods[KEY]);
        }
      }
    else
      $$4({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }
  if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
    defineBuiltIn$1(IterablePrototype, ITERATOR$1, defaultIterator, { name: DEFAULT });
  }
  Iterators$1[NAME] = defaultIterator;
  return methods;
};
var createIterResultObject$1 = function(value, done) {
  return { value, done };
};
var toIndexedObject = toIndexedObject$5;
var addToUnscopables = addToUnscopables$2;
var Iterators = iterators;
var InternalStateModule = internalState;
var defineProperty3 = objectDefineProperty.f;
var defineIterator = iteratorDefine;
var createIterResultObject = createIterResultObject$1;
var DESCRIPTORS = descriptors;
var ARRAY_ITERATOR = "Array Iterator";
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
var es_array_iterator = defineIterator(Array, "Array", function(iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated),
    index: 0,
    kind
  });
}, function() {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = void 0;
    return createIterResultObject(void 0, true);
  }
  if (kind == "keys")
    return createIterResultObject(index, false);
  if (kind == "values")
    return createIterResultObject(target[index], false);
  return createIterResultObject([index, target[index]], false);
}, "values");
var values = Iterators.Arguments = Iterators.Array;
addToUnscopables("keys");
addToUnscopables("values");
addToUnscopables("entries");
if (DESCRIPTORS && values.name !== "values")
  try {
    defineProperty3(values, "name", { value: "values" });
  } catch (error) {
  }
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};
var documentCreateElement = documentCreateElement$2;
var classList = documentCreateElement("span").classList;
var DOMTokenListPrototype$1 = classList && classList.constructor && classList.constructor.prototype;
var domTokenListPrototype = DOMTokenListPrototype$1 === Object.prototype ? void 0 : DOMTokenListPrototype$1;
var global$1 = global$d;
var DOMIterables = domIterables;
var DOMTokenListPrototype = domTokenListPrototype;
var ArrayIteratorMethods = es_array_iterator;
var createNonEnumerableProperty = createNonEnumerableProperty$4;
var wellKnownSymbol = wellKnownSymbol$a;
var ITERATOR = wellKnownSymbol("iterator");
var TO_STRING_TAG = wellKnownSymbol("toStringTag");
var ArrayValues = ArrayIteratorMethods.values;
var handlePrototype = function(CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    if (CollectionPrototype[ITERATOR] !== ArrayValues)
      try {
        createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
      } catch (error) {
        CollectionPrototype[ITERATOR] = ArrayValues;
      }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME])
      for (var METHOD_NAME in ArrayIteratorMethods) {
        if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])
          try {
            createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
          } catch (error) {
            CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
          }
      }
  }
};
for (COLLECTION_NAME in DOMIterables) {
  handlePrototype(global$1[COLLECTION_NAME] && global$1[COLLECTION_NAME].prototype, COLLECTION_NAME);
}
var COLLECTION_NAME;
handlePrototype(DOMTokenListPrototype, "DOMTokenList");
var classofRaw = classofRaw$2;
var uncurryThis$4 = functionUncurryThis;
var functionUncurryThisClause = function(fn) {
  if (classofRaw(fn) === "Function")
    return uncurryThis$4(fn);
};
var $$3 = _export;
var uncurryThis$3 = functionUncurryThisClause;
var getOwnPropertyDescriptor2 = objectGetOwnPropertyDescriptor.f;
var toLength = toLength$2;
var toString$2 = toString$5;
var notARegExp = notARegexp;
var requireObjectCoercible$1 = requireObjectCoercible$5;
var correctIsRegExpLogic = correctIsRegexpLogic;
var nativeEndsWith = uncurryThis$3("".endsWith);
var slice = uncurryThis$3("".slice);
var min = Math.min;
var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("endsWith");
var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !!function() {
  var descriptor = getOwnPropertyDescriptor2(String.prototype, "endsWith");
  return descriptor && !descriptor.writable;
}();
$$3({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString) {
    var that = toString$2(requireObjectCoercible$1(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : void 0;
    var len = that.length;
    var end = endPosition === void 0 ? len : min(toLength(endPosition), len);
    var search = toString$2(searchString);
    return nativeEndsWith ? nativeEndsWith(that, search, end) : slice(that, end - search.length, end) === search;
  }
});
var anObject$1 = anObject$7;
var regexpFlags = function() {
  var that = anObject$1(this);
  var result = "";
  if (that.hasIndices)
    result += "d";
  if (that.global)
    result += "g";
  if (that.ignoreCase)
    result += "i";
  if (that.multiline)
    result += "m";
  if (that.dotAll)
    result += "s";
  if (that.unicode)
    result += "u";
  if (that.unicodeSets)
    result += "v";
  if (that.sticky)
    result += "y";
  return result;
};
var call = functionCall;
var hasOwn2 = hasOwnProperty_1;
var isPrototypeOf = objectIsPrototypeOf;
var regExpFlags = regexpFlags;
var RegExpPrototype$1 = RegExp.prototype;
var regexpGetFlags = function(R) {
  var flags = R.flags;
  return flags === void 0 && !("flags" in RegExpPrototype$1) && !hasOwn2(R, "flags") && isPrototypeOf(RegExpPrototype$1, R) ? call(regExpFlags, R) : flags;
};
var PROPER_FUNCTION_NAME = functionName.PROPER;
var defineBuiltIn = defineBuiltIn$4;
var anObject = anObject$7;
var $toString = toString$5;
var fails$3 = fails$g;
var getRegExpFlags = regexpGetFlags;
var TO_STRING = "toString";
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];
var NOT_GENERIC = fails$3(function() {
  return nativeToString.call({ source: "a", flags: "b" }) != "/a/b";
});
var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name != TO_STRING;
if (NOT_GENERIC || INCORRECT_NAME) {
  defineBuiltIn(RegExp.prototype, TO_STRING, function toString3() {
    var R = anObject(this);
    var pattern = $toString(R.source);
    var flags = $toString(getRegExpFlags(R));
    return "/" + pattern + "/" + flags;
  }, { unsafe: true });
}
var aCallable$1 = aCallable$4;
var toObject$1 = toObject$5;
var IndexedObject = indexedObject;
var lengthOfArrayLike$2 = lengthOfArrayLike$4;
var $TypeError$1 = TypeError;
var createMethod = function(IS_RIGHT) {
  return function(that, callbackfn, argumentsLength, memo) {
    aCallable$1(callbackfn);
    var O = toObject$1(that);
    var self2 = IndexedObject(O);
    var length = lengthOfArrayLike$2(O);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2)
      while (true) {
        if (index in self2) {
          memo = self2[index];
          index += i;
          break;
        }
        index += i;
        if (IS_RIGHT ? index < 0 : length <= index) {
          throw $TypeError$1("Reduce of empty array with no initial value");
        }
      }
    for (; IS_RIGHT ? index >= 0 : length > index; index += i)
      if (index in self2) {
        memo = callbackfn(memo, self2[index], index, O);
      }
    return memo;
  };
};
var arrayReduce = {
  left: createMethod(false),
  right: createMethod(true)
};
var fails$2 = fails$g;
var arrayMethodIsStrict$2 = function(METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails$2(function() {
    method.call(null, argument || function() {
      return 1;
    }, 1);
  });
};
var classof = classofRaw$2;
var engineIsNode = typeof process != "undefined" && classof(process) == "process";
var $$2 = _export;
var $reduce = arrayReduce.left;
var arrayMethodIsStrict$1 = arrayMethodIsStrict$2;
var CHROME_VERSION = engineV8Version;
var IS_NODE = engineIsNode;
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
var FORCED$2 = CHROME_BUG || !arrayMethodIsStrict$1("reduce");
$$2({ target: "Array", proto: true, forced: FORCED$2 }, {
  reduce: function reduce(callbackfn) {
    var length = arguments.length;
    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
  }
});
var isMintProposal = (actionData, dao) => {
  return actionData.some((action) => {
    if (isActionError(action))
      return false;
    const isDao = action.to.toLowerCase() === dao.id.toLocaleLowerCase();
    const isMint = action.name === "mintShares" || action.name === "mintLoot";
    return isDao && isMint;
  });
};
var isTributeProposal = (proposal) => {
  return proposal.tributeEscrowRecipient !== null;
};
var isFundingProposal = (actionData) => {
  return actionData.some((action) => {
    return !isActionError(action) && action.name === "transfer";
  });
};
var getValueFromMintOrTransferAction = (actionData, decimals = 18) => {
  if (actionData.params[0].name !== "to" && !["amount", "_value", "wad"].includes(actionData.params[1].name)) {
    return "decoding error";
  }
  const value = actionData.params[1].type.endsWith("[]") ? actionData.params[1].value.toString().split(",").map((v) => BigInt(v)) : [BigInt(actionData.params[1].value.toString())];
  return (0, import_utils.formatValueTo)({
    value: (0, import_utils.toWholeUnits)(value.reduce((val, accValue) => accValue + val, BigInt(0)).toString(), decimals),
    decimals: 2,
    format: "numberShort"
  });
};
var getValueFromTributeData = (proposal) => {
  if (!proposal.tributeOffered || !proposal.tributeTokenDecimals) {
    return "decoding err";
  }
  return `${(0, import_utils.formatValueTo)({
    value: (0, import_utils.toWholeUnits)(proposal.tributeOffered, Number(proposal.tributeTokenDecimals)),
    decimals: 2,
    format: "numberShort"
  })} ${proposal.tributeTokenSymbol}`;
};
var getRecipientAddressFromMintOrTransferAction = (actionData) => {
  if (actionData.params[0].name !== "to" && !["amount", "_value", "wad"].includes(actionData.params[1].name)) {
    return "decoding error";
  }
  return Array.isArray(actionData.params[0].value) ? actionData.params[0].value[0].toString() : actionData.params[0].value.toString();
};
var addTributeData = (proposal, actionData, dao) => {
  let data2 = [];
  const sharesAction = actionData.find((action) => {
    return !isActionError(action) && action.name === "mintShares";
  });
  if (sharesAction && !isActionError(sharesAction)) {
    data2 = [...data2, {
      displayType: "data",
      label: "Voting Tokens Requested",
      value: `${getValueFromMintOrTransferAction(sharesAction)} ${dao.shareTokenSymbol}`
    }];
  }
  const lootAction = actionData.find((action) => {
    return !isActionError(action) && action.name === "mintLoot";
  });
  if (lootAction && !isActionError(lootAction)) {
    data2 = [...data2, {
      displayType: "data",
      label: "Non-Voting Tokens Requested",
      value: `${getValueFromMintOrTransferAction(lootAction)} ${dao.lootTokenSymbol}`
    }];
  }
  return [...data2, {
    displayType: "data",
    label: "Tribute Amount",
    value: getValueFromTributeData(proposal)
  }];
};
var addMintData = (actionData, dao) => {
  let data2 = [];
  let recipient = {};
  const sharesAction = actionData.find((action) => {
    return !isActionError(action) && action.name === "mintShares";
  });
  const lootAction = actionData.find((action) => {
    return !isActionError(action) && action.name === "mintLoot";
  });
  if (sharesAction && !isActionError(sharesAction)) {
    data2 = [...data2, {
      displayType: "data",
      label: "Voting Tokens Requested",
      value: `${getValueFromMintOrTransferAction(sharesAction)} ${dao.shareTokenSymbol}`
    }];
    recipient = {
      displayType: "member",
      label: "Recipient",
      value: getRecipientAddressFromMintOrTransferAction(sharesAction)
    };
  }
  if (lootAction && !isActionError(lootAction)) {
    data2 = [...data2, {
      displayType: "data",
      label: "Non-Voting Tokens Requested",
      value: `${getValueFromMintOrTransferAction(lootAction)} ${dao.lootTokenSymbol}`
    }];
    recipient = {
      displayType: "member",
      label: "Recipient",
      value: getRecipientAddressFromMintOrTransferAction(lootAction)
    };
  }
  return [...data2, recipient];
};
var addFundingData = (actionData, daoChain) => __awaiter(void 0, void 0, void 0, function* () {
  let data2 = [];
  if (!isActionError(actionData[0])) {
    const recipient = {
      displayType: "member",
      label: "Recipient",
      value: getRecipientAddressFromMintOrTransferAction(actionData[0])
    };
    const tokenData = yield fetchTokenData({
      actionData: actionData[0],
      chainId: daoChain
    });
    const amount = {
      displayType: "data",
      label: "Funding Amount",
      value: `${getValueFromMintOrTransferAction(actionData[0], tokenData === null || tokenData === void 0 ? void 0 : tokenData.decimals)} ${tokenData === null || tokenData === void 0 ? void 0 : tokenData.symbol}`
    };
    data2 = [recipient, amount];
  }
  return data2;
});
var fetchTokenData = ({
  actionData,
  chainId,
  rpcs
}) => __awaiter(void 0, void 0, void 0, function* () {
  const tokenAddress = actionData.to;
  const client = (0, import_utils.createViemClient)({
    chainId,
    rpcs
  });
  try {
    const decimals = yield client.readContract({
      abi: import_abis.LOCAL_ABI.ERC20,
      address: tokenAddress,
      functionName: "decimals"
    });
    const symbol = yield client.readContract({
      abi: import_abis.LOCAL_ABI.ERC20,
      address: tokenAddress,
      functionName: "symbol"
    });
    return {
      tokenAddress,
      decimals,
      symbol
    };
  } catch (_a) {
    console.log("token fetch error");
  }
});
var formatAddtionalDataPoints = (proposal, actionData, dao, daoChain) => __awaiter(void 0, void 0, void 0, function* () {
  if (isTributeProposal(proposal)) {
    return addTributeData(proposal, actionData, dao);
  }
  if (isMintProposal(actionData, dao)) {
    return addMintData(actionData, dao);
  }
  if (isFundingProposal(actionData)) {
    return addFundingData(actionData, daoChain);
  }
});
var MemberDataPoint = ({
  dataPoint,
  includeLinks: _includeLinks = false,
  daoChain,
  daoId
}) => {
  const {
    profile
  } = useProfile({
    address: dataPoint.value
  });
  return (0, import_jsx_runtime.jsxs)("div", {
    children: [(0, import_jsx_runtime.jsx)(ParMd, {
      children: dataPoint.label
    }), (0, import_jsx_runtime.jsxs)(MemberCard, Object.assign({
      variant: "ghost",
      profile: profile || {
        address: dataPoint.value
      }
    }, {
      children: [_includeLinks && (0, import_jsx_runtime.jsx)(MemberCardItem, Object.assign({
        asChild: true
      }, {
        children: (0, import_jsx_runtime.jsx)(StyledRouterLink$1, Object.assign({
          to: `/molochV3/${daoChain}/${daoId}/member/${dataPoint.value}`
        }, {
          children: "View Profile"
        }))
      })), (0, import_jsx_runtime.jsx)(MemberCardExplorerLink, Object.assign({
        explorerNetworkId: daoChain,
        profileAddress: dataPoint.value
      }, {
        children: "View On Etherscan"
      })), (0, import_jsx_runtime.jsx)(MemberCardCopyAddress, Object.assign({
        profileAddress: dataPoint.value
      }, {
        children: "Copy Address"
      }))]
    }))]
  }, dataPoint.label);
};
var ProposalAddtionalDetails = ({
  daoChain,
  daoId,
  proposal,
  includeLinks: _includeLinks = false,
  actionData
}) => {
  const {
    dao
  } = useDaoData();
  const [addtionalData, setAddtionalData] = (0, import_react.useState)();
  (0, import_react.useEffect)(() => {
    const fetchData = () => __awaiter(void 0, void 0, void 0, function* () {
      if (!proposal || !actionData || !dao)
        return;
      const addData = yield formatAddtionalDataPoints(proposal, actionData, dao, daoChain);
      setAddtionalData(addData);
    });
    fetchData();
  }, [actionData, proposal, dao, daoChain]);
  if (!addtionalData)
    return null;
  return (0, import_jsx_runtime.jsx)(DataContainer, {
    children: addtionalData.map((dataPoint) => {
      if (dataPoint.displayType === "data") {
        return (0, import_jsx_runtime.jsx)(DataIndicator, {
          label: dataPoint.label,
          data: dataPoint.value,
          size: "sm"
        }, dataPoint.label);
      }
      if (dataPoint.displayType === "member") {
        return (0, import_jsx_runtime.jsx)(MemberDataPoint, {
          daoId,
          daoChain,
          dataPoint,
          includeLinks: _includeLinks
        }, dataPoint.label);
      }
      return null;
    })
  });
};
var _$d = (t) => t;
var _t$d;
var _t2$6;
var _t3$5;
var _t4$4;
var _t5$4;
var _t6$4;
var _t7$3;
var _t8$2;
var _t9$1;
var _t10$1;
var _t11$1;
var _t12$1;
var _t13$1;
var MainContainer = st.div(_t$d || (_t$d = _$d`
  padding: 0rem 2.6rem;
`));
var LoadingContainer = st.div(_t2$6 || (_t2$6 = _$d`
  display: flex;
  justify-content: center;
`));
var TitleContainer = st.div(_t3$5 || (_t3$5 = _$d`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
`));
var DisplayContainer = st.div(_t4$4 || (_t4$4 = _$d`
  margin-top: 2rem;

  .display-segment {
    display: flex;
    flex-direction: column;
    padding-bottom: 1.5rem;
  }

  .data {
    word-break: break-all;
    margin-bottom: 2rem;
    .space,
    .address-display {
      margin-bottom: 2rem;
    }
  }
  .value-box {
    display: flex;
  }
  .spaced-divider {
    margin-bottom: 2rem;
  }
`));
var AlertContainer$1 = st.div(_t5$4 || (_t5$4 = _$d`
  margin-bottom: 2rem;
`));
var WarningContainer = st(Card)(_t6$4 || (_t6$4 = _$d`
  display: flex;
  width: 100%;
  background-color: ${0};
  border-color: ${0};
`), ({
  theme,
  $error,
  $warning
}) => $error && theme.danger.step3 || $warning && theme.warning.step3, ({
  theme,
  $error,
  $warning
}) => $error && theme.danger.step7 || $warning && theme.warning.step7);
var StyledParXs = st(ParXs)(_t7$3 || (_t7$3 = _$d`
  color: ${0};
`), ({
  theme,
  $error,
  $warning
}) => $error && theme.danger.step12 || $warning && theme.warning.step12);
st.div(_t8$2 || (_t8$2 = _$d`
  margin-top: 2rem;
`));
var WarningIcon$1 = st(import_ri.RiErrorWarningLine)(_t9$1 || (_t9$1 = _$d`
  color: ${0};
  height: 2.5rem;
  width: 2.5rem;
`), ({
  theme
}) => theme.warning.step9);
var IconContainer = st.div(_t10$1 || (_t10$1 = _$d`
  margin-right: 1rem;
`));
var MessageContainer = st.div(_t11$1 || (_t11$1 = _$d``));
var StyledUpArrow$1 = st(import_ri.RiArrowUpSLine)(_t12$1 || (_t12$1 = _$d`
  font-size: 3rem;
  font-weight: 900;
  color: ${0};
`), ({
  theme
}) => theme.primary.step10);
var StyledDownArrow$1 = st(import_ri.RiArrowDownSLine)(_t13$1 || (_t13$1 = _$d`
  font-size: 3rem;
  font-weight: 900;
  color: ${0};
`), ({
  theme
}) => theme.primary.step10);
var ProposalWarning = ({
  proposalType,
  decodeError: _decodeError = false,
  txHash,
  proposalActionConfig,
  daoChain
}) => {
  var _a;
  const warningMessage = (0, import_react.useMemo)(() => {
    var _a2;
    if (_decodeError) {
      return import_utils.PROPOSAL_TYPE_WARNINGS.ERROR_CANNOT_DECODE;
    } else {
      return proposalType && ((_a2 = proposalActionConfig === null || proposalActionConfig === void 0 ? void 0 : proposalActionConfig.proposalTypeWarning) === null || _a2 === void 0 ? void 0 : _a2[proposalType]);
    }
  }, [proposalType, _decodeError, proposalActionConfig]);
  const hasWarning = _decodeError || proposalType && ((_a = proposalActionConfig === null || proposalActionConfig === void 0 ? void 0 : proposalActionConfig.sensitiveProposalTypes) === null || _a === void 0 ? void 0 : _a[proposalType]) || warningMessage === import_utils.PROPOSAL_TYPE_WARNINGS.ERROR_UNKOWN;
  const hasError = false;
  if (!hasWarning)
    return null;
  return (0, import_jsx_runtime.jsxs)(WarningContainer, Object.assign({
    className: "container",
    "$error": hasError,
    "$warning": hasWarning
  }, {
    children: [(0, import_jsx_runtime.jsx)(IconContainer, {
      children: (0, import_jsx_runtime.jsx)(Icon$1, Object.assign({
        label: "Warning"
      }, {
        children: (0, import_jsx_runtime.jsx)(WarningIcon$1, {})
      }))
    }), (0, import_jsx_runtime.jsxs)(MessageContainer, {
      children: [(0, import_jsx_runtime.jsx)(StyledParXs, Object.assign({
        "$error": hasError,
        "$warning": hasWarning
      }, {
        children: warningMessage
      })), _decodeError || hasError]
    })]
  }));
};
var _$c = (t) => t;
var _t$c;
var Spacer = st.div(_t$c || (_t$c = _$c`
  margin-bottom: 2rem;
`));
var ProposalDetails = ({
  daoChain,
  daoId,
  proposal,
  includeLinks: _includeLinks = false,
  actionData,
  decodeError: _decodeError = false,
  proposalActionConfig
}) => {
  var _a;
  const {
    networks
  } = useDHConnect();
  const {
    profile: submitterProfile
  } = useProfile({
    address: proposal.createdBy
  });
  return (0, import_jsx_runtime.jsxs)(OverviewContainer$1, {
    children: [(0, import_jsx_runtime.jsx)(Markdown, Object.assign({
      className: "description"
    }, {
      children: proposal.description
    })), proposal.contentURI && (0, import_jsx_runtime.jsx)(Link$1, Object.assign({
      href: proposal.contentURI,
      className: "proposal-link"
    }, {
      children: "Link"
    })), (0, import_jsx_runtime.jsxs)(DataContainer, {
      children: [(0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParMd, {
          children: "Submitted by"
        }), (0, import_jsx_runtime.jsxs)(MemberCard, Object.assign({
          variant: "ghost",
          profile: submitterProfile || {
            address: proposal.createdBy
          }
        }, {
          children: [_includeLinks && (0, import_jsx_runtime.jsx)(MemberCardItem, Object.assign({
            asChild: true
          }, {
            children: (0, import_jsx_runtime.jsx)(StyledRouterLink$1, Object.assign({
              to: `/molochV3/${daoChain}/${daoId}/proposal/${proposal.proposalId}`
            }, {
              children: "View Profile"
            }))
          })), (0, import_jsx_runtime.jsx)(MemberCardExplorerLink, Object.assign({
            explorerNetworkId: daoChain,
            profileAddress: (submitterProfile === null || submitterProfile === void 0 ? void 0 : submitterProfile.address) || proposal.createdBy
          }, {
            children: "View On Etherscan"
          })), (0, import_jsx_runtime.jsx)(MemberCardCopyAddress, Object.assign({
            profileAddress: (submitterProfile === null || submitterProfile === void 0 ? void 0 : submitterProfile.address) || proposal.createdBy
          }, {
            children: "Copy Address"
          }))]
        }))]
      }), (0, import_jsx_runtime.jsx)(DataIndicator, {
        label: "Expiration Date",
        data: Number(proposal.expiration) ? (0, import_utils.formatShortDateTimeFromSeconds)(proposal.expiration) : "--",
        size: "sm"
      })]
    }), proposal.proposedBy && proposal.proposedBy !== proposal.createdBy && (0, import_jsx_runtime.jsx)(DataContainer, Object.assign({
      style: {
        marginTop: "1rem"
      }
    }, {
      children: (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParMd, {
          children: "Through Contract"
        }), (0, import_jsx_runtime.jsxs)(MemberCard, Object.assign({
          variant: "ghost",
          profile: {
            address: proposal.proposedBy
          }
        }, {
          children: [_includeLinks && (0, import_jsx_runtime.jsx)(MemberCardItem, Object.assign({
            asChild: true
          }, {
            children: (0, import_jsx_runtime.jsx)(StyledRouterLink$1, Object.assign({
              to: `/molochv3/${daoChain}/${daoId}/members/${proposal.proposedBy}`
            }, {
              children: "View Profile"
            }))
          })), (0, import_jsx_runtime.jsx)(MemberCardExplorerLink, Object.assign({
            explorerNetworkId: daoChain,
            profileAddress: proposal.proposedBy
          }, {
            children: "View on Etherscan"
          })), (0, import_jsx_runtime.jsx)(MemberCardCopyAddress, Object.assign({
            profileAddress: proposal.proposedBy
          }, {
            children: "Copy Address"
          }))]
        }))]
      })
    })), Number(proposal.proposalOffering) > 0 && (0, import_jsx_runtime.jsx)(DataIndicator, {
      label: "Proposal Offering",
      data: (0, import_utils.formatValueTo)({
        value: (0, import_utils.fromWei)(proposal.proposalOffering),
        format: "number",
        unit: (_a = networks === null || networks === void 0 ? void 0 : networks[daoChain]) === null || _a === void 0 ? void 0 : _a.symbol,
        decimals: (0, import_utils.dynamicDecimals)({
          baseUnits: Number(proposal.proposalOffering)
        })
      }),
      size: "sm"
    }), (0, import_jsx_runtime.jsx)(ProposalAddtionalDetails, {
      daoChain,
      daoId,
      proposal,
      includeLinks: _includeLinks,
      actionData
    }), (0, import_jsx_runtime.jsx)(Spacer, {}), (0, import_jsx_runtime.jsx)(ProposalWarning, {
      proposalType: proposal.proposalType,
      decodeError: _decodeError,
      txHash: proposal.txHash,
      daoChain,
      proposalActionConfig
    })]
  });
};
var ActionAlert = ({
  action,
  daoId,
  proposalType,
  proposalActionConfig,
  daoChain
}) => {
  var _a, _b;
  const actionType = (_a = proposalActionConfig === null || proposalActionConfig === void 0 ? void 0 : proposalActionConfig.actionToProposalType) === null || _a === void 0 ? void 0 : _a[action.name];
  if (actionType && proposalType && (action.to === daoId || proposalType !== actionType) && ((_b = proposalActionConfig === null || proposalActionConfig === void 0 ? void 0 : proposalActionConfig.sensitiveProposalTypes) === null || _b === void 0 ? void 0 : _b[actionType])) {
    return (0, import_jsx_runtime.jsx)(AlertContainer$1, {
      children: (0, import_jsx_runtime.jsx)(ProposalWarning, {
        proposalActionConfig,
        proposalType: actionType,
        txHash: "",
        daoChain
      })
    });
  }
  return null;
};
var ValueDisplay = ({
  argValue,
  argType,
  network,
  isMobile
}) => {
  if (Array.isArray(argValue)) {
    const displayValue = argType === "tuple" ? Object.entries(Object.assign({}, argValue)).filter((entry) => !(0, import_utils.isNumberish)(entry[0])) : argValue;
    return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
      children: displayValue.map((value, index) => {
        return (0, import_jsx_runtime.jsxs)("div", Object.assign({
          className: "space"
        }, {
          children: [(0, import_jsx_runtime.jsx)(ValueDisplay, {
            argValue: Array.isArray(value) ? `${value[0]}: ${value[1]}` : value,
            argType,
            network
          }), index + 1 < (argValue === null || argValue === void 0 ? void 0 : argValue.length) && (0, import_jsx_runtime.jsx)(Divider, {})]
        }), `argValue${index}`);
      })
    });
  }
  if ((0, import_utils.isEthAddress)(argValue)) {
    return (0, import_jsx_runtime.jsx)(AddressDisplay, {
      address: argValue,
      copy: true,
      explorerNetworkId: network,
      className: "space",
      truncate: isMobile
    });
  }
  if (typeof argValue === "boolean") {
    return (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
      className: "space"
    }, {
      children: `${argValue}`
    }));
  }
  if (typeof argValue === "string" || typeof argValue === "number") {
    return (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
      className: "space"
    }, {
      children: argValue
    }));
  }
  return (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
    className: "space"
  }, {
    children: argValue.toString()
  }));
};
var ProposalActionData = ({
  daoChain,
  daoId,
  proposal,
  proposalActionConfig: _proposalActionConfig = {
    sensitiveProposalTypes: import_utils.SENSITIVE_PROPOSAL_TYPES,
    actionToProposalType: import_utils.DAO_METHOD_TO_PROPOSAL_TYPE,
    proposalTypeWarning: import_utils.PROPOSAL_TYPE_WARNINGS
  },
  actionData,
  decodeError: _decodeError = false
}) => {
  return (0, import_jsx_runtime.jsxs)(MainContainer, {
    children: [(0, import_jsx_runtime.jsxs)(DisplayContainer, {
      children: [(0, import_jsx_runtime.jsxs)(TitleContainer, {
        children: [(0, import_jsx_runtime.jsx)(ParMd, {
          children: (0, import_jsx_runtime.jsx)(Bold, {
            children: "All Actions"
          })
        }), !actionData && (0, import_jsx_runtime.jsx)(LoadingContainer, {
          children: (0, import_jsx_runtime.jsx)(Loading, {
            size: 20
          })
        })]
      }), actionData === null || actionData === void 0 ? void 0 : actionData.map((action, index) => {
        return (0, import_jsx_runtime.jsxs)("div", {
          children: [(0, import_jsx_runtime.jsx)(ActionSection, {
            index,
            action,
            daoId,
            daoChain,
            proposal,
            proposalActionConfig: _proposalActionConfig,
            actionHeader: `${index + 1}.`
          }), (0, import_jsx_runtime.jsx)(SubActions, {
            daoChain,
            daoId,
            proposal,
            proposalActionConfig: _proposalActionConfig,
            action,
            index,
            actionHeader: `-`
          })]
        }, index);
      })]
    }), _decodeError && (0, import_jsx_runtime.jsx)(ProposalWarning, {
      proposalType: proposal.proposalType,
      decodeError: _decodeError,
      txHash: proposal.txHash,
      proposalActionConfig: _proposalActionConfig,
      daoChain
    })]
  });
};
var SubActions = ({
  action,
  index,
  actionHeader,
  daoChain,
  daoId,
  proposal,
  proposalActionConfig
}) => {
  if (isActionError(action) || !action.decodedActions || action.decodedActions.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children: action.decodedActions.map((subAction, i) => (0, import_jsx_runtime.jsxs)("div", {
      children: [(0, import_jsx_runtime.jsx)(ActionSection, {
        daoChain,
        daoId,
        proposal,
        proposalActionConfig,
        action: subAction,
        index,
        actionHeader: `-`
      }), (0, import_jsx_runtime.jsx)(SubActions, {
        daoChain,
        daoId,
        proposal,
        proposalActionConfig,
        action: subAction,
        index,
        actionHeader
      })]
    }, i))
  });
};
var ActionToggle = ({
  action,
  actionHeader,
  children
}) => {
  const [open, setOpen] = (0, import_react.useState)(false);
  const handleToggle = () => {
    setOpen((prevState) => !prevState);
  };
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsxs)(TitleContainer, {
      children: [(0, import_jsx_runtime.jsxs)(ParLg, Object.assign({
        className: "space"
      }, {
        children: [actionHeader, " ", "name" in action ? action.name : "Decoding Error"]
      })), open && (0, import_jsx_runtime.jsx)("div", Object.assign({
        onClick: handleToggle
      }, {
        children: (0, import_jsx_runtime.jsx)(StyledUpArrow$1, {})
      })), !open && (0, import_jsx_runtime.jsx)("div", Object.assign({
        onClick: handleToggle
      }, {
        children: (0, import_jsx_runtime.jsx)(StyledDownArrow$1, {})
      }))]
    }), open && (0, import_jsx_runtime.jsx)("div", Object.assign({
      className: "data"
    }, {
      children
    }))]
  });
};
var ActionSectionError = ({
  action,
  index
}) => {
  return (0, import_jsx_runtime.jsxs)("div", Object.assign({
    className: "display-segment data"
  }, {
    children: [(0, import_jsx_runtime.jsxs)(H4, Object.assign({
      className: "space"
    }, {
      children: ["Action ", index + 1, ": Error"]
    })), (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
      className: "space"
    }, {
      children: action.message
    })), (0, import_jsx_runtime.jsx)(Divider, {
      className: "space"
    }), (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
      className: "space"
    }, {
      children: (0, import_jsx_runtime.jsx)(Bold, {
        children: "HEX DATA:"
      })
    })), (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
      className: "space"
    }, {
      children: action.data
    }))]
  }), `${action.message}-${index}`);
};
var ActionSection = ({
  action,
  index,
  actionHeader,
  daoChain,
  daoId,
  proposal,
  proposalActionConfig
}) => {
  var _a;
  const network = (0, import_keychain_utils.isValidNetwork)(daoChain) ? daoChain : void 0;
  const isMobile = useBreakpoint(widthQuery.sm);
  if (isActionError(action)) {
    return (0, import_jsx_runtime.jsx)(ActionSectionError, {
      index,
      action
    });
  }
  return (0, import_jsx_runtime.jsx)("div", Object.assign({
    className: "display-segment"
  }, {
    children: (0, import_jsx_runtime.jsx)(ActionToggle, Object.assign({
      actionHeader,
      action
    }, {
      children: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
        children: [(0, import_jsx_runtime.jsx)(ActionAlert, {
          action,
          daoId,
          daoChain,
          proposalType: proposal.proposalType,
          proposalActionConfig
        }), (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
          className: "space"
        }, {
          children: (0, import_jsx_runtime.jsx)(Bold, {
            children: "TARGET"
          })
        })), (0, import_jsx_runtime.jsx)(AddressDisplay, {
          className: "space",
          address: action.to,
          copy: true,
          explorerNetworkId: network,
          truncate: isMobile
        }), (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
          className: "space"
        }, {
          children: (0, import_jsx_runtime.jsx)(Bold, {
            children: "VALUE"
          })
        })), (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
          className: "space"
        }, {
          children: action.value
        })), (0, import_jsx_runtime.jsx)(Divider, {
          className: "spaced-divider"
        }), (_a = action.params) === null || _a === void 0 ? void 0 : _a.map((arg, index2) => {
          return (0, import_jsx_runtime.jsxs)("div", Object.assign({
            className: "data"
          }, {
            children: [(0, import_jsx_runtime.jsxs)(DataSm, Object.assign({
              className: "space"
            }, {
              children: [(0, import_jsx_runtime.jsxs)(Bold, {
                children: ["PARAM", index2 + 1, ":", " "]
              }), arg.name]
            })), (0, import_jsx_runtime.jsxs)(DataSm, Object.assign({
              className: "space"
            }, {
              children: [(0, import_jsx_runtime.jsx)(Bold, {
                children: "TYPE: "
              }), arg.type]
            })), (0, import_jsx_runtime.jsx)(DataSm, Object.assign({
              className: "space"
            }, {
              children: (0, import_jsx_runtime.jsx)(Bold, {
                children: "VALUE: "
              })
            })), (0, import_jsx_runtime.jsx)(ValueDisplay, {
              argValue: arg.value,
              argType: arg.type,
              network,
              isMobile
            }), (0, import_jsx_runtime.jsx)(Divider, {})]
          }), `${arg.name}-${index2}`);
        })]
      })
    }))
  }), `action_${index}`);
};
var ProposalDetailsContainer = ({
  daoChain,
  daoId,
  proposal,
  includeLinks: _includeLinks = false,
  proposalActionConfig: _proposalActionConfig = {
    sensitiveProposalTypes: import_utils.SENSITIVE_PROPOSAL_TYPES,
    actionToProposalType: import_utils.DAO_METHOD_TO_PROPOSAL_TYPE,
    proposalTypeWarning: import_utils.PROPOSAL_TYPE_WARNINGS
  },
  txLegos: _txLegos = import_moloch_v3_legos.TX
}) => {
  const [decodeError, setDecodeError] = (0, import_react.useState)(false);
  const [actionData, setActionData] = (0, import_react.useState)();
  const [actionsMeta, setActionsMeta] = (0, import_react.useState)();
  (0, import_react.useEffect)(() => {
    var _a, _b;
    if (proposal === null || proposal === void 0 ? void 0 : proposal.proposalType) {
      const txLego = (_b = (_a = _txLegos[proposal.proposalType]) === null || _a === void 0 ? void 0 : _a.args) === null || _b === void 0 ? void 0 : _b.find((tx) => tx.type === "multicall");
      setActionsMeta(txLego && txLego.actions);
    }
  }, [proposal === null || proposal === void 0 ? void 0 : proposal.proposalType, _txLegos]);
  (0, import_react.useEffect)(() => {
    let shouldUpdate = true;
    const fetchPropActions = (chainId, actionData2, _actionMeta) => __awaiter(void 0, void 0, void 0, function* () {
      const proposalActions = yield deepDecodeProposalActions({
        chainId,
        actionData: actionData2
      });
      if (shouldUpdate) {
        setActionData(proposalActions);
        setDecodeError(proposalActions.length === 0 || proposalActions.some((action) => isActionError(action)));
      }
    });
    if (!(0, import_keychain_utils.isValidNetwork)(daoChain) || !proposal)
      return;
    fetchPropActions(daoChain, proposal.proposalData);
    return () => {
      shouldUpdate = false;
    };
  }, [daoChain, proposal, actionsMeta]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)(ProposalDetails, {
      daoChain,
      daoId,
      proposal,
      actionData,
      decodeError,
      includeLinks: _includeLinks,
      proposalActionConfig: _proposalActionConfig
    }), (0, import_jsx_runtime.jsx)(ProposalActionData, {
      daoChain,
      daoId,
      proposal,
      actionData,
      actionsMeta,
      decodeError,
      proposalActionConfig: _proposalActionConfig
    })]
  });
};
var buildProposalHistory = ({
  proposal,
  networkData
}) => {
  if (proposal.status === import_utils.PROPOSAL_STATUS.unsponsored) {
    return buildUnsponsoredElements({
      proposal,
      networkData
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.cancelled) {
    return buildCancelledElements({
      proposal,
      networkData
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.voting) {
    return buildVotingElements({
      proposal,
      networkData
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.grace) {
    return buildGraceElements({
      proposal,
      networkData
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.needsProcessing) {
    return buildNeedsProcessingElements({
      proposal,
      networkData
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.actionFailed || proposal.status === import_utils.PROPOSAL_STATUS.passed) {
    return buildCompletedElements({
      proposal,
      networkData
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.failed) {
    return buildFailedElements({
      proposal,
      networkData
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.expired) {
    return buildExpiredElements({
      proposal,
      networkData
    });
  }
  return [{
    title: "Pending",
    active: false,
    canExpand: false
  }];
};
var buildExpiredElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), buildSponsored({
    proposal
  }), buildVotingPast({
    proposal
  }), buildGracePast({
    proposal
  }), {
    title: "Proposal Expired",
    text: (0, import_utils.formatShortDateTimeFromSeconds)(proposal.expiration),
    active: false,
    canExpand: false
  }];
};
var buildFailedElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), buildSponsored({
    proposal
  }), buildVotingPast({
    proposal
  }), buildGracePast({
    proposal
  }), {
    title: "Proposal Failed",
    active: false,
    canExpand: false
  }];
};
var buildCompletedElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), buildSponsored({
    proposal
  }), buildVotingPast({
    proposal
  }), buildGracePast({
    proposal
  }), {
    title: `Proposal Complete`,
    active: false,
    canExpand: true,
    dataElements: [{
      dataType: "member",
      label: "Executed By",
      data: proposal.processedBy || "--"
    }],
    txHash: proposal.processTxHash
  }];
};
var buildNeedsProcessingElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), buildSponsored({
    proposal
  }), buildVotingPast({
    proposal
  }), buildGracePast({
    proposal
  }), {
    title: "Proposal Complete",
    active: proposal.status === import_utils.PROPOSAL_STATUS.needsProcessing,
    text: `Waiting to be executed...`,
    canExpand: false
  }];
};
var buildGraceElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), buildSponsored({
    proposal
  }), buildVotingPast({
    proposal
  }), {
    title: "Grace Period",
    active: proposal.status === import_utils.PROPOSAL_STATUS.grace,
    text: `Grace period ends ${(0, import_utils.formatDistanceToNowFromSeconds)(proposal.graceEnds)}`,
    canExpand: false
  }, buildCompletedFuture({
    proposal
  })];
};
var buildVotingElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), buildSponsored({
    proposal
  }), {
    title: "Voting in Progress",
    active: proposal.status === import_utils.PROPOSAL_STATUS.voting,
    text: `${(0, import_utils.formatValueTo)({
      value: (0, import_utils.fromWei)(proposal.yesBalance),
      decimals: 2,
      format: "numberShort"
    })} Yes / ${(0, import_utils.formatValueTo)({
      value: (0, import_utils.fromWei)(proposal.noBalance),
      decimals: 2,
      format: "numberShort"
    })} No -- Voting ends ${(0, import_utils.formatDistanceToNowFromSeconds)(proposal.votingEnds)}`,
    canExpand: false,
    showVotesButton: true
  }, buildCompletedFuture({
    proposal
  })];
};
var buildCancelledElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), buildSponsored({
    proposal
  }), buildVotingPast({
    proposal
  }), {
    title: "Proposal Cancelled",
    active: false,
    canExpand: false
  }];
};
var buildUnsponsoredElements = ({
  proposal,
  networkData
}) => {
  return [buildSubmitted({
    proposal,
    networkData
  }), {
    title: "Waiting on Sponsor",
    active: false,
    canExpand: false
  }, {
    title: "Voting Period",
    text: `Voting will last ${(0, import_utils.formatPeriods)(proposal.votingPeriod)}`,
    active: false,
    canExpand: false
  }, buildGraceFuture({
    proposal
  }), buildCompletedFuture({
    proposal
  })];
};
var buildGraceFuture = ({
  proposal
}) => {
  return {
    title: "Grace Period",
    text: `Grace will last ${(0, import_utils.formatPeriods)(proposal.gracePeriod)}`,
    active: false,
    canExpand: false
  };
};
var buildGracePast = ({
  proposal
}) => {
  return {
    title: "Grace Period",
    active: false,
    text: (0, import_utils.formatDateTimeFromSeconds)(proposal.graceEnds),
    canExpand: false
  };
};
var buildVotingPast = ({
  proposal
}) => {
  return {
    title: "Voting Complete",
    active: false,
    text: `${(0, import_utils.formatValueTo)({
      value: (0, import_utils.fromWei)(proposal.yesBalance),
      decimals: 2,
      format: "numberShort"
    })} Yes / ${(0, import_utils.formatValueTo)({
      value: (0, import_utils.fromWei)(proposal.noBalance),
      decimals: 2,
      format: "numberShort"
    })} No`,
    canExpand: false,
    showVotesButton: true
  };
};
var buildCompletedFuture = ({
  proposal
}) => {
  return {
    title: "Proposal Completion",
    text: proposal.expiration !== "0" ? `Proposal will expire on ${(0, import_utils.formatShortDateTimeFromSeconds)(proposal.expiration)}` : void 0,
    active: false,
    canExpand: false
  };
};
var buildSponsored = ({
  proposal
}) => {
  return {
    title: "Sponsored",
    active: false,
    text: (0, import_utils.formatDateTimeFromSeconds)(proposal.sponsorTxAt),
    canExpand: true,
    dataElements: [{
      dataType: "member",
      label: "Sponsored By",
      data: proposal.sponsor || "--"
    }],
    txHash: proposal.sponsorTxHash
  };
};
var buildSubmitted = ({
  proposal,
  networkData
}) => {
  return {
    title: "Submitted",
    active: proposal.status === import_utils.PROPOSAL_STATUS.unsponsored,
    text: (0, import_utils.formatDateTimeFromSeconds)(proposal.createdAt),
    canExpand: true,
    dataElements: [{
      dataType: "member",
      label: "Submitted By",
      data: proposal.createdBy
    }, {
      dataType: "dataIndicator",
      label: "Proposal Offering",
      data: `${(0, import_utils.fromWei)(proposal.proposalOffering)} ${networkData === null || networkData === void 0 ? void 0 : networkData.symbol}`
    }],
    txHash: proposal.txHash
  };
};
var _$b = (t) => t;
var _t$b;
var _t2$5;
var _t3$4;
var _t4$3;
var _t5$3;
var _t6$3;
var _t7$2;
var _t8$1;
var _t9;
var _t10;
var _t11;
var _t12;
var _t13;
var HistoryListContainer = st.div(_t$b || (_t$b = _$b`
  min-width: 40.5rem;
  @media ${0} {
    max-width: 100%;
    min-width: 0;
  }
`), widthQuery.xs);
var ElementContainer = st.div(_t2$5 || (_t2$5 = _$b`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  padding: 2rem 0;
  border-bottom: 1px solid #ffffff16;
`));
var VisibleContainer = st.div(_t3$4 || (_t3$4 = _$b`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: flex-start;
`));
var ContentContainer = st.div(_t4$3 || (_t4$3 = _$b`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  gap: 1rem;
`));
var StyledTitle = st(Bold)(_t5$3 || (_t5$3 = _$b`
  color: ${0};
`), ({
  theme,
  $active
}) => $active && theme.primary.step10);
var StyledUpArrow = st(import_ri.RiArrowUpSLine)(_t6$3 || (_t6$3 = _$b`
  font-size: 4.8rem;
  font-weight: 900;
  color: ${0};
`), ({
  theme
}) => theme.primary.step10);
var StyledDownArrow = st(import_ri.RiArrowDownSLine)(_t7$2 || (_t7$2 = _$b`
  font-size: 4.8rem;
  font-weight: 900;
  color: ${0};
`), ({
  theme
}) => theme.primary.step10);
var LinkContainer = st.div(_t8$1 || (_t8$1 = _$b`
  display: flex;
  justify-content: flex-end;
  width: 100%;
  margin-top: 2.5rem;
`));
var VotesButton = st(Button)(_t9 || (_t9 = _$b`
  min-width: 10.6rem;
`));
var ExpandedDataGrid = st.div(_t10 || (_t10 = _$b`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin-top: 2.4rem;
`));
var VotesListContainer = st.div(_t11 || (_t11 = _$b`
  display: flex;
  flex-direction: column;
`));
var VotesContainer = st.div(_t12 || (_t12 = _$b`
  display: flex;
  flex-direction: column;
  gap: 4rem;
  margin-top: 3rem;
  min-width: 50rem;
  max-height: 50rem;
  @media ${0} {
    min-width: 100%;
  }
  overflow: auto;
  padding-right: 1rem;
`), widthQuery.sm);
var VoteContainer = st.div(_t13 || (_t13 = _$b`
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin: 3rem 0;
  @media ${0} {
    margin: 1.2rem 0;
  }
`), widthQuery.sm);
var VoteList = ({
  votes,
  proposal,
  daoChain,
  daoId,
  includeLinks: _includeLinks = false
}) => {
  return (0, import_jsx_runtime.jsxs)(VotesListContainer, {
    children: [(0, import_jsx_runtime.jsx)(VotesContainer, {
      children: votes === null || votes === void 0 ? void 0 : votes.map((vote) => (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)(ParMd, {
          children: (0, import_utils.formatShortDateTimeFromSeconds)(vote.createdAt)
        }), (0, import_jsx_runtime.jsxs)(VoteContainer, {
          children: [(0, import_jsx_runtime.jsx)(MemberDisplay, {
            daoId,
            daoChain,
            memberAddress: vote.member.memberAddress,
            includeLinks: _includeLinks
          }), (0, import_jsx_runtime.jsxs)(DataMd, {
            children: [vote.approved ? "Yes" : "No", " -", " ", (0, import_utils.formatValueTo)({
              value: (0, import_utils.fromWei)(vote.balance),
              decimals: 2,
              format: "numberShort"
            })]
          })]
        })]
      }, vote.id))
    }), (0, import_jsx_runtime.jsxs)(VoteContainer, {
      children: [(0, import_jsx_runtime.jsx)(ParMd, {
        children: "Total"
      }), (0, import_jsx_runtime.jsxs)(DataMd, {
        children: [(0, import_utils.formatValueTo)({
          value: (0, import_utils.fromWei)(proposal.yesBalance),
          decimals: 2,
          format: "numberShort"
        }), " ", "Yes /", " ", (0, import_utils.formatValueTo)({
          value: (0, import_utils.fromWei)(proposal.noBalance),
          decimals: 2,
          format: "numberShort"
        }), "No"]
      })]
    })]
  });
};
var DataPoint = ({
  data: data2,
  daoChain,
  daoId,
  includeLinks
}) => {
  if (data2.dataType === "member") {
    return (0, import_jsx_runtime.jsxs)("div", {
      children: [(0, import_jsx_runtime.jsx)(ParMd, {
        children: data2.label
      }), (0, import_jsx_runtime.jsx)(MemberDisplay, {
        daoId,
        daoChain,
        memberAddress: data2.data,
        includeLinks
      })]
    });
  }
  if (data2.dataType === "dataIndicator") {
    return (0, import_jsx_runtime.jsx)(DataIndicator, {
      label: data2.label,
      data: data2.data
    });
  }
  return null;
};
var ProposalHistoryCard = ({
  element,
  proposal,
  daoChain,
  daoId,
  includeLinks: _includeLinks = false
}) => {
  const isMobile = useBreakpoint(widthQuery.sm);
  const [open, setOpen] = (0, import_react.useState)(false);
  const handleToggle = () => {
    setOpen((prevState) => !prevState);
  };
  const hasProposalVotes = proposal && proposal.votes && proposal.votes.length > 0;
  const totalVotes = hasProposalVotes ? (0, import_utils.formatValueTo)({
    value: Number((0, import_utils.fromWei)(proposal.yesBalance)) + Number((0, import_utils.fromWei)(proposal.noBalance)),
    decimals: 0,
    format: "numberShort",
    separator: ""
  }) : "0";
  return (0, import_jsx_runtime.jsxs)(ElementContainer, {
    children: [(0, import_jsx_runtime.jsxs)(VisibleContainer, {
      children: [(0, import_jsx_runtime.jsxs)(ContentContainer, {
        children: [(0, import_jsx_runtime.jsx)(ParLg, {
          children: (0, import_jsx_runtime.jsx)(StyledTitle, Object.assign({
            "$active": element.active
          }, {
            children: element.title
          }))
        }), element.text && (0, import_jsx_runtime.jsx)(ParMd, {
          children: element.text
        })]
      }), element.canExpand && open && (0, import_jsx_runtime.jsx)("div", Object.assign({
        onClick: handleToggle
      }, {
        children: (0, import_jsx_runtime.jsx)(StyledUpArrow, {})
      })), element.canExpand && !open && (0, import_jsx_runtime.jsx)("div", Object.assign({
        onClick: handleToggle
      }, {
        children: (0, import_jsx_runtime.jsx)(StyledDownArrow, {})
      })), element.showVotesButton && hasProposalVotes && (0, import_jsx_runtime.jsxs)(Dialog, {
        children: [(0, import_jsx_runtime.jsx)(DialogTrigger, Object.assign({
          asChild: true
        }, {
          children: (0, import_jsx_runtime.jsx)(VotesButton, Object.assign({
            color: "secondary",
            size: "sm"
          }, {
            children: "Show Votes"
          }))
        })), (0, import_jsx_runtime.jsx)(DialogContent, Object.assign({
          alignButtons: "end",
          rightButton: {
            $closeDialog: true,
            fullWidth: isMobile
          },
          title: `Proposal Votes (${totalVotes})`
        }, {
          children: (0, import_jsx_runtime.jsx)(VoteList, {
            votes: proposal.votes,
            proposal,
            daoId,
            daoChain,
            includeLinks: _includeLinks
          })
        }))]
      })]
    }), element.canExpand && open && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(ExpandedDataGrid, {
        children: element.dataElements && element.dataElements.map((data2) => (0, import_jsx_runtime.jsx)(DataPoint, {
          data: data2,
          daoChain,
          daoId,
          includeLinks: _includeLinks
        }, data2.label))
      }), element.txHash && (0, import_jsx_runtime.jsx)(LinkContainer, {
        children: (0, import_jsx_runtime.jsx)(ExplorerLink, Object.assign({
          address: element.txHash,
          chainId: daoChain,
          type: "tx"
        }, {
          children: "View Transaction"
        }))
      })]
    })]
  });
};
var ProposalHistory = ({
  proposalId,
  daoChain,
  daoId,
  includeLinks: _includeLinks = false,
  graphApiKeys
}) => {
  const {
    proposal
  } = useDaoProposal({
    proposalId,
    daoChain,
    daoId,
    graphApiKeys
  });
  const historyData = (0, import_react.useMemo)(() => {
    if (!proposal || !daoChain)
      return null;
    return buildProposalHistory({
      proposal,
      networkData: (0, import_keychain_utils.getNetwork)(daoChain)
    });
  }, [proposal, daoChain]);
  if (!proposal || !daoChain || !daoId || !historyData)
    return null;
  return (0, import_jsx_runtime.jsx)(HistoryListContainer, {
    children: historyData.map((element) => {
      return (0, import_jsx_runtime.jsx)(ProposalHistoryCard, {
        proposal,
        element,
        daoChain,
        daoId,
        includeLinks: _includeLinks
      }, element.title);
    })
  });
};
var _$a = (t) => t;
var _t$a;
var _t2$4;
var _t3$3;
var _t4$2;
var _t5$2;
var _t6$2;
var SafeContainer = st(Card)(_t$a || (_t$a = _$a`
  padding: 3rem;
  width: 100%;
  border: none;
  margin-bottom: 3rem;
  @media ${0} {
    max-width: 100%;
    min-width: 0;
  }
`), widthQuery.lg);
var SafeOverviewCard = st(Card)(_t2$4 || (_t2$4 = _$a`
  background-color: ${0};
  border: none;
  padding: 3rem;
  width: 100%;
`), ({
  theme
}) => theme.secondary.step3);
var SafeCardHeader = st.div(_t3$3 || (_t3$3 = _$a`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: wrap;
  margin-bottom: 3rem;

  .right-section {
    display: flex;
  }

  .safe-link {
    padding: 0.9rem;
    background-color: ${0};
    border-radius: 4px;
  }
`), ({
  theme
}) => theme.secondary.step5);
var TagSection = st.div(_t4$2 || (_t4$2 = _$a`
  display: flex;
  align-items: center;
  gap: 1.8rem;
`));
var SafeActionMenuTrigger = st(Button)(_t5$2 || (_t5$2 = _$a`
  width: 0.5rem;

  &[data-state='open'] {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  svg.icon-left {
    color: ${0};
    margin-right: 0;
    margin: 5rem;
  }
`), ({
  theme
}) => theme.primary.step9);
var SafeActionMenuLink = st(Link)(_t6$2 || (_t6$2 = _$a`
  ${0}
  font-weight: ${0};
`), DropdownLinkStyles, font.weight.bold);
var SafeActionMenu = ({
  ragequittable,
  safeAddress,
  daoChain,
  daoId
}) => {
  const {
    address
  } = useDHConnect();
  const networkData = (0, import_react.useMemo)(() => {
    if (!daoChain)
      return null;
    return (0, import_keychain_utils.getNetwork)(daoChain);
  }, [daoChain]);
  if (!address)
    return null;
  return (0, import_jsx_runtime.jsxs)(DropdownMenu, {
    children: [(0, import_jsx_runtime.jsx)(DropdownTrigger, Object.assign({
      asChild: true
    }, {
      children: (0, import_jsx_runtime.jsx)(SafeActionMenuTrigger, {
        IconRight: import_ri.RiMore2Fill,
        size: "sm",
        variant: "ghost"
      })
    })), (0, import_jsx_runtime.jsxs)(DropdownContent, {
      children: [(0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
        asChild: true
      }, {
        children: (0, import_jsx_runtime.jsx)(SafeActionMenuLink, Object.assign({
          to: `/molochv3/${daoChain}/${daoId}/new-proposal?formLego=${ragequittable ? "TRANSFER_ERC20" : `TRANSFER_ERC20_SIDECAR&defaultValues={"safeAddress":"${safeAddress}"}`}`
        }, {
          children: "Transfer ERC-20"
        }))
      }), "erc20"), (0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
        asChild: true
      }, {
        children: (0, import_jsx_runtime.jsxs)(SafeActionMenuLink, Object.assign({
          to: `/molochv3/${daoChain}/${daoId}/new-proposal?formLego=${ragequittable ? "TRANSFER_NETWORK_TOKEN" : `TRANSFER_NETWORK_TOKEN_SIDECAR&defaultValues={"safeAddress":"${safeAddress}"}`}`
        }, {
          children: ["Transfer ", networkData === null || networkData === void 0 ? void 0 : networkData.symbol]
        }))
      }), "eth"), (0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
        asChild: true
      }, {
        children: (0, import_jsx_runtime.jsx)(SafeActionMenuLink, Object.assign({
          to: `/molochv3/${daoChain}/${daoId}/new-proposal?formLego=${ragequittable ? "MULTICALL" : `MULTICALL_SIDECAR&defaultValues={"safeAddress":"${safeAddress}"}`}`
        }, {
          children: "Tx Builder"
        }))
      }), "txbuilder")]
    })]
  });
};
var SafeCard = ({
  dao,
  safe,
  daoChain,
  includeLinks: _includeLinks = false
}) => {
  const isTreasury = (0, import_react.useMemo)(() => {
    return safe.safeAddress === dao.safeAddress;
  }, [safe, dao]);
  return (0, import_jsx_runtime.jsx)(SafeContainer, {
    children: (0, import_jsx_runtime.jsxs)(SafeOverviewCard, {
      children: [(0, import_jsx_runtime.jsxs)(SafeCardHeader, {
        children: [(0, import_jsx_runtime.jsxs)("div", {
          children: [(0, import_jsx_runtime.jsx)(H4, {
            children: safe.name
          }), (0, import_jsx_runtime.jsxs)(TagSection, {
            children: [(0, import_jsx_runtime.jsx)(AddressDisplay, {
              address: safe.safeAddress,
              truncate: true,
              copy: true,
              explorerNetworkId: daoChain
            }), isTreasury && (0, import_jsx_runtime.jsx)(Tag, Object.assign({
              tagColor: "pink"
            }, {
              children: "Ragequittable"
            }))]
          })]
        }), (0, import_jsx_runtime.jsxs)("div", Object.assign({
          className: "right-section"
        }, {
          children: [(0, import_jsx_runtime.jsx)("div", Object.assign({
            className: "safe-link"
          }, {
            children: (0, import_jsx_runtime.jsx)(Link$1, Object.assign({
              href: (0, import_utils.generateGnosisUiLink)({
                chainId: daoChain,
                address: safe.safeAddress
              })
            }, {
              children: (0, import_jsx_runtime.jsx)(ParXs, {
                children: (0, import_jsx_runtime.jsx)(Bold, {
                  children: "Gnosis Safe"
                })
              })
            }))
          })), _includeLinks && (0, import_jsx_runtime.jsx)(SafeActionMenu, {
            ragequittable: safe.ragequittable,
            safeAddress: safe.safeAddress,
            daoChain,
            daoId: dao.id
          })]
        }))]
      }), (0, import_jsx_runtime.jsxs)(DataGrid$2, {
        children: [(0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Balance",
          data: (0, import_utils.formatValueTo)({
            value: safe.fiatTotal,
            decimals: 2,
            format: "currencyShort"
          })
        }), (0, import_jsx_runtime.jsx)(DataIndicator, {
          label: "Tokens",
          data: safe.tokenBalances.length
        })]
      })]
    })
  });
};
var tryToString = tryToString$2;
var $TypeError = TypeError;
var deletePropertyOrThrow$1 = function(O, P) {
  if (!delete O[P])
    throw $TypeError("Cannot delete property " + tryToString(P) + " of " + tryToString(O));
};
var toPropertyKey = toPropertyKey$3;
var definePropertyModule = objectDefineProperty;
var createPropertyDescriptor = createPropertyDescriptor$4;
var createProperty$1 = function(object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object)
    definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else
    object[propertyKey] = value;
};
var toAbsoluteIndex = toAbsoluteIndex$2;
var lengthOfArrayLike$1 = lengthOfArrayLike$4;
var createProperty = createProperty$1;
var $Array = Array;
var max = Math.max;
var arraySliceSimple = function(O, start, end) {
  var length = lengthOfArrayLike$1(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
  var result = $Array(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++)
    createProperty(result, n, O[k]);
  result.length = n;
  return result;
};
var arraySlice = arraySliceSimple;
var floor$1 = Math.floor;
var mergeSort = function(array, comparefn) {
  var length = array.length;
  var middle = floor$1(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(
    array,
    mergeSort(arraySlice(array, 0, middle), comparefn),
    mergeSort(arraySlice(array, middle), comparefn),
    comparefn
  );
};
var insertionSort = function(array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;
  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++)
      array[j] = element;
  }
  return array;
};
var merge = function(array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;
  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
  }
  return array;
};
var arraySort = mergeSort;
var userAgent$1 = engineUserAgent;
var firefox = userAgent$1.match(/firefox\/(\d+)/i);
var engineFfVersion = !!firefox && +firefox[1];
var UA = engineUserAgent;
var engineIsIeOrEdge = /MSIE|Trident/.test(UA);
var userAgent = engineUserAgent;
var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
var engineWebkitVersion = !!webkit && +webkit[1];
var $$1 = _export;
var uncurryThis$2 = functionUncurryThis;
var aCallable = aCallable$4;
var toObject = toObject$5;
var lengthOfArrayLike = lengthOfArrayLike$4;
var deletePropertyOrThrow = deletePropertyOrThrow$1;
var toString$1 = toString$5;
var fails$1 = fails$g;
var internalSort = arraySort;
var arrayMethodIsStrict = arrayMethodIsStrict$2;
var FF = engineFfVersion;
var IE_OR_EDGE = engineIsIeOrEdge;
var V8 = engineV8Version;
var WEBKIT = engineWebkitVersion;
var test = [];
var nativeSort = uncurryThis$2(test.sort);
var push = uncurryThis$2(test.push);
var FAILS_ON_UNDEFINED = fails$1(function() {
  test.sort(void 0);
});
var FAILS_ON_NULL = fails$1(function() {
  test.sort(null);
});
var STRICT_METHOD = arrayMethodIsStrict("sort");
var STABLE_SORT = !fails$1(function() {
  if (V8)
    return V8 < 70;
  if (FF && FF > 3)
    return;
  if (IE_OR_EDGE)
    return true;
  if (WEBKIT)
    return WEBKIT < 603;
  var result = "";
  var code, chr, value, index;
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);
    switch (code) {
      case 66:
      case 69:
      case 70:
      case 72:
        value = 3;
        break;
      case 68:
      case 71:
        value = 4;
        break;
      default:
        value = 2;
    }
    for (index = 0; index < 47; index++) {
      test.push({ k: chr + index, v: value });
    }
  }
  test.sort(function(a, b) {
    return b.v - a.v;
  });
  for (index = 0; index < test.length; index++) {
    chr = test[index].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr)
      result += chr;
  }
  return result !== "DGBEFHACIJK";
});
var FORCED$1 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
var getSortCompare = function(comparefn) {
  return function(x, y) {
    if (y === void 0)
      return -1;
    if (x === void 0)
      return 1;
    if (comparefn !== void 0)
      return +comparefn(x, y) || 0;
    return toString$1(x) > toString$1(y) ? 1 : -1;
  };
};
$$1({ target: "Array", proto: true, forced: FORCED$1 }, {
  sort: function sort(comparefn) {
    if (comparefn !== void 0)
      aCallable(comparefn);
    var array = toObject(this);
    if (STABLE_SORT)
      return comparefn === void 0 ? nativeSort(array) : nativeSort(array, comparefn);
    var items = [];
    var arrayLength = lengthOfArrayLike(array);
    var itemsLength, index;
    for (index = 0; index < arrayLength; index++) {
      if (index in array)
        push(items, array[index]);
    }
    internalSort(items, getSortCompare(comparefn));
    itemsLength = lengthOfArrayLike(items);
    index = 0;
    while (index < itemsLength)
      array[index] = items[index++];
    while (index < arrayLength)
      deletePropertyOrThrow(array, index++);
    return array;
  }
});
var SafesList = ({
  daoChain,
  daoId,
  includeLinks: _includeLinks = false,
  graphApiKeys
}) => {
  const {
    dao
  } = useDaoData({
    daoChain,
    daoId,
    graphApiKeys
  });
  if (!dao)
    return null;
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children: dao.vaults.sort((a, b) => Number(b.ragequittable) - Number(a.ragequittable)).map((vault) => dao && vault && (0, import_jsx_runtime.jsx)(SafeCard, {
      dao,
      daoChain,
      safe: vault,
      includeLinks: _includeLinks
    }, vault.id))
  });
};
var _$9 = (t) => t;
var _t$9;
var _t2$3;
var _t3$2;
var _t4$1;
var _t5$1;
var _t6$1;
var _t7$1;
var _t8;
var OverviewBox = st.div(_t$9 || (_t$9 = _$9`
  display: flex;
  flex-direction: column;
  margin-bottom: 1.1rem;
  height: 100%;
  .title {
    margin-top: ${0};
    margin-bottom: 2rem;
  }
  .description {
    margin-bottom: auto;
  }
  @media ${0} {
    .description {
      margin-bottom: 2rem;
    }
  }
`), ({
  $allowLinks
}) => $allowLinks ? "0" : "1.5rem", widthQuery.md);
var SubmittedContainer = st.div(_t2$3 || (_t2$3 = _$9`
  display: flex;
  align-items: center;
  margin-top: 2rem;
  .submitted-by {
    margin-right: 1rem;
  }
  @media ${0} {
    flex-direction: column;
  }
`), widthQuery.sm);
var StyledRouterLink = st(Link)(_t3$2 || (_t3$2 = _$9`
  ${0}
  &:hover {
    text-decoration: none;
  }
`), DropdownLinkStyles);
var ProposalCardOverview = ({
  loading,
  proposal,
  proposalTypes,
  sensitiveProposalTypes,
  customProposalTypeLabels,
  daoChain,
  daoId,
  allowLinks
}) => {
  const theme = Je();
  const isMobile = useBreakpoint(widthQuery.sm);
  const isMd = useBreakpoint(widthQuery.md);
  const {
    profile: submitterProfile
  } = useProfile({
    address: proposal.createdBy
  });
  return (0, import_jsx_runtime.jsxs)(OverviewBox, Object.assign({
    "$allowLinks": allowLinks
  }, {
    children: [(0, import_jsx_runtime.jsx)(OverviewHeader, {
      loading,
      proposal,
      proposalTypes,
      sensitiveProposalTypes,
      customProposalTypeLabels,
      daoChain,
      daoId,
      allowLinks
    }), (0, import_jsx_runtime.jsx)(ParLg, Object.assign({
      className: "title"
    }, {
      children: proposal.title
    })), (0, import_jsx_runtime.jsx)(ParMd, Object.assign({
      className: "description",
      color: theme.secondary.step11
    }, {
      children: (0, import_utils.charLimit)(proposal.description, 145)
    })), isMd && allowLinks && (0, import_jsx_runtime.jsx)(StyledRouterLink, Object.assign({
      to: `/molochV3/${daoChain}/${daoId}/proposal/${proposal.proposalId}`
    }, {
      children: (0, import_jsx_runtime.jsx)(Button, Object.assign({
        color: "secondary",
        size: "sm",
        fullWidth: isMobile,
        disabled: loading
      }, {
        children: "View Details"
      }))
    })), (0, import_jsx_runtime.jsxs)(SubmittedContainer, {
      children: [(0, import_jsx_runtime.jsx)(ParMd, Object.assign({
        color: theme.secondary.step11,
        className: "submitted-by"
      }, {
        children: "Submitted by"
      })), (0, import_jsx_runtime.jsxs)(MemberCard, Object.assign({
        variant: "ghost",
        profile: submitterProfile || {
          address: proposal.createdBy
        }
      }, {
        children: [allowLinks && (0, import_jsx_runtime.jsx)(MemberCardItem, Object.assign({
          asChild: true
        }, {
          children: (0, import_jsx_runtime.jsx)(StyledRouterLink, Object.assign({
            to: `/molochV3/${daoChain}/${daoId}/proposal/${proposal.proposalId}`
          }, {
            children: "View Profile"
          }))
        })), (0, import_jsx_runtime.jsx)(MemberCardExplorerLink, Object.assign({
          explorerNetworkId: daoChain,
          profileAddress: (submitterProfile === null || submitterProfile === void 0 ? void 0 : submitterProfile.address) || proposal.createdBy
        }, {
          children: "View On Etherscan"
        })), (0, import_jsx_runtime.jsx)(MemberCardCopyAddress, Object.assign({
          profileAddress: (submitterProfile === null || submitterProfile === void 0 ? void 0 : submitterProfile.address) || proposal.createdBy
        }, {
          children: "Copy Address"
        }))]
      })), proposal.proposedBy && proposal.proposedBy !== proposal.createdBy && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
        children: [(0, import_jsx_runtime.jsx)(ParMd, Object.assign({
          color: theme.secondary.step11,
          className: "submitted-by"
        }, {
          children: "through"
        })), (0, import_jsx_runtime.jsxs)(MemberCard, Object.assign({
          variant: "ghost",
          profile: {
            address: proposal.proposedBy
          }
        }, {
          children: [allowLinks && (0, import_jsx_runtime.jsx)(MemberCardItem, Object.assign({
            asChild: true
          }, {
            children: (0, import_jsx_runtime.jsx)(StyledRouterLink, Object.assign({
              to: `/molochv3/${daoChain}/${daoId}/members/${proposal.proposedBy}`
            }, {
              children: "View Profile"
            }))
          })), (0, import_jsx_runtime.jsx)(MemberCardExplorerLink, Object.assign({
            explorerNetworkId: daoChain,
            profileAddress: proposal.proposedBy
          }, {
            children: "View on Etherscan"
          })), (0, import_jsx_runtime.jsx)(MemberCardCopyAddress, Object.assign({
            profileAddress: proposal.proposedBy
          }, {
            children: "Copy Address"
          }))]
        }))]
      })]
    })]
  }));
};
var OverviewContainer = st.div(_t4$1 || (_t4$1 = _$9`
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  @media ${0} {
    align-items: center;
    margin-bottom: 2rem;
  }
`), widthQuery.md);
var HeaderContainer = st.div(_t5$1 || (_t5$1 = _$9`
  display: flex;
`));
var StyledPropType = st.span(_t6$1 || (_t6$1 = _$9`
  color: ${0};
`), ({
  theme,
  $warning
}) => $warning && theme.warning.step9);
var WarningIcon = st(import_ri.RiErrorWarningLine)(_t7$1 || (_t7$1 = _$9`
  color: ${0};
  height: 2rem;
  width: 2rem;
  margin-right: 0.5rem;
`), ({
  theme
}) => theme.warning.step9);
var PropIdText = st(ParSm)(_t8 || (_t8 = _$9`
  margin-right: 0.5rem;
`));
var OverviewHeader = ({
  loading,
  proposal,
  proposalTypes,
  sensitiveProposalTypes,
  customProposalTypeLabels,
  daoChain,
  daoId,
  allowLinks
}) => {
  const theme = Je();
  const isMobile = useBreakpoint(widthQuery.md);
  return (0, import_jsx_runtime.jsx)(OverviewContainer, {
    children: isMobile ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsxs)(HeaderContainer, {
        children: [(0, import_jsx_runtime.jsxs)(PropIdText, Object.assign({
          color: theme.secondary.step11
        }, {
          children: [proposal.proposalId, " |"]
        })), sensitiveProposalTypes[proposal.proposalType] && (0, import_jsx_runtime.jsx)(Icon$1, Object.assign({
          label: "Warning"
        }, {
          children: (0, import_jsx_runtime.jsx)(WarningIcon, {})
        })), (0, import_jsx_runtime.jsx)(ParSm, Object.assign({
          color: sensitiveProposalTypes[proposal.proposalType] ? theme.warning.step9 : theme.secondary.step11
        }, {
          children: (0, import_utils.getProposalTypeLabel)(proposal.proposalType, Object.assign(Object.assign({}, proposalTypes), customProposalTypeLabels))
        }))]
      }), (0, import_jsx_runtime.jsx)(Tooltip, {
        content: (0, import_utils.formatShortDateTimeFromSeconds)(proposal.createdAt),
        triggerEl: (0, import_jsx_runtime.jsx)(import_ri.RiTimeLine, {
          color: theme.secondary.step9,
          size: "1.6rem"
        })
      })]
    }) : (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsxs)(HeaderContainer, {
        children: [(0, import_jsx_runtime.jsxs)(PropIdText, Object.assign({
          color: theme.secondary.step11
        }, {
          children: [proposal.proposalId, " |"]
        })), sensitiveProposalTypes[proposal.proposalType] && (0, import_jsx_runtime.jsx)(Icon$1, Object.assign({
          label: "Warning"
        }, {
          children: (0, import_jsx_runtime.jsx)(WarningIcon, {})
        })), (0, import_jsx_runtime.jsxs)(ParSm, Object.assign({
          color: theme.secondary.step11
        }, {
          children: [(0, import_jsx_runtime.jsx)(StyledPropType, Object.assign({
            "$warning": sensitiveProposalTypes[proposal.proposalType]
          }, {
            children: (0, import_utils.getProposalTypeLabel)(proposal.proposalType, Object.assign(Object.assign({}, proposalTypes), customProposalTypeLabels))
          })), " ", "| ", (0, import_utils.formatShortDateTimeFromSeconds)(proposal.createdAt)]
        }))]
      }), allowLinks && (0, import_jsx_runtime.jsx)(StyledRouterLink, Object.assign({
        to: `/molochV3/${daoChain}/${daoId}/proposal/${proposal.proposalId}`
      }, {
        children: (0, import_jsx_runtime.jsx)(Button, Object.assign({
          color: "secondary",
          size: "sm",
          disabled: loading
        }, {
          children: "View Details"
        }))
      }))]
    })
  });
};
var _$8 = (t) => t;
var _t$8;
var VoteBarBox = st.div(_t$8 || (_t$8 = _$8`
  width: 100%;
  margin-bottom: 1.2rem;
`));
var VotingBar = ({
  proposal
}) => {
  const percentages = (0, import_react.useMemo)(() => {
    return [{
      percentage: `${(0, import_utils.percentage)(Number(proposal.yesBalance), Number(proposal.dao.totalShares))}%`,
      color: mint$1.mint10
    }, {
      percentage: `${(0, import_utils.percentage)(Number(proposal.noBalance), Number(proposal.dao.totalShares))}%`,
      color: tomato$1.tomato10
    }];
  }, [proposal]);
  return (0, import_jsx_runtime.jsx)(VoteBarBox, {
    children: (0, import_jsx_runtime.jsx)(Progress, {
      backgroundColor: slate$1.slate8,
      progressSection: percentages
    })
  });
};
var uncurryThis$1 = functionUncurryThis;
var thisNumberValue$1 = uncurryThis$1(1 .valueOf);
var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
var toString2 = toString$5;
var requireObjectCoercible = requireObjectCoercible$5;
var $RangeError$1 = RangeError;
var stringRepeat = function repeat(count) {
  var str = toString2(requireObjectCoercible(this));
  var result = "";
  var n = toIntegerOrInfinity$1(count);
  if (n < 0 || n == Infinity)
    throw $RangeError$1("Wrong number of repetitions");
  for (; n > 0; (n >>>= 1) && (str += str))
    if (n & 1)
      result += str;
  return result;
};
var $ = _export;
var uncurryThis = functionUncurryThis;
var toIntegerOrInfinity = toIntegerOrInfinity$4;
var thisNumberValue = thisNumberValue$1;
var $repeat = stringRepeat;
var fails = fails$g;
var $RangeError = RangeError;
var $String = String;
var floor = Math.floor;
var repeat2 = uncurryThis($repeat);
var stringSlice = uncurryThis("".slice);
var nativeToFixed = uncurryThis(1 .toFixed);
var pow = function(x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }
  return n;
};
var multiply = function(data2, n, c) {
  var index = -1;
  var c2 = c;
  while (++index < 6) {
    c2 += n * data2[index];
    data2[index] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(data2, n) {
  var index = 6;
  var c = 0;
  while (--index >= 0) {
    c += data2[index];
    data2[index] = floor(c / n);
    c = c % n * 1e7;
  }
};
var dataToString = function(data2) {
  var index = 6;
  var s = "";
  while (--index >= 0) {
    if (s !== "" || index === 0 || data2[index] !== 0) {
      var t = $String(data2[index]);
      s = s === "" ? t : s + repeat2("0", 7 - t.length) + t;
    }
  }
  return s;
};
var FORCED = fails(function() {
  return nativeToFixed(8e-5, 3) !== "0.000" || nativeToFixed(0.9, 0) !== "1" || nativeToFixed(1.255, 2) !== "1.25" || nativeToFixed(1000000000000000100, 0) !== "1000000000000000128";
}) || !fails(function() {
  nativeToFixed({});
});
$({ target: "Number", proto: true, forced: FORCED }, {
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toIntegerOrInfinity(fractionDigits);
    var data2 = [0, 0, 0, 0, 0, 0];
    var sign = "";
    var result = "0";
    var e, z, j, k;
    if (fractDigits < 0 || fractDigits > 20)
      throw $RangeError("Incorrect fraction digits");
    if (number != number)
      return "NaN";
    if (number <= -1e21 || number >= 1e21)
      return $String(number);
    if (number < 0) {
      sign = "-";
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 4503599627370496;
      e = 52 - e;
      if (e > 0) {
        multiply(data2, 0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(data2, 1e7, 0);
          j -= 7;
        }
        multiply(data2, pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(data2, 1 << 23);
          j -= 23;
        }
        divide(data2, 1 << j);
        multiply(data2, 1, 1);
        divide(data2, 2);
        result = dataToString(data2);
      } else {
        multiply(data2, 0, z);
        multiply(data2, 1 << -e, 0);
        result = dataToString(data2) + repeat2("0", fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits ? "0." + repeat2("0", fractDigits - k) + result : stringSlice(result, 0, k - fractDigits) + "." + stringSlice(result, k - fractDigits));
    } else {
      result = sign + result;
    }
    return result;
  }
});
var _$7 = (t) => t;
var _t$7;
var _t2$2;
var _t3$1;
var _t4;
var _t5;
var _t6;
var _t7;
var TemplateBox = st.div(_t$7 || (_t$7 = _$7`
  display: flex;
  flex-direction: column;
  height: 100%;

  .top-section {
    display: flex;
    margin-bottom: 2.4rem;
    justify-content: space-between;
    @media ${0} {
      margin-bottom: 1.2rem;
    }
  }
  .middle-section {
    height: 100%;
    margin-bottom: auto;
    @media ${0} {
      margin-bottom: 2rem;
    }
  }
  .bottom-section {
    margin-top: auto;
  }
`), widthQuery.sm, widthQuery.sm);
var QuorumBox = st.div(_t2$2 || (_t2$2 = _$7`
  display: flex;
  align-items: center;
  svg {
    margin-right: 1.2rem;
  }
`));
var QuorumDisplay = ({
  yesPerc,
  daoQuorum
}) => {
  const theme = Je();
  return (0, import_jsx_runtime.jsx)(Tooltip, {
    triggerEl: (0, import_jsx_runtime.jsxs)(QuorumBox, {
      children: [(0, import_jsx_runtime.jsx)(MdOutlineGavel, {
        color: theme.secondary.step11,
        size: "1.4rem"
      }), " ", (0, import_jsx_runtime.jsxs)(ParMd, Object.assign({
        color: theme.secondary.step11
      }, {
        children: [Number(yesPerc).toFixed(0), "/", daoQuorum, "%"]
      })), " "]
    }),
    content: `DAO must meet a quorum of ${daoQuorum}% to pass a proposal.`,
    side: "bottom"
  });
};
var VerdictBox = st.div(_t3$1 || (_t3$1 = _$7`
  display: flex;
  align-items: center;
  svg {
    margin-right: 0.6rem;
  }
`));
var ProposalPass = ({
  text
}) => {
  const theme = Je();
  return (0, import_jsx_runtime.jsxs)(VerdictBox, {
    children: [(0, import_jsx_runtime.jsx)(import_ri.RiThumbUpLine, {
      size: "1.6rem",
      color: theme.secondary.step11
    }), (0, import_jsx_runtime.jsx)(ParMd, Object.assign({
      color: theme.secondary.step11
    }, {
      children: text
    }))]
  });
};
var ProposalFail = ({
  text
}) => {
  const theme = Je();
  return (0, import_jsx_runtime.jsxs)(VerdictBox, {
    children: [(0, import_jsx_runtime.jsx)(import_ri.RiThumbDownLine, {
      size: "1.6rem",
      color: theme.secondary.step11
    }), (0, import_jsx_runtime.jsx)(ParMd, Object.assign({
      color: theme.secondary.step11
    }, {
      children: text
    }))]
  });
};
var Verdict = ({
  passed,
  appendText: _appendText = ""
}) => {
  return passed ? (0, import_jsx_runtime.jsx)(ProposalPass, {
    text: `Proposal Passed${_appendText}`
  }) : (0, import_jsx_runtime.jsx)(ProposalFail, {
    text: `Proposal Failed${_appendText}`
  });
};
var VoteStatus = ({
  passing
}) => {
  return passing ? (0, import_jsx_runtime.jsx)(ProposalPass, {
    text: "Proposal is Passing"
  }) : (0, import_jsx_runtime.jsx)(ProposalFail, {
    text: "Proposal is Failing"
  });
};
var VotingResults = ({
  isVoting,
  proposal
}) => {
  const hasQuorum = (0, import_utils.checkHasQuorum)({
    yesVotes: Number(proposal.yesBalance),
    totalShares: Number(proposal.dao.totalShares),
    quorumPercent: Number(proposal.dao.quorumPercent)
  });
  const didPass = Number(proposal.yesBalance) > Number(proposal.noBalance) && hasQuorum;
  return isVoting ? (0, import_jsx_runtime.jsx)(VoteStatus, {
    passing: didPass
  }) : (0, import_jsx_runtime.jsx)(Verdict, {
    passed: didPass
  });
};
var ActionTemplate = ({
  helperDisplay,
  statusDisplay,
  main,
  proposal
}) => {
  const theme = Je();
  const isMobile = useBreakpoint(widthQuery.sm);
  const displayUI = (0, import_react.useMemo)(() => {
    if (typeof statusDisplay === "string") {
      return (0, import_jsx_runtime.jsx)(ParMd, {
        children: statusDisplay
      });
    }
    return statusDisplay;
  }, [statusDisplay]);
  const helperUI = (0, import_react.useMemo)(() => {
    if (typeof helperDisplay === "string") {
      return (0, import_jsx_runtime.jsxs)(ParMd, Object.assign({
        color: theme.secondary.step11
      }, {
        children: [" ", (0, import_jsx_runtime.jsx)(Italic, {
          children: helperDisplay
        })]
      }));
    }
    return helperDisplay;
  }, [helperDisplay, theme]);
  const hideQuorum = proposal.dao.quorumPercent === "0";
  const yesPerc = (0, import_utils.percentage)(Number(proposal.yesBalance), Number(proposal.dao.totalShares));
  return (0, import_jsx_runtime.jsxs)(TemplateBox, {
    children: [(0, import_jsx_runtime.jsxs)("div", Object.assign({
      className: "top-section"
    }, {
      children: [displayUI, isMobile || hideQuorum || (0, import_jsx_runtime.jsx)(QuorumDisplay, {
        yesPerc,
        daoQuorum: proposal.dao.quorumPercent
      })]
    })), (0, import_jsx_runtime.jsx)("div", Object.assign({
      className: "middle-section"
    }, {
      children: main
    })), (0, import_jsx_runtime.jsx)("div", Object.assign({
      className: "bottom-section"
    }, {
      children: helperUI
    }))]
  });
};
var GasBox = st.div(_t4 || (_t4 = _$7`
  display: flex;
  align-items: center;
  svg {
    margin-right: 1.2rem;
    padding: 0;
  }
`));
var GasDisplay = ({
  gasAmt,
  daoChain
}) => {
  var _a, _b;
  const theme = Je();
  const [estimate, setEstimate] = (0, import_react.useState)();
  const {
    networks
  } = useDHConnect();
  (0, import_react.useEffect)(() => {
    const getGasEst = () => __awaiter(void 0, void 0, void 0, function* () {
      if (gasAmt) {
        const est = yield (0, import_utils.getGasCostEstimate)(gasAmt, daoChain);
        const estEth = est && Number((0, import_utils.toWholeUnits)(est.toFixed())).toFixed(10);
        setEstimate(estEth);
      }
    });
    if (daoChain && gasAmt) {
      getGasEst();
    }
  }, [daoChain, gasAmt]);
  const isArbitrum = daoChain === "0xa4b1";
  let content;
  if (isArbitrum) {
    content = `Gas estimate: ${estimate} ${daoChain && ((_a = networks === null || networks === void 0 ? void 0 : networks[daoChain]) === null || _a === void 0 ? void 0 : _a.symbol)}. Due to the way Arbitrum handles gas prices the fee displayed in your wallet may be higher than the actual cost. In most cases the majority of gas is refunded`;
  } else if (!estimate) {
    content = `Unable to estimate gas for this execution transaction. It might be best to manually set a high gas limit. In most cases the majority of gas is refunded`;
  } else {
    content = `If gas is less than ${estimate} ${daoChain && ((_b = networks === null || networks === void 0 ? void 0 : networks[daoChain]) === null || _b === void 0 ? void 0 : _b.symbol)}, the proposal will likely fail.`;
  }
  return (0, import_jsx_runtime.jsx)(Tooltip, {
    triggerEl: (0, import_jsx_runtime.jsxs)(GasBox, {
      children: [(0, import_jsx_runtime.jsx)(import_ri.RiGasStationLine, {
        color: theme.primary.step9,
        size: "1.6rem"
      }), (0, import_jsx_runtime.jsx)(ParMd, Object.assign({
        color: theme.primary.step9
      }, {
        children: "Min. gas required"
      }))]
    }),
    content,
    side: "bottom"
  });
};
var VoteUpButton = st(GatedButton)(_t5 || (_t5 = _$7`
  background-color: ${0};
  border: 1px solid ${0};
  color: ${0};
  min-width: 7rem;

  &:hover {
    background-color: ${0};
    border: 1px solid ${0};
  }
  :focus {
    background-color: ${0};
    border: 1px solid ${0};
  }
  :active {
    background-color: ${0};
    border: 1px solid ${0};
  }
  :disabled {
    background-color: ${0};
    border: 1px solid ${0};
  }
`), mint$1.mint10, mint$1.mint10, mint$1.mint1, mint$1.mint11, mint$1.mint11, mint$1.mint11, mint$1.mint11, mint$1.mint10, mint$1.mint10, mint$1.mint12, mint$1.mint12);
var VoteDownButton = st(GatedButton)(_t6 || (_t6 = _$7`
  background-color: ${0};
  border: 1px solid ${0};
  color: ${0};
  min-width: 7rem;

  &:hover {
    background-color: ${0};
    border: 1px solid ${0};
  }
  :focus {
    background-color: ${0};
    border: 1px solid ${0};
  }
  :active {
    background-color: ${0};
    border: 1px solid ${0};
  }
  :disabled {
    background-color: ${0};
    border: 1px solid ${0};
  }
`), tomato$1.tomato10, tomato$1.tomato10, tomato$1.tomato1, tomato$1.tomato11, tomato$1.tomato11, tomato$1.tomato11, tomato$1.tomato11, tomato$1.tomato10, tomato$1.tomato10, tomato$1.tomato12, tomato$1.tomato12);
var VoteBox = st.div(_t7 || (_t7 = _$7`
  display: flex;
  align-items: center;
  justify-content: space-between;
`));
var _$6 = (t) => t;
var _t$6;
var Link2 = st(ExplorerLink)(_t$6 || (_t$6 = _$6`
  font-size: inherit;
`));
var ActionFailed = ({
  proposal,
  daoChain
}) => {
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: "External Action Failed",
    main: (0, import_jsx_runtime.jsx)(VotingBar, {
      proposal
    }),
    helperDisplay: (0, import_jsx_runtime.jsx)(ParSm, {
      children: (0, import_jsx_runtime.jsxs)(Italic, {
        children: ["The external contract interaction failed. See", " ", (0, import_jsx_runtime.jsx)(Link2, Object.assign({
          address: proposal.processTxHash,
          type: "tx",
          chainId: daoChain
        }, {
          children: "transaction details"
        })), " ", "for more information."]
      })
    })
  });
};
var Cancelled = ({
  proposal
}) => {
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: "Proposal Cancelled",
    main: (0, import_jsx_runtime.jsx)(VotingBar, {
      proposal
    })
  });
};
var Expired = ({
  proposal
}) => {
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: "Proposal Expired",
    main: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsx)(Verdict, {
        passed: false
      }), " "]
    })
  });
};
var getFailReason = ({
  proposal,
  userApproved,
  userVotePower
}) => {
  if (!(0, import_utils.checkHasQuorum)({
    yesVotes: Number(proposal.yesBalance),
    quorumPercent: Number(proposal.dao.quorumPercent),
    totalShares: Number(proposal.dao.totalShares)
  })) {
    return "Quorum not met";
  }
  if (userApproved && userVotePower) {
    return `You voted ${userApproved ? "Yes" : "No"} (${(0, import_utils.formatShares)(userVotePower)})`;
  }
  return void 0;
};
var Failed = ({
  proposal
}) => {
  const {
    address
  } = useDHConnect();
  const percentNo = (0, import_utils.roundedPercentage)(Number(proposal.noBalance), Number(proposal.dao.totalShares));
  const userVoteData = (0, import_react.useMemo)(() => {
    var _a;
    if (address && proposal) {
      return (_a = proposal === null || proposal === void 0 ? void 0 : proposal.votes) === null || _a === void 0 ? void 0 : _a.find((voteData) => {
        var _a2, _b, _c, _d;
        return ((_c = (_b = (_a2 = voteData === null || voteData === void 0 ? void 0 : voteData.member) === null || _a2 === void 0 ? void 0 : _a2.memberAddress) === null || _b === void 0 ? void 0 : _b.toLowerCase) === null || _c === void 0 ? void 0 : _c.call(_b)) === ((_d = address === null || address === void 0 ? void 0 : address.toLowerCase) === null || _d === void 0 ? void 0 : _d.call(address));
      });
    }
  }, [address, proposal]);
  const failDisplay = (0, import_react.useMemo)(() => {
    return getFailReason({
      proposal,
      userApproved: userVoteData === null || userVoteData === void 0 ? void 0 : userVoteData.approved,
      userVotePower: userVoteData === null || userVoteData === void 0 ? void 0 : userVoteData.balance
    });
  }, [proposal, userVoteData]);
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: "Proposal Failed",
    main: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsx)(Verdict, {
        passed: false,
        appendText: ` - ${percentNo}% No`
      })]
    }),
    helperDisplay: failDisplay
  });
};
var GracePeriod = ({
  proposal
}) => {
  const {
    address
  } = useDHConnect();
  const userVoteData = (0, import_react.useMemo)(() => {
    var _a;
    if (address && proposal) {
      return (_a = proposal === null || proposal === void 0 ? void 0 : proposal.votes) === null || _a === void 0 ? void 0 : _a.find((voteData) => {
        var _a2, _b, _c, _d;
        return ((_c = (_b = (_a2 = voteData === null || voteData === void 0 ? void 0 : voteData.member) === null || _a2 === void 0 ? void 0 : _a2.memberAddress) === null || _b === void 0 ? void 0 : _b.toLowerCase) === null || _c === void 0 ? void 0 : _c.call(_b)) === ((_d = address === null || address === void 0 ? void 0 : address.toLowerCase) === null || _d === void 0 ? void 0 : _d.call(address));
      });
    }
  }, [address, proposal]);
  const readableTime = (0, import_react.useMemo)(() => {
    return (0, import_utils.baalTimeToNow)(proposal.graceEnds);
  }, [proposal]);
  const userVoteDisplay = userVoteData && `You voted ${userVoteData.approved ? "Yes" : "No"} (${(0, import_utils.formatShares)(userVoteData.balance)})`;
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: (0, import_jsx_runtime.jsxs)(ParMd, {
      children: ["Grace ends in ", (0, import_jsx_runtime.jsx)(TintSecondary, {
        children: readableTime
      })]
    }),
    main: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsx)(VotingResults, {
        proposal,
        isVoting: false
      })]
    }),
    helperDisplay: userVoteDisplay
  });
};
var Passed = ({
  proposal
}) => {
  const {
    address
  } = useDHConnect();
  const userVoteData = (0, import_react.useMemo)(() => {
    var _a;
    if (address && proposal) {
      return (_a = proposal === null || proposal === void 0 ? void 0 : proposal.votes) === null || _a === void 0 ? void 0 : _a.find((voteData) => {
        var _a2, _b, _c, _d;
        return ((_c = (_b = (_a2 = voteData === null || voteData === void 0 ? void 0 : voteData.member) === null || _a2 === void 0 ? void 0 : _a2.memberAddress) === null || _b === void 0 ? void 0 : _b.toLowerCase) === null || _c === void 0 ? void 0 : _c.call(_b)) === ((_d = address === null || address === void 0 ? void 0 : address.toLowerCase) === null || _d === void 0 ? void 0 : _d.call(address));
      });
    }
  }, [address, proposal]);
  const percentYes = (0, import_utils.roundedPercentage)(Number(proposal.yesBalance), Number(proposal.dao.totalShares));
  const userVoteDisplay = userVoteData && `You voted ${userVoteData.approved ? "Yes" : "No"} (${(0, import_utils.formatShares)(userVoteData.balance)})`;
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: "Proposal Passed",
    main: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsx)(Verdict, {
        passed: true,
        appendText: ` - ${percentYes}% Yes`
      })]
    }),
    helperDisplay: userVoteDisplay
  });
};
var CONTRACT = {
  CURRENT_DAO: {
    type: "static",
    contractName: "Current DAO (Baal)",
    abi: import_abis.LOCAL_ABI.BAAL,
    targetAddress: ".daoId"
  }
};
var ACTION_TX = {
  SPONSOR: {
    id: "SPONSOR",
    contract: CONTRACT.CURRENT_DAO,
    method: "sponsorProposal"
  },
  VOTE: {
    id: "VOTE",
    contract: CONTRACT.CURRENT_DAO,
    method: "submitVote"
  },
  PROCESS: {
    id: "PROCESS",
    contract: CONTRACT.CURRENT_DAO,
    method: "processProposal"
  },
  CANCEL: {
    id: "CANCEL",
    contract: CONTRACT.CURRENT_DAO,
    method: "cancelProposal"
  }
};
var _$5 = (t) => t;
var _t$5;
var ProcessBox = st.div(_t$5 || (_t$5 = _$5`
  display: flex;
  justify-content: flex-start;
  .execute {
    margin-left: auto;
  }
  @media ${0} {
    flex-direction: column;
    gap: 1.2rem;
    .execute {
      min-width: 0;
      width: 100%;
    }
  }
`), widthQuery.sm);
var eligibableStatuses = [0, 6, 7, 3];
var checkCanProcess = ({
  daoId,
  daoChain,
  prevProposalId,
  setCanProcess
}) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const client = (0, import_utils.createViemClient)({
      chainId: daoChain
    });
    const state = yield client.readContract({
      abi: import_abis.LOCAL_ABI.BAAL,
      address: daoId,
      functionName: "state",
      args: [prevProposalId]
    });
    console.log("state", state);
    setCanProcess(eligibableStatuses.some((status) => status === state) ? true : "Another proposal in the DAO needs to executed first.");
  } catch (error) {
    setCanProcess("Network Error. Could not check for Proposal status");
  }
});
var ReadyForProcessing = ({
  lifeCycleFnsOverride,
  proposal,
  daoChain,
  daoId
}) => {
  const {
    chainId
  } = useDHConnect();
  const {
    fireTransaction
  } = useTxBuilder();
  const {
    errorToast,
    defaultToast,
    successToast
  } = useToast();
  const isMobile = useBreakpoint(widthQuery.sm);
  const [canProcess, setCanProcess] = import_react.default.useState("Checking execution data.");
  const [isLoading, setIsLoading] = import_react.default.useState(false);
  const processProposal = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const {
      proposalId,
      proposalData,
      actionGasEstimate
    } = proposal;
    if (!proposalId)
      return;
    setIsLoading(true);
    (_a = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onActionTriggered) === null || _a === void 0 ? void 0 : _a.call(lifeCycleFnsOverride);
    yield fireTransaction({
      tx: Object.assign(Object.assign({}, ACTION_TX.PROCESS), {
        staticArgs: [proposalId, proposalData],
        staticOverrides: {
          gasLimit: (0, import_utils.getProcessingGasLimit)(actionGasEstimate, chainId)
        }
      }),
      lifeCycleFns: {
        onTxError: (error) => {
          var _a2;
          const errMsg = (0, import_utils.handleErrorMessage)({
            error
          });
          errorToast({
            title: "Execution Failed",
            description: errMsg
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onTxError) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, error);
          setIsLoading(false);
        },
        onTxSuccess: (...args) => {
          var _a2;
          defaultToast({
            title: "Execution Success",
            description: "Please wait for subgraph to sync"
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onTxSuccess) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, ...args);
        },
        onPollError: (error) => {
          var _a2;
          const errMsg = (0, import_utils.handleErrorMessage)({
            error
          });
          errorToast({
            title: "Poll Error",
            description: errMsg
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onPollError) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, error);
          setIsLoading(false);
        },
        onPollSuccess: (...args) => {
          var _a2;
          successToast({
            title: "Execution Success",
            description: "Proposal executed"
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onPollSuccess) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, ...args);
          setIsLoading(false);
        }
      }
    });
  });
  (0, import_react.useEffect)(() => {
    if (daoId && (0, import_keychain_utils.isValidNetwork)(daoChain)) {
      checkCanProcess({
        daoChain,
        daoId,
        prevProposalId: proposal.prevProposalId,
        setCanProcess
      });
    }
  }, [proposal, daoId, daoChain]);
  const isConnectedToDao = chainId === daoChain ? true : "You are not connected to the same network as the DAO";
  const isNotLoading = !isLoading ? true : "Please wait for transaction to complete";
  const percentYes = (0, import_utils.roundedPercentage)(Number(proposal.yesBalance), Number(proposal.dao.totalShares));
  const failedQuroum = !(0, import_utils.checkHasQuorum)({
    yesVotes: Number(proposal.yesBalance),
    quorumPercent: Number(proposal.dao.quorumPercent),
    totalShares: Number(proposal.dao.totalShares)
  });
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: "Ready for Execution",
    main: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsx)(Verdict, {
        passed: !failedQuroum,
        appendText: !failedQuroum ? ` - ${percentYes}% Yes` : " - Quorum not met"
      })]
    }),
    helperDisplay: (0, import_jsx_runtime.jsxs)(ProcessBox, {
      children: [Number(proposal.actionGasEstimate) > 0 && (0, import_jsx_runtime.jsx)(GasDisplay, {
        gasAmt: proposal.actionGasEstimate,
        daoChain
      }), (0, import_jsx_runtime.jsx)(GatedButton, Object.assign({
        size: "sm",
        onClick: processProposal,
        className: "execute",
        rules: [isConnectedToDao, isNotLoading, canProcess],
        fullWidth: isMobile
      }, {
        children: "Execute"
      }))]
    })
  });
};
var Unsponsored = ({
  lifeCycleFnsOverride,
  proposal,
  daoChain,
  daoId
}) => {
  const {
    address
  } = useDHConnect();
  const {
    fireTransaction
  } = useTxBuilder();
  const {
    connectedMember
  } = useConnectedMember({
    daoChain,
    daoId,
    memberAddress: address
  });
  const {
    chainId
  } = useDHConnect();
  const {
    errorToast,
    defaultToast,
    successToast
  } = useToast();
  const [isLoading, setIsLoading] = import_react.default.useState(false);
  const {
    dao
  } = useDaoData();
  const isMobile = useBreakpoint(widthQuery.sm);
  const theme = Je();
  const handleSponsor = () => {
    var _a;
    const {
      proposalId
    } = proposal;
    if (!proposalId)
      return;
    setIsLoading(true);
    (_a = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onActionTriggered) === null || _a === void 0 ? void 0 : _a.call(lifeCycleFnsOverride);
    fireTransaction({
      tx: Object.assign(Object.assign({}, ACTION_TX.SPONSOR), {
        staticArgs: [proposalId]
      }),
      lifeCycleFns: {
        onTxError: (error) => {
          var _a2;
          const errMsg = (0, import_utils.handleErrorMessage)({
            error
          });
          errorToast({
            title: "Sponsor Failed",
            description: errMsg
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onTxError) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, error);
          setIsLoading(false);
        },
        onTxSuccess: (...args) => {
          var _a2;
          defaultToast({
            title: "Sponsor Success",
            description: "Please wait for subgraph to sync"
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onTxSuccess) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, ...args);
        },
        onPollError: (error) => {
          var _a2;
          const errMsg = (0, import_utils.handleErrorMessage)({
            error
          });
          errorToast({
            title: "Poll Error",
            description: errMsg
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onPollError) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, error);
          setIsLoading(false);
        },
        onPollSuccess: (...args) => {
          var _a2;
          successToast({
            title: "Sponsor Success",
            description: "Proposal sponsored"
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onPollSuccess) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, ...args);
          setIsLoading(false);
        }
      }
    });
  };
  const hasDelegatedShares = (0, import_react.useMemo)(() => {
    if (dao && (0, import_utils.isNumberish)(connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.delegateShares) && (0, import_utils.isNumberish)(dao.sponsorThreshold)) {
      return Number(connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.delegateShares) >= Number(dao === null || dao === void 0 ? void 0 : dao.sponsorThreshold) ? true : `${(0, import_utils.fromWei)(dao.sponsorThreshold)} delegated voting stake tokens are required to sponsor this proposal.`;
    }
    return "Subgraph data not loading or is not in sync";
  }, [dao, connectedMember]);
  const isConnectedToDao = chainId === daoChain ? true : "You are not connected to the same network as the DAO";
  const notDelegating = (0, import_react.useMemo)(() => {
    if ((connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.delegatingTo) && (0, import_utils.isNumberish)(connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.delegateShares)) {
      return Number(connectedMember.delegateShares) > 0 ? true : "You cannot sponsor a proposal as you have delegated your voting power";
    }
    return "Connect your wallet";
  }, [connectedMember]);
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    statusDisplay: "Needs a Sponsor",
    proposal,
    main: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsx)(GatedButton, Object.assign({
        size: "sm",
        rules: [hasDelegatedShares, isConnectedToDao, notDelegating],
        onClick: handleSponsor,
        fullWidth: isMobile
      }, {
        children: isLoading ? (0, import_jsx_runtime.jsx)(Loading, {
          size: 20
        }) : "Sponsor Proposal"
      }))]
    }),
    helperDisplay: (0, import_jsx_runtime.jsxs)(ParSm, Object.assign({
      color: theme.secondary.step11
    }, {
      children: [(0, import_jsx_runtime.jsx)(Italic, {
        children: import_utils.PROP_CARD_HELP.UNSPONSORED
      }), typeof notDelegating === "string" && (0, import_jsx_runtime.jsxs)(Italic, {
        children: [" ", notDelegating]
      })]
    }))
  });
};
var HasVoted = ({
  proposal,
  approved,
  userVoteBalance,
  readableTime
}) => {
  const voterHelperText = `You voted ${approved ? "Yes" : "No"} (${(0, import_utils.formatShares)(userVoteBalance || "0")})`;
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: (0, import_jsx_runtime.jsxs)(ParMd, {
      children: ["Voting ends in ", (0, import_jsx_runtime.jsx)(TintSecondary, {
        children: readableTime
      })]
    }),
    main: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsx)(VotingResults, {
        proposal,
        isVoting: true
      })]
    }),
    helperDisplay: voterHelperText
  });
};
var Vote;
(function(Vote2) {
  Vote2["Yes"] = "yes";
  Vote2["No"] = "no";
})(Vote || (Vote = {}));
var HasNotVoted = ({
  lifeCycleFnsOverride,
  proposal,
  readableTime,
  daoChain,
  daoId
}) => {
  const {
    chainId
  } = useDHConnect();
  const {
    address
  } = useDHConnect();
  const {
    connectedMember
  } = useConnectedMember({
    daoChain,
    daoId,
    memberAddress: address
  });
  const {
    fireTransaction
  } = useTxBuilder();
  const {
    errorToast,
    defaultToast,
    successToast
  } = useToast();
  const [isLoading, setIsLoading] = import_react.default.useState(false);
  const handleVote = (e) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const {
      proposalId
    } = proposal;
    const vote = e.currentTarget.value;
    if (!proposalId || !vote)
      return;
    const voteValue = vote === Vote.Yes ? true : false;
    setIsLoading(true);
    (_a = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onActionTriggered) === null || _a === void 0 ? void 0 : _a.call(lifeCycleFnsOverride);
    yield fireTransaction({
      tx: Object.assign(Object.assign({}, ACTION_TX.VOTE), {
        staticArgs: [proposalId, voteValue]
      }),
      lifeCycleFns: {
        onTxError: (error) => {
          var _a2;
          const errMsg = (0, import_utils.handleErrorMessage)({
            error
          });
          errorToast({
            title: "Vote Failed",
            description: errMsg
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onTxError) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, error);
          setIsLoading(false);
        },
        onTxSuccess: (...args) => {
          var _a2;
          defaultToast({
            title: "Vote Success",
            description: "Please wait for subgraph to sync"
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onTxSuccess) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, ...args);
        },
        onPollError: (error) => {
          var _a2;
          const errMsg = (0, import_utils.handleErrorMessage)({
            error
          });
          errorToast({
            title: "Poll Error",
            description: errMsg
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onPollError) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, error);
          setIsLoading(false);
        },
        onPollSuccess: (...args) => {
          var _a2;
          successToast({
            title: "Vote Success",
            description: "Proposal sponsored"
          });
          (_a2 = lifeCycleFnsOverride === null || lifeCycleFnsOverride === void 0 ? void 0 : lifeCycleFnsOverride.onPollSuccess) === null || _a2 === void 0 ? void 0 : _a2.call(lifeCycleFnsOverride, ...args);
          setIsLoading(false);
        }
      }
    });
  });
  const readableVotePower = connectedMember && Number(connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.delegateShares) ? `Cast Your Vote (${(0, import_utils.formatShares)(connectedMember.delegateShares)})` : void 0;
  const hasShares = Number(connectedMember === null || connectedMember === void 0 ? void 0 : connectedMember.delegateShares) ? true : "You must have voting tokens to vote";
  const isConnectedToDao = chainId === daoChain ? true : "You are not connected to the same network as the DAO";
  const isNotLoading = !isLoading ? true : "Please wait for transaction to complete";
  return (0, import_jsx_runtime.jsx)(ActionTemplate, {
    proposal,
    statusDisplay: (0, import_jsx_runtime.jsxs)(ParMd, {
      children: ["Voting ends in ", (0, import_jsx_runtime.jsx)(TintSecondary, {
        children: readableTime
      })]
    }),
    main: (0, import_jsx_runtime.jsxs)("div", {
      children: [(0, import_jsx_runtime.jsx)(VotingBar, {
        proposal
      }), (0, import_jsx_runtime.jsxs)(VoteBox, {
        children: [(0, import_jsx_runtime.jsxs)(VoteDownButton, Object.assign({
          size: "sm",
          rules: [hasShares, isConnectedToDao, isNotLoading],
          value: Vote.No,
          onClick: handleVote
        }, {
          children: ["No (", (0, import_utils.formatShares)(proposal.noBalance), ")"]
        })), (0, import_jsx_runtime.jsxs)(VoteUpButton, Object.assign({
          size: "sm",
          rules: [hasShares, isConnectedToDao, isNotLoading],
          value: Vote.Yes,
          onClick: handleVote
        }, {
          children: ["Yes (", (0, import_utils.formatShares)(proposal.yesBalance), ")"]
        }))]
      })]
    }),
    helperDisplay: readableVotePower
  });
};
var VotingPeriod = ({
  lifeCycleFnsOverride,
  proposal,
  daoChain,
  daoId
}) => {
  const {
    address
  } = useDHConnect();
  const readableTime = (0, import_react.useMemo)(() => {
    return (0, import_utils.baalTimeToNow)(proposal.votingEnds);
  }, [proposal]);
  const userVoteData = (0, import_react.useMemo)(() => {
    var _a;
    if (address && proposal) {
      return (_a = proposal === null || proposal === void 0 ? void 0 : proposal.votes) === null || _a === void 0 ? void 0 : _a.find((voteData) => {
        var _a2, _b, _c, _d;
        return ((_c = (_b = (_a2 = voteData === null || voteData === void 0 ? void 0 : voteData.member) === null || _a2 === void 0 ? void 0 : _a2.memberAddress) === null || _b === void 0 ? void 0 : _b.toLowerCase) === null || _c === void 0 ? void 0 : _c.call(_b)) === ((_d = address === null || address === void 0 ? void 0 : address.toLowerCase) === null || _d === void 0 ? void 0 : _d.call(address));
      });
    }
  }, [address, proposal]);
  return userVoteData ? (0, import_jsx_runtime.jsx)(HasVoted, {
    proposal,
    approved: userVoteData === null || userVoteData === void 0 ? void 0 : userVoteData.approved,
    readableTime,
    userVoteBalance: userVoteData === null || userVoteData === void 0 ? void 0 : userVoteData.balance
  }) : (0, import_jsx_runtime.jsx)(HasNotVoted, {
    daoId,
    daoChain,
    lifeCycleFnsOverride,
    proposal,
    readableTime
  });
};
var _$4 = (t) => t;
var _t$4;
var ActionBox = st.div(_t$4 || (_t$4 = _$4`
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 19.2rem;
  width: 100%;
  @media ${0} {
    min-height: 0;
  }
`), widthQuery.sm);
var ProposalActions = ({
  lifeCycleFnsOverride,
  proposal,
  daoChain,
  daoId
}) => {
  if (proposal.status === import_utils.PROPOSAL_STATUS.cancelled) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(Cancelled, {
        proposal
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.unsponsored) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(Unsponsored, {
        lifeCycleFnsOverride,
        proposal,
        daoChain,
        daoId
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.voting) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(VotingPeriod, {
        lifeCycleFnsOverride,
        proposal,
        daoChain,
        daoId
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.grace) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(GracePeriod, {
        proposal
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.needsProcessing) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(ReadyForProcessing, {
        lifeCycleFnsOverride,
        proposal,
        daoChain,
        daoId
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.passed) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(Passed, {
        proposal
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.failed) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(Failed, {
        proposal
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.actionFailed) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(ActionFailed, {
        proposal,
        daoChain
      })
    });
  }
  if (proposal.status === import_utils.PROPOSAL_STATUS.expired) {
    return (0, import_jsx_runtime.jsx)(ActionBox, {
      children: (0, import_jsx_runtime.jsx)(Expired, {
        proposal
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(ActionBox, {
    children: (0, import_jsx_runtime.jsx)(ActionTemplate, {
      proposal,
      statusDisplay: "Status Pending",
      main: (0, import_jsx_runtime.jsxs)(ParMd, {
        children: [proposal.status, " Proposal Status"]
      })
    })
  });
};
var _$3 = (t) => t;
var _t$3;
var _t2$1;
var _t3;
var ProposalCardContainer = st(Card)(_t$3 || (_t$3 = _$3`
  display: flex;
  gap: 3rem;
  width: 100%;

  margin-bottom: 3rem;
  padding: 2.3rem 2.5rem;
  border: none;
  min-height: 23.8rem;
  @media ${0} {
    gap: 2rem;
    flex-direction: column;
    height: auto;
    margin-bottom: 2rem;
  }
`), widthQuery.sm);
var LeftCard = st.div(_t2$1 || (_t2$1 = _$3`
  width: 100%;
  @media ${0} {
    width: 100%;
    max-width: 100%;
    min-width: 0;
  }
`), widthQuery.sm);
var RightCard = st.div(_t3 || (_t3 = _$3`
  width: 32rem;
  min-width: 32rem;

  @media ${0} {
    max-width: 100%;
    min-width: 0;
  }
`), widthQuery.sm);
var ProposalCard = ({
  proposal,
  sensitiveProposalTypes: _sensitiveProposalTypes = import_utils.SENSITIVE_PROPOSAL_TYPES,
  proposalTypes: _proposalTypes = import_utils.PROPOSAL_TYPE_LABELS,
  daoChain,
  daoId,
  allowLinks: _allowLinks = false,
  customProposalTypeLabels,
  onSuccess,
  onError
}) => {
  const [actionLoading, setActionLoading] = (0, import_react.useState)(false);
  const lifeCycleFnsOverride = {
    onActionTriggered: () => setActionLoading(true),
    onPollError: () => {
      onError === null || onError === void 0 ? void 0 : onError();
      setActionLoading(false);
    },
    onPollSuccess: () => {
      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
      setActionLoading(false);
    },
    onTxError: () => {
      onError === null || onError === void 0 ? void 0 : onError();
      setActionLoading(false);
    }
  };
  return (0, import_jsx_runtime.jsxs)(ProposalCardContainer, {
    children: [(0, import_jsx_runtime.jsx)(LeftCard, {
      children: (0, import_jsx_runtime.jsx)(ProposalCardOverview, {
        loading: actionLoading,
        proposal,
        sensitiveProposalTypes: _sensitiveProposalTypes,
        proposalTypes: _proposalTypes,
        customProposalTypeLabels,
        daoChain,
        daoId,
        allowLinks: _allowLinks
      })
    }), (0, import_jsx_runtime.jsx)(RightCard, {
      children: (0, import_jsx_runtime.jsx)(ProposalActions, {
        lifeCycleFnsOverride,
        proposal,
        daoChain,
        daoId
      })
    })]
  });
};
var _$2 = (t) => t;
var _t$2;
var IconFilter = st(import_ri.RiFilterFill)(_t$2 || (_t$2 = _$2`
  height: 1.8rem;
  width: 1.8rem;
  display: flex;
  fill: ${0};
  &:hover {
    fill: ${0};
  }
`), (props) => props.theme.secondary.step10, (props) => props.theme.secondary.step10);
var FilterDropdown = ({
  filter,
  toggleFilter
}) => {
  return (0, import_jsx_runtime.jsxs)(DropdownMenu, {
    children: [(0, import_jsx_runtime.jsx)(DropdownButtonTrigger, Object.assign({
      color: "secondary",
      IconLeft: IconFilter
    }, {
      children: filter ? `${import_utils.PROPOSAL_FILTERS[filter]}` : "Filter"
    })), (0, import_jsx_runtime.jsx)(DropdownContent, Object.assign({
      align: "start"
    }, {
      children: Object.keys(import_utils.PROPOSAL_FILTERS).map((filterKey) => {
        return (0, import_jsx_runtime.jsx)(DropdownItem, Object.assign({
          asChild: true
        }, {
          children: (0, import_jsx_runtime.jsx)(Button, Object.assign({
            color: "secondary",
            justify: "flex-start",
            fullWidth: true,
            value: filterKey,
            onClick: toggleFilter,
            IconRight: filter === filterKey ? AiOutlineCheck : void 0,
            className: filter === filterKey ? "selected" : ""
          }, {
            children: import_utils.PROPOSAL_FILTERS[filterKey]
          }))
        }), filterKey);
      })
    }))]
  });
};
var _$1 = (t) => t;
var _t$1;
var AlertContainer = st(Card)(_t$1 || (_t$1 = _$1`
  display: flex;
  gap: 3rem;
  width: 100%;
  justify-content: center;
  align-items: center;
  margin-bottom: 3rem;
  padding: 2.3rem 2.5rem;
  border: none;
  min-height: 23.8rem;

  @media ${0} {
    gap: 2rem;
    height: auto;
    margin-bottom: 2rem;
  }
`), widthQuery.sm);
var ListAlert = ({
  children
}) => {
  const message = (0, import_react.useMemo)(() => {
    return typeof children === "string" ? (0, import_jsx_runtime.jsx)("div", {
      children: (0, import_jsx_runtime.jsx)(ParLg, Object.assign({
        className: "warn"
      }, {
        children
      }))
    }) : children;
  }, [children]);
  return (0, import_jsx_runtime.jsx)(AlertContainer, {
    children: message
  });
};
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = (0, import_react.useState)(value);
  (0, import_react.useEffect)(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
}
var SearchInput = (_a) => {
  var {
    searchTerm,
    setSearchTerm,
    totalItems,
    noun = {
      singular: "proposal",
      plural: "proposals"
    }
  } = _a, inputProps = __rest(_a, ["searchTerm", "setSearchTerm", "totalItems", "noun"]);
  const [localSearchTerm, setLocalSearchTerm] = (0, import_react.useState)("");
  const debouncedSearchTerm = useDebounce(localSearchTerm, 700);
  (0, import_react.useEffect)(() => {
    if (localSearchTerm !== searchTerm) {
      setSearchTerm(localSearchTerm);
    }
  }, [debouncedSearchTerm]);
  const handleSearchTermChange = (event) => {
    setLocalSearchTerm((prevState) => prevState === event.target.value ? "" : event.target.value);
  };
  return (0, import_jsx_runtime.jsx)(Input, Object.assign({
    icon: BiSearch,
    id: "table-search",
    placeholder: `Search ${totalItems} ${totalItems === 1 ? noun.singular : noun.plural}`,
    onChange: handleSearchTermChange,
    defaultValue: localSearchTerm
  }, inputProps));
};
var _ = (t) => t;
var _t;
var _t2;
var handleNewFilter = ({
  filterTag,
  dao
}) => {
  if (!filterTag)
    return;
  const votingPlusGraceDuration = Number(dao === null || dao === void 0 ? void 0 : dao.votingPeriod) + Number(dao === null || dao === void 0 ? void 0 : dao.gracePeriod);
  return (0, import_moloch_v3_data.statusFilter)(import_utils.PROPOSAL_STATUS[filterTag], votingPlusGraceDuration);
};
var handleSearchFilter = ({
  term
}) => {
  return {
    title_contains_nocase: term
  };
};
var ProposalList = ({
  rightActionEl,
  sensitiveProposalTypes: _sensitiveProposalTypes = import_utils.SENSITIVE_PROPOSAL_TYPES,
  proposalTypes: _proposalTypes = import_utils.PROPOSAL_TYPE_LABELS,
  customProposalTypeLabels,
  header,
  onSuccess: onSuccessFromProps,
  onError,
  allowLinks: _allowLinks = false
}) => {
  const {
    proposals,
    isLoading: isLoadingProposals,
    fetchNextPage,
    hasNextPage,
    filterProposals,
    refetch: refetchProposals
  } = useDaoProposals();
  const {
    dao,
    isLoading: isLoadingDao,
    refetch: refetchDao
  } = useDaoData();
  const {
    refetch: refetchMembers
  } = useDaoMembers();
  const {
    daoId,
    daoChain
  } = useCurrentDao();
  const onSuccess = () => {
    refetchProposals === null || refetchProposals === void 0 ? void 0 : refetchProposals();
    refetchDao === null || refetchDao === void 0 ? void 0 : refetchDao();
    refetchMembers === null || refetchMembers === void 0 ? void 0 : refetchMembers();
    onSuccessFromProps === null || onSuccessFromProps === void 0 ? void 0 : onSuccessFromProps();
  };
  if (!daoId || !daoChain) {
    return (0, import_jsx_runtime.jsx)(ProposalControls, {
      children: "Current DAO not found"
    });
  }
  if (isLoadingProposals || isLoadingDao)
    return (0, import_jsx_runtime.jsx)(ProposalControls, Object.assign({
      header,
      rightActionEl
    }, {
      children: (0, import_jsx_runtime.jsx)(Loading, {
        size: 120
      })
    }));
  if (!proposals || proposals.length === 0) {
    return (0, import_jsx_runtime.jsx)(ProposalControls, Object.assign({
      header,
      rightActionEl,
      dao,
      filterProposals
    }, {
      children: (0, import_jsx_runtime.jsx)(ListAlert, {
        children: "No Proposals Found"
      })
    }));
  }
  return (0, import_jsx_runtime.jsxs)(ProposalControls, Object.assign({
    filterProposals,
    rightActionEl,
    header,
    dao
  }, {
    children: [proposals === null || proposals === void 0 ? void 0 : proposals.map((proposal) => (0, import_jsx_runtime.jsx)(ProposalCard, {
      proposal,
      onSuccess,
      onError,
      daoChain,
      daoId,
      sensitiveProposalTypes: _sensitiveProposalTypes,
      proposalTypes: _proposalTypes,
      customProposalTypeLabels,
      allowLinks: _allowLinks
    }, proposal.proposalId)), hasNextPage && (0, import_jsx_runtime.jsx)(Button, Object.assign({
      onClick: () => fetchNextPage(),
      disabled: !hasNextPage,
      variant: "outline",
      size: "sm"
    }, {
      children: "Show More Proposals"
    }))]
  }));
};
var ProposalControls = ({
  filterProposals,
  rightActionEl,
  header,
  children,
  dao
}) => {
  const {
    daoId
  } = useCurrentDao();
  const [searchTerm, setSearchTerm] = (0, import_react.useState)("");
  const [filterTag, setFilter] = (0, import_react.useState)("");
  const lastFilter = (0, import_react.useRef)({
    searchTerm,
    filterTag
  });
  (0, import_react.useEffect)(() => {
    if (!dao || !daoId || !filterProposals)
      return;
    if (lastFilter.current.searchTerm === searchTerm && lastFilter.current.filterTag === filterTag)
      return;
    const statusFilter2 = handleNewFilter({
      filterTag,
      dao
    });
    const searchFilter = handleSearchFilter({
      term: searchTerm
    });
    filterProposals(Object.assign(Object.assign({
      dao: daoId
    }, statusFilter2), searchFilter));
    lastFilter.current = {
      searchTerm,
      filterTag
    };
  }, [searchTerm, filterTag, dao, daoId, filterProposals]);
  const handleFilter = (e) => {
    setFilter((prevState) => e.currentTarget.value === prevState ? "" : e.currentTarget.value);
  };
  return (0, import_jsx_runtime.jsxs)(SingleColumnLayout, Object.assign({
    title: header
  }, {
    children: [(0, import_jsx_runtime.jsxs)(ActionsContainer, {
      children: [(0, import_jsx_runtime.jsxs)(SearchFilterContainer, {
        children: [(0, import_jsx_runtime.jsx)(SearchInput, {
          searchTerm,
          setSearchTerm,
          totalItems: Number(dao === null || dao === void 0 ? void 0 : dao.proposalCount) || 0,
          noun: {
            singular: "proposal",
            plural: "proposals"
          }
        }), (0, import_jsx_runtime.jsx)(FilterDropdown, {
          filter: filterTag,
          toggleFilter: handleFilter
        })]
      }), rightActionEl]
    }), children]
  }));
};
var ActionsContainer = st.div(_t || (_t = _`
  width: 100%;
  display: flex;
  justify-content: space-between;
  margin-bottom: 3rem;
  @media ${0} {
    flex-direction: column;
    gap: 2rem;
  }
`), widthQuery.sm);
var SearchFilterContainer = st.div(_t2 || (_t2 = _`
  display: flex;
  gap: 2rem;
  @media ${0} {
    flex-direction: column;
  }
`), widthQuery.sm);
export {
  Container,
  ContractSettings,
  DaoOverview,
  DaoProfile,
  DaoSettings,
  DaoTable,
  DataIndicatorContainer,
  DataIndicatorLabelMd,
  GovernanceSettings,
  ManageDelegate,
  MemberDataPoint,
  MemberDisplay,
  MemberList,
  MemberProfile,
  MemberProfileAvatar,
  MemberProfileCard,
  MemberProfileMenu,
  MemberTokens,
  MembersOverview,
  MetadataSettings,
  OverviewHeader,
  ProposalActionData,
  ProposalActions,
  ProposalAddtionalDetails,
  ProposalCard,
  ProposalCardOverview,
  ProposalDetails,
  ProposalDetailsContainer,
  ProposalHistory,
  ProposalList,
  SafeCard,
  SafesList,
  ShamanList,
  ShamanSettings,
  TokenSettings,
  VoteList
};
//# sourceMappingURL=@daohaus_moloch-v3-macro-ui.js.map
