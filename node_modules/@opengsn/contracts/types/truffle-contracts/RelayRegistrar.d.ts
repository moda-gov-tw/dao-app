/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RelayRegistrarContract
  extends Truffle.Contract<RelayRegistrarInstance> {
  "new"(
    _relayHub: string,
    _isUsingStorageRegistry: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<RelayRegistrarInstance>;
}

export interface RelayServerRegistered {
  name: "RelayServerRegistered";
  args: {
    relayManager: string;
    baseRelayFee: BN;
    pctRelayFee: BN;
    relayUrl: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
  };
}

type AllEvents = RelayServerRegistered;

export interface RelayRegistrarInstance extends Truffle.ContractInstance {
  indexedValues(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * does this registrar save state into storage?
   */
  isUsingStorageRegistry(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  relayHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

  values(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  /**
   * called by relay server to register (or re-register) itself. The relayer must be staked in the RelayHub
   */
  registerRelayServer: {
    (
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getRelayInfo(
    relayManager: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    lastBlockNumber: BN;
    stakeBlockNumber: BN;
    relayManager: string;
    baseRelayFee: BN;
    pctRelayFee: BN;
    url: string;
  }>;

  /**
   * read relay info of registered relays
   * @param maxCount - return at most that many relays
   * @param oldestBlock - return only relays registered from this block on.
   */
  readRelayInfos(
    oldestBlock: number | BN | string,
    maxCount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: {
      lastBlockNumber: BN;
      stakeBlockNumber: BN;
      relayManager: string;
      baseRelayFee: BN;
      pctRelayFee: BN;
      url: string;
    }[];
    1: BN;
  }>;

  splitString(
    str: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  packString(
    parts: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    indexedValues(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * does this registrar save state into storage?
     */
    isUsingStorageRegistry(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    relayHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

    values(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    /**
     * called by relay server to register (or re-register) itself. The relayer must be staked in the RelayHub
     */
    registerRelayServer: {
      (
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getRelayInfo(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      lastBlockNumber: BN;
      stakeBlockNumber: BN;
      relayManager: string;
      baseRelayFee: BN;
      pctRelayFee: BN;
      url: string;
    }>;

    /**
     * read relay info of registered relays
     * @param maxCount - return at most that many relays
     * @param oldestBlock - return only relays registered from this block on.
     */
    readRelayInfos(
      oldestBlock: number | BN | string,
      maxCount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: {
        lastBlockNumber: BN;
        stakeBlockNumber: BN;
        relayManager: string;
        baseRelayFee: BN;
        pctRelayFee: BN;
        url: string;
      }[];
      1: BN;
    }>;

    splitString(
      str: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    packString(
      parts: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
