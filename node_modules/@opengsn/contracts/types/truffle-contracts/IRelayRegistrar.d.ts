/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IRelayRegistrarContract
  extends Truffle.Contract<IRelayRegistrarInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRelayRegistrarInstance>;
}

export interface RelayServerRegistered {
  name: "RelayServerRegistered";
  args: {
    relayManager: string;
    baseRelayFee: BN;
    pctRelayFee: BN;
    relayUrl: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
  };
}

type AllEvents = RelayServerRegistered;

export interface IRelayRegistrarInstance extends Truffle.ContractInstance {
  /**
   * called by relay server to register (or re-register) itself. The relayer must be staked in the RelayHub
   */
  registerRelayServer: {
    (
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * does this registrar save state into storage?
   */
  isUsingStorageRegistry: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getRelayInfo(
    relayManager: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    lastBlockNumber: BN;
    stakeBlockNumber: BN;
    relayManager: string;
    baseRelayFee: BN;
    pctRelayFee: BN;
    url: string;
  }>;

  readRelayInfos(
    oldestBlock: number | BN | string,
    maxCount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: {
      lastBlockNumber: BN;
      stakeBlockNumber: BN;
      relayManager: string;
      baseRelayFee: BN;
      pctRelayFee: BN;
      url: string;
    }[];
    1: BN;
  }>;

  methods: {
    /**
     * called by relay server to register (or re-register) itself. The relayer must be staked in the RelayHub
     */
    registerRelayServer: {
      (
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * does this registrar save state into storage?
     */
    isUsingStorageRegistry: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    getRelayInfo(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      lastBlockNumber: BN;
      stakeBlockNumber: BN;
      relayManager: string;
      baseRelayFee: BN;
      pctRelayFee: BN;
      url: string;
    }>;

    readRelayInfos(
      oldestBlock: number | BN | string,
      maxCount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: {
        lastBlockNumber: BN;
        stakeBlockNumber: BN;
        relayManager: string;
        baseRelayFee: BN;
        pctRelayFee: BN;
        url: string;
      }[];
      1: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
