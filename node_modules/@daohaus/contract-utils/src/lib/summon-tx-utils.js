"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assembleTxArgsOriginalFactory = exports.assembleTxArgs = exports.handleKeychains = exports.lootConfigTX = exports.shareConfigTX = exports.tokenConfigTX = exports.metadataConfigTX = exports.shamanConfigTX = exports.governanceConfigTX = exports.encodeTokenParams = exports.encodeMintParams = void 0;
const abis_1 = require("@daohaus/abis");
const utils_1 = require("@daohaus/utils");
const keychain_utils_1 = require("@daohaus/keychain-utils");
const encodeMintParams = (formValues) => {
    const { members } = formValues;
    if (!members ||
        !(0, utils_1.isArray)(members === null || members === void 0 ? void 0 : members.memberAddresses) ||
        members.memberAddresses.some((addr) => !(0, utils_1.isString)(addr)) ||
        !(0, utils_1.isArray)(members === null || members === void 0 ? void 0 : members.memberShares) ||
        members.memberShares.some((shares) => !(0, utils_1.isNumberish)(shares)) ||
        !(0, utils_1.isArray)(members === null || members === void 0 ? void 0 : members.memberLoot) ||
        members.memberLoot.some((shares) => !(0, utils_1.isNumberish)(shares))) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('encodeMintParams recieved arguments in the wrong shape or type');
    }
    const wholeShareAmts = members.memberShares;
    const sharesInBaseUnits = wholeShareAmts.map((shares) => (0, utils_1.toBaseUnits)(shares));
    const wholeLootAmts = members.memberLoot;
    const lootInBaseUnits = wholeLootAmts.map((loot) => (0, utils_1.toBaseUnits)(loot.toString()));
    const encoded = (0, utils_1.encodeValues)(['address[]', 'uint256[]', 'uint256[]'], [members.memberAddresses, sharesInBaseUnits, lootInBaseUnits]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.encodeMintParams = encodeMintParams;
const encodeTokenParams = (formValues) => {
    const tokenName = formValues.tokenName;
    const tokenSymbol = formValues.tokenSymbol;
    const lootTokenName = formValues.lootTokenName;
    const lootTokenSymbol = formValues.lootTokenSymbol;
    const pauseVoteToken = formValues.votingTransferable;
    const pauseNvToken = formValues.nvTransferable;
    if (!(0, utils_1.isString)(tokenName) ||
        !(0, utils_1.isString)(tokenSymbol) ||
        !(0, utils_1.isString)(lootTokenName) ||
        !(0, utils_1.isString)(lootTokenSymbol) ||
        !(0, utils_1.isBoolean)(pauseVoteToken) ||
        !(0, utils_1.isBoolean)(pauseNvToken)) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('encodeTokenParams recieved arguments in the wrong shape or type');
    }
    const encoded = (0, utils_1.encodeValues)(['string', 'string', 'string', 'string', 'bool', 'bool'], [
        tokenName,
        tokenSymbol,
        lootTokenName,
        lootTokenSymbol,
        pauseVoteToken,
        pauseNvToken,
    ]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.encodeTokenParams = encodeTokenParams;
const governanceConfigTX = (formValues) => {
    const { votingPeriodInSeconds, gracePeriodInSeconds, newOffering, quorum, sponsorThreshold, minRetention, } = formValues;
    if (!(0, utils_1.isNumberish)(votingPeriodInSeconds) ||
        !(0, utils_1.isNumberish)(gracePeriodInSeconds) ||
        !(0, utils_1.isNumberish)(newOffering) ||
        !(0, utils_1.isNumberish)(quorum) ||
        !(0, utils_1.isNumberish)(sponsorThreshold) ||
        !(0, utils_1.isNumberish)(minRetention)) {
        throw new Error('governanceConfigTX recieved arguments in the wrong shape or type');
    }
    const encodedValues = (0, utils_1.encodeValues)(['uint32', 'uint32', 'uint256', 'uint256', 'uint256', 'uint256'], [
        votingPeriodInSeconds,
        gracePeriodInSeconds,
        newOffering,
        quorum,
        sponsorThreshold,
        minRetention,
    ]);
    const encoded = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.BAAL, 'setGovernanceConfig', [
        encodedValues,
    ]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.governanceConfigTX = governanceConfigTX;
const shamanConfigTX = (formValues) => {
    const { shamans } = formValues;
    if (shamans === '' || !shamans) {
        const encoded = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.BAAL, 'setShamans', [[], []]);
        if ((0, utils_1.isString)(encoded)) {
            return encoded;
        }
        throw new Error('Encoding Error');
    }
    if (!(0, utils_1.isArray)(shamans === null || shamans === void 0 ? void 0 : shamans.shamanAddresses) ||
        shamans.shamanAddresses.some((addr) => !(0, utils_1.isString)(addr)) ||
        !(0, utils_1.isArray)(shamans === null || shamans === void 0 ? void 0 : shamans.shamanPermissions) ||
        shamans.shamanPermissions.some((addr) => !(0, utils_1.isNumberish)(addr))) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('shamanConfigTX recieved arguments in the wrong shape or type');
    }
    const encoded = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.BAAL, 'setShamans', [
        shamans.shamanAddresses,
        shamans.shamanPermissions,
    ]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.shamanConfigTX = shamanConfigTX;
const metadataConfigTX = (formValues, posterAddress) => {
    const { daoName } = formValues;
    if (!(0, utils_1.isString)(daoName)) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('metadataTX recieved arguments in the wrong shape or type');
    }
    const METADATA = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.POSTER, 'post', [
        JSON.stringify({ name: daoName }),
        utils_1.POSTER_TAGS.summoner,
    ]);
    const encoded = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.BAAL, 'executeAsBaal', [
        posterAddress,
        0,
        METADATA,
    ]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.metadataConfigTX = metadataConfigTX;
// THIS IS ONLY USED IN V3_FACTORY_ORIGINAL CONTRACT
const tokenConfigTX = (formValues) => {
    const pauseVoteToken = !formValues.votingTransferable;
    const pauseNvToken = !formValues.nvTransferable;
    const encoded = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.BAAL, 'setAdminConfig', [
        pauseVoteToken,
        pauseNvToken,
    ]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.tokenConfigTX = tokenConfigTX;
// THIS IS ONLY USED IN V3_FACTORY_ORIGINAL CONTRACT
const shareConfigTX = (formValues) => {
    const { members } = formValues;
    if (!members ||
        !(0, utils_1.isArray)(members === null || members === void 0 ? void 0 : members.memberAddresses) ||
        members.memberAddresses.some((addr) => !(0, utils_1.isString)(addr)) ||
        !(0, utils_1.isArray)(members === null || members === void 0 ? void 0 : members.memberShares) ||
        members.memberShares.some((shares) => !(0, utils_1.isNumberish)(shares))) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('shareConfigTX recieved arguments in the wrong shape or type');
    }
    const wholeShareAmts = members.memberShares;
    const sharesInBaseUnits = wholeShareAmts.map((shares) => (0, utils_1.toBaseUnits)(shares));
    const encoded = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.BAAL, 'mintShares', [
        members.memberAddresses,
        sharesInBaseUnits,
    ]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.shareConfigTX = shareConfigTX;
// THIS IS ONLY USED IN V3_FACTORY_ORIGINAL CONTRACT
const lootConfigTX = (formValues) => {
    const { members } = formValues;
    if (!members ||
        !(0, utils_1.isArray)(members === null || members === void 0 ? void 0 : members.memberAddresses) ||
        members.memberAddresses.some((addr) => !(0, utils_1.isString)(addr)) ||
        !(0, utils_1.isArray)(members === null || members === void 0 ? void 0 : members.memberShares) ||
        members.memberShares.some((shares) => !(0, utils_1.isNumberish)(shares))) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('shareConfigTX recieved arguments in the wrong shape or type');
    }
    const wholeLootAmts = members.memberLoot;
    const lootInBaseUnits = wholeLootAmts.map((loot) => (0, utils_1.toBaseUnits)(loot.toString()));
    const encoded = (0, utils_1.encodeFunction)(abis_1.LOCAL_ABI.BAAL, 'mintLoot', [
        members.memberAddresses,
        lootInBaseUnits,
    ]);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.lootConfigTX = lootConfigTX;
const handleKeychains = (chainId) => {
    const { V3_FACTORY_ADV_TOKEN, POSTER, ZODIAC_FACTORY } = keychain_utils_1.CONTRACT_KEYCHAINS;
    const v3Contracts = [V3_FACTORY_ADV_TOKEN, POSTER];
    if (v3Contracts.every((contract) => contract[chainId])) {
        return {
            V3_FACTORY_ADV_TOKEN: V3_FACTORY_ADV_TOKEN[chainId] || '',
            POSTER: POSTER[chainId] || '',
            ZODIAC_FACTORY: ZODIAC_FACTORY[chainId] || '',
        };
    }
    throw new Error('Could not find V3 contracts for this network');
};
exports.handleKeychains = handleKeychains;
const assembleTxArgs = (formValues, chainId, safeAddress) => {
    const tokenName = formValues['tokenName'];
    const tokenSymbol = formValues['tokenSymbol'];
    const lootTokenName = formValues['lootTokenName'];
    const lootTokenSymbol = formValues['lootTokenSymbol'];
    if (!(0, utils_1.isString)(tokenName) ||
        !(0, utils_1.isString)(tokenSymbol) ||
        !(0, utils_1.isString)(lootTokenName) ||
        !(0, utils_1.isString)(lootTokenSymbol)) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('assembleSummonTx recieved arguments in the wrong shape or type');
    }
    const { POSTER } = (0, exports.handleKeychains)(chainId);
    const mintParams = (0, exports.encodeMintParams)(formValues);
    const tokenParams = (0, exports.encodeTokenParams)(formValues);
    const initActions = [
        (0, exports.governanceConfigTX)(formValues),
        (0, exports.shamanConfigTX)(formValues),
        (0, exports.metadataConfigTX)(formValues, POSTER),
    ];
    const args = [
        safeAddress || utils_1.ZERO_ADDRESS,
        utils_1.ZERO_ADDRESS,
        (0, utils_1.getNonce)(),
        mintParams,
        tokenParams,
        initActions,
    ];
    console.log('args', args);
    return args;
};
exports.assembleTxArgs = assembleTxArgs;
// THIS IS ONLY USED FOR THE V3_FACTORY_ORIGINAL CONTRACT
const assembleTxArgsOriginalFactory = (formValues, chainId, safeAddress) => {
    const tokenName = formValues['tokenName'];
    const tokenSymbol = formValues['tokenSymbol'];
    if (!(0, utils_1.isString)(tokenName) || !(0, utils_1.isString)(tokenSymbol)) {
        console.log('ERROR: Form Values', formValues);
        throw new Error('assembleSummonTx recieved arguments in the wrong shape or type');
    }
    const { POSTER } = (0, exports.handleKeychains)(chainId);
    const initParams = (0, utils_1.encodeValues)(['string', 'string', 'address', 'address', 'address', 'address'], [
        tokenName,
        tokenSymbol,
        safeAddress || utils_1.ZERO_ADDRESS,
        utils_1.ZERO_ADDRESS,
        utils_1.ZERO_ADDRESS,
        utils_1.ZERO_ADDRESS,
    ]);
    const initActions = [
        (0, exports.tokenConfigTX)(formValues),
        (0, exports.governanceConfigTX)(formValues),
        (0, exports.shamanConfigTX)(formValues),
        (0, exports.shareConfigTX)(formValues),
        (0, exports.lootConfigTX)(formValues),
        (0, exports.metadataConfigTX)(formValues, POSTER),
    ];
    const args = [initParams, initActions, (0, utils_1.getNonce)(), utils_1.DAOHAUS_SUMMONER_REFERRER];
    console.log('args', args);
    return args;
};
exports.assembleTxArgsOriginalFactory = assembleTxArgsOriginalFactory;
//# sourceMappingURL=summon-tx-utils.js.map