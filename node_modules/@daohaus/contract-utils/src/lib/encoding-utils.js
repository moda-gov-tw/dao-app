"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeInitializationParamsAdvToken = exports.encodeInitializationParams = exports.encodeFunctionWrapper = void 0;
const utils_1 = require("@daohaus/utils");
const contract_meta_1 = require("./contract-meta");
const encodeFunctionWrapper = (abi, fnName, functionArgs) => {
    const encoded = (0, utils_1.encodeFunction)(abi, fnName, functionArgs);
    if ((0, utils_1.isString)(encoded)) {
        return encoded;
    }
    throw new Error('Encoding Error');
};
exports.encodeFunctionWrapper = encodeFunctionWrapper;
const encodeInitializationParams = (args, networkId) => {
    const baalAbi = (0, contract_meta_1.getContractAbi)('BAAL');
    const posterAbi = (0, contract_meta_1.getContractAbi)('POSTER');
    const posterAddress = (0, contract_meta_1.getContractAddressesForChain)('POSTER', networkId);
    if (!baalAbi || !posterAbi || !posterAddress)
        throw 'Missing Contract ABIs or address';
    const encodedTokenConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'setAdminConfig', [
        args.tokenConfig.pauseShares,
        args.tokenConfig.pauseLoot,
    ]);
    const encodedGovernanceValues = (0, utils_1.encodeValues)(['uint32', 'uint32', 'uint256', 'uint256', 'uint256', 'uint256'], [
        args.governanceConfig.voting,
        args.governanceConfig.grace,
        args.governanceConfig.newOffering,
        args.governanceConfig.quorum,
        args.governanceConfig.sponsor,
        args.governanceConfig.minRetention,
    ]);
    const encodedGovernanceConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'setGovernanceConfig', [encodedGovernanceValues]);
    const encodedShamanConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'setShamans', [
        args.shamanConfig.shamans,
        args.shamanConfig.permissions,
    ]);
    const encodedSharesConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'mintShares', [
        args.sharesConfig.to,
        args.sharesConfig.amount,
    ]);
    const encodedLootConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'lootShares', [
        args.lootConfig.to,
        args.lootConfig.amount,
    ]);
    const METADATA = (0, exports.encodeFunctionWrapper)(posterAbi, 'post', [
        JSON.stringify({ name: args.daoName }),
        utils_1.POSTER_TAGS.summoner,
    ]);
    const encodedMetadataConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'executeAsBaal', [posterAddress, 0, METADATA]);
    return [
        encodedTokenConfig,
        encodedGovernanceConfig,
        encodedShamanConfig,
        encodedSharesConfig,
        encodedLootConfig,
        encodedMetadataConfig,
    ];
};
exports.encodeInitializationParams = encodeInitializationParams;
const encodeInitializationParamsAdvToken = (args, networkId) => {
    const baalAbi = (0, contract_meta_1.getContractAbi)('BAAL');
    const posterAbi = (0, contract_meta_1.getContractAbi)('POSTER');
    const posterAddress = (0, contract_meta_1.getContractAddressesForChain)('POSTER', networkId);
    if (!baalAbi || !posterAbi || !posterAddress)
        throw 'Missing Contract ABIs or address';
    const encodedGovernanceValues = (0, utils_1.encodeValues)(['uint32', 'uint32', 'uint256', 'uint256', 'uint256', 'uint256'], [
        args.governanceConfig.voting,
        args.governanceConfig.grace,
        args.governanceConfig.newOffering,
        args.governanceConfig.quorum,
        args.governanceConfig.sponsor,
        args.governanceConfig.minRetention,
    ]);
    const encodedGovernanceConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'setGovernanceConfig', [encodedGovernanceValues]);
    const encodedShamanConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'setShamans', [
        args.shamanConfig.shamans,
        args.shamanConfig.permissions,
    ]);
    const METADATA = (0, exports.encodeFunctionWrapper)(posterAbi, 'post', [
        JSON.stringify({ name: args.daoName }),
        utils_1.POSTER_TAGS.summoner,
    ]);
    const encodedMetadataConfig = (0, exports.encodeFunctionWrapper)(baalAbi, 'executeAsBaal', [posterAddress, 0, METADATA]);
    return [encodedGovernanceConfig, encodedShamanConfig, encodedMetadataConfig];
};
exports.encodeInitializationParamsAdvToken = encodeInitializationParamsAdvToken;
//# sourceMappingURL=encoding-utils.js.map