"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gasEstimateFromActions = exports.estimateFunctionalGas = void 0;
const tslib_1 = require("tslib");
const keychain_utils_1 = require("@daohaus/keychain-utils");
const ethers_1 = require("ethers");
const estimateFunctionalGas = ({ chainId, constractAddress, from, value, data, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const rpcUrl = keychain_utils_1.HAUS_RPC[chainId];
    const ethersProvider = new ethers_1.ethers.providers.JsonRpcProvider(rpcUrl);
    const functionGasFees = yield ethersProvider.estimateGas({
        to: constractAddress,
        from: from,
        value: value,
        data: data,
    });
    return Number(functionGasFees);
});
exports.estimateFunctionalGas = estimateFunctionalGas;
const gasEstimateFromActions = ({ actions, chainId, safeId, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const esitmatedGases = yield Promise.all(actions.map((action) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return yield (0, exports.estimateFunctionalGas)({
            chainId: chainId,
            constractAddress: action.to,
            from: safeId,
            value: Number(action.value).toString(),
            data: action.data,
        });
    })));
    // get sum of all gas estimates
    const totalGasEstimate = esitmatedGases === null || esitmatedGases === void 0 ? void 0 : esitmatedGases.reduce((a, b) => (a || 0) + (b || 0), 0);
    console.log('totalGasEstimate', totalGasEstimate);
    return totalGasEstimate;
});
exports.gasEstimateFromActions = gasEstimateFromActions;
//# sourceMappingURL=estimate-util.js.map