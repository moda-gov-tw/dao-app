import { ArgType } from '@daohaus/utils';
import { ValidNetwork } from '@daohaus/keychain-utils';
export type SummonParams = {
    daoName?: string;
    tokenName?: string;
    tokenSymbol?: string;
    lootTokenName?: string;
    lootTokenSymbol?: string;
    votingTransferable?: boolean;
    nvTransferable?: boolean;
    quorum?: string;
    minRetention?: string;
    sponsorThreshold?: string;
    newOffering?: string;
    votingPeriod?: string;
    votingPeriodInSeconds?: number;
    gracePeriod?: string;
    gracePeriodInSeconds?: number;
    shamans?: '' | {
        shamanAddresses: string[];
        shamanPermissions: string[];
    };
    members?: '' | {
        memberAddresses: string[];
        memberShares: string[];
        memberLoot: string[];
    };
};
export declare const encodeMintParams: (formValues: SummonParams) => string;
export declare const encodeTokenParams: (formValues: SummonParams) => string;
export declare const governanceConfigTX: (formValues: SummonParams) => string;
export declare const shamanConfigTX: (formValues: SummonParams) => string;
export declare const metadataConfigTX: (formValues: SummonParams, posterAddress: string) => string;
export declare const tokenConfigTX: (formValues: SummonParams) => string;
export declare const shareConfigTX: (formValues: SummonParams) => string;
export declare const lootConfigTX: (formValues: SummonParams) => string;
export declare const handleKeychains: (chainId: ValidNetwork) => {
    V3_FACTORY_ADV_TOKEN: string;
    POSTER: string;
    ZODIAC_FACTORY: string;
};
export declare const assembleTxArgs: (formValues: Record<string, unknown>, chainId: ValidNetwork, safeAddress?: string) => ArgType[];
export declare const assembleTxArgsOriginalFactory: (formValues: Record<string, unknown>, chainId: ValidNetwork, safeAddress?: string) => ArgType[];
