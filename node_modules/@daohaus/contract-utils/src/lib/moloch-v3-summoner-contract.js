"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MolochV3SummonerContract = void 0;
const tslib_1 = require("tslib");
const baal_contracts_1 = require("@daohaus/baal-contracts");
const utils_1 = require("@daohaus/utils");
const contract_meta_1 = require("./contract-meta");
const encoding_utils_1 = require("./encoding-utils");
class MolochV3SummonerContract {
    constructor(contractConfig) {
        const summonerAddress = (0, contract_meta_1.getContractAddressesForChain)('V3_FACTORY_ORIGINAL', contractConfig.networkId);
        if (!summonerAddress)
            throw 'Missing Contract Address';
        this.networkId = contractConfig.networkId;
        this.summoner = baal_contracts_1.BaalSummonerFactory.connect(summonerAddress, contractConfig.provider);
    }
    static create({ networkId, provider, }) {
        return new MolochV3SummonerContract({ networkId, provider });
    }
    /**
     * Deploy dao and safe contracts
     * @param initializationParams encoded share token name and symbol and forwarder, safeAddress, shareToken address (string, string, address, address, address)
     * @param initializationActions encoded functions with args called in summoning
     * * setAdminConfig(bool pauseShares, bool pauseLoot)
     * * setGovernanceConfig (
              uint32 voting,
              uint32 grace,
              uint256 newOffering,
              uint256 quorum,
              uint256 sponsor,
              uint256 minRetention
          )
     * * setShamans(
          address[] calldata _shamans,
          uint256[] calldata _permissions
      )
     * * mintShares(address[] calldata to, uint256[] calldata amount)
     * * minLoot(address[] calldata to, uint256[] calldata amount)
     * * metadata: post(string content, string tag)
     * @param _saltNonce any uint256
     */
    summonMolochV3(args) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.summoner.summonBaalFromReferrer((0, utils_1.encodeValues)(['string', 'string', 'address', 'address', 'address', 'address'], [
                args.sharesTokenName,
                args.sharesTokenSymbol,
                args.safeAddress || utils_1.ZERO_ADDRESS,
                args.forwarder || utils_1.ZERO_ADDRESS,
                args.lootToken || utils_1.ZERO_ADDRESS,
                args.sharesToken || utils_1.ZERO_ADDRESS,
            ]), (0, encoding_utils_1.encodeInitializationParams)(args, this.networkId), (0, utils_1.getNonce)(), utils_1.DAOHAUS_CONTRACT_UTILS_REFERRER);
        });
    }
}
exports.MolochV3SummonerContract = MolochV3SummonerContract;
//# sourceMappingURL=moloch-v3-summoner-contract.js.map