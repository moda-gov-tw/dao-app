"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MolochV3AdvTokenSummonerContract = void 0;
const tslib_1 = require("tslib");
const baal_contracts_1 = require("@daohaus/baal-contracts");
const utils_1 = require("@daohaus/utils");
const contract_meta_1 = require("./contract-meta");
const encoding_utils_1 = require("./encoding-utils");
class MolochV3AdvTokenSummonerContract {
    constructor(contractConfig) {
        const summonerAddress = (0, contract_meta_1.getContractAddressesForChain)('V3_FACTORY_ADV_TOKEN', contractConfig.networkId);
        if (!summonerAddress)
            throw 'Missing Contract Address';
        this.networkId = contractConfig.networkId;
        this.summoner = baal_contracts_1.BaalAdvTokenSummonerFactory.connect(summonerAddress, contractConfig.provider);
    }
    static create({ networkId, provider, }) {
        return new MolochV3AdvTokenSummonerContract({ networkId, provider });
    }
    /**
     * Deploy dao and safe contracts
     * @param _safeAdd The address of the Gnosis Safe to be used as the treausry, 0x0 if new Safe
     * @param _forwarderAddr The address of the forwarder to be used, 0x0 if not set
     * @param _saltNonce any uint256
     * @param initializationMintParams encoded params for minting shares (address[], uint256[], address[], uint256[])
     * @param initializationTokenParams encoded share token name and symbol, loot token name and symbol, share and loot token transferability (string, string, string, string, bool, bool)
     * @param postInitializationActions encoded functions with args called in summoning
     * * setGovernanceConfig (
              uint32 voting,
              uint32 grace,
              uint256 newOffering,
              uint256 quorum,
              uint256 sponsor,
              uint256 minRetention
          )
     * * setShamans(
          address[] calldata _shamans,
          uint256[] calldata _permissions
      )
     * * metadata: post(string content, string tag)
     *
     */
    summonMolochV3(args) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.summoner.summonBaalFromReferrer(args.safeAddress || utils_1.ZERO_ADDRESS, args.forwarder || utils_1.ZERO_ADDRESS, (0, utils_1.getNonce)(), (0, utils_1.encodeValues)(['address[]', 'uint256[]', 'address[]', 'uint256[]'], [
                args.sharesConfig.to,
                args.sharesConfig.amount,
                args.lootConfig.to,
                args.lootConfig.amount,
            ]), (0, utils_1.encodeValues)(['string', 'string', 'string', 'string', 'address', 'address'], [
                args.sharesTokenName,
                args.sharesTokenSymbol,
                args.lootTokenName || `${args.sharesTokenName}-LOOT`,
                args.lootTokenSymbol || `${args.sharesTokenSymbol}-LOOT`,
                args.tokenConfig.pauseShares,
                args.tokenConfig.pauseLoot,
            ]), (0, encoding_utils_1.encodeInitializationParamsAdvToken)(args, this.networkId));
        });
    }
}
exports.MolochV3AdvTokenSummonerContract = MolochV3AdvTokenSummonerContract;
//# sourceMappingURL=moloch-v3-adv-summoner-contract.js.map