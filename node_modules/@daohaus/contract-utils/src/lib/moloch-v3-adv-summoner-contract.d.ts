import { ethers } from 'ethers';
import { BaalAdvTokenSummoner } from '@daohaus/baal-contracts';
import { ContractNetworkConfig, SummonMolochV3Args } from './types';
import { ValidNetwork } from '@daohaus/keychain-utils';
export declare class MolochV3AdvTokenSummonerContract {
    summoner: BaalAdvTokenSummoner;
    networkId: ValidNetwork;
    private constructor();
    static create({ networkId, provider, }: ContractNetworkConfig): MolochV3AdvTokenSummonerContract;
    /**
     * Deploy dao and safe contracts
     * @param _safeAdd The address of the Gnosis Safe to be used as the treausry, 0x0 if new Safe
     * @param _forwarderAddr The address of the forwarder to be used, 0x0 if not set
     * @param _saltNonce any uint256
     * @param initializationMintParams encoded params for minting shares (address[], uint256[], address[], uint256[])
     * @param initializationTokenParams encoded share token name and symbol, loot token name and symbol, share and loot token transferability (string, string, string, string, bool, bool)
     * @param postInitializationActions encoded functions with args called in summoning
     * * setGovernanceConfig (
              uint32 voting,
              uint32 grace,
              uint256 newOffering,
              uint256 quorum,
              uint256 sponsor,
              uint256 minRetention
          )
     * * setShamans(
          address[] calldata _shamans,
          uint256[] calldata _permissions
      )
     * * metadata: post(string content, string tag)
     *
     */
    summonMolochV3(args: SummonMolochV3Args): Promise<ethers.ContractTransaction>;
}
