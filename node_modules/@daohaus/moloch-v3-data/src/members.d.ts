import { IFindQueryResult, IListQueryArguments, IListQueryResults } from '@daohaus/data-fetch-utils';
import { Keychain, ValidNetwork } from '@daohaus/keychain-utils';
import { MolochV3MembershipQuery } from '@daohaus/utils';
import { Dao_Filter, Dao_OrderBy, FindMemberQuery, ICrossNetworkMemberListArguments, ListConnectedMemberProposalsQuery, ListMembersQuery, Member_Filter, Member_OrderBy, Proposal_Filter, Proposal_OrderBy } from './types';
export declare const findMember: ({ networkId, dao, memberAddress, graphApiKeys, }: {
    networkId: ValidNetwork;
    dao: string;
    memberAddress: string;
    graphApiKeys?: Keychain | undefined;
}) => Promise<IFindQueryResult<FindMemberQuery>>;
export declare const listMembers: ({ networkId, filter, ordering, paging, graphApiKeys, }: IListQueryArguments<Member_OrderBy, Member_Filter>) => Promise<IListQueryResults<Member_OrderBy, Member_Filter, ListMembersQuery['members']>>;
export declare const listDaosByMember: ({ memberAddress, daoFilter, memberFilter, ordering, networkIds, graphApiKeys, }: ICrossNetworkMemberListArguments<Dao_OrderBy, Dao_Filter, Member_Filter>) => Promise<IFindQueryResult<MolochV3MembershipQuery>>;
export declare const listProposalVotesByMember: ({ networkId, filter, memberAddress, ordering, paging, graphApiKeys, }: IListQueryArguments<Proposal_OrderBy, Proposal_Filter> & {
    memberAddress: string;
}) => Promise<IListQueryResults<Proposal_OrderBy, Proposal_Filter, ListConnectedMemberProposalsQuery['proposals']>>;
