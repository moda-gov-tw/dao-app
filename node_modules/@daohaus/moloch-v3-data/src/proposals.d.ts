import { IFindQueryResult, IListQueryArguments, IListQueryResults } from '@daohaus/data-fetch-utils';
import { Keychain, ValidNetwork } from '@daohaus/keychain-utils';
import { ListVotesQuery } from './subgraph/queries/votes.generated';
import { FindProposalQueryRes, ListProposalQueryRes, Proposal_Filter, Proposal_OrderBy, Vote_Filter, Vote_OrderBy } from './types';
export declare const findProposal: ({ networkId, dao, proposalId, connectedAddress, graphApiKeys, }: {
    networkId: ValidNetwork;
    dao: string;
    proposalId: string;
    connectedAddress?: string | null | undefined;
    graphApiKeys?: Keychain | undefined;
}) => Promise<IFindQueryResult<FindProposalQueryRes>>;
export declare const listProposals: ({ networkId, filter, ordering, paging, graphApiKeys, }: IListQueryArguments<Proposal_OrderBy, Proposal_Filter>) => Promise<IListQueryResults<Proposal_OrderBy, Proposal_Filter, ListProposalQueryRes['proposals']>>;
export declare const listVotes: ({ networkId, filter, ordering, paging, graphApiKeys, }: IListQueryArguments<Vote_OrderBy, Vote_Filter>) => Promise<IListQueryResults<Vote_OrderBy, Vote_Filter, ListVotesQuery['votes']>>;
