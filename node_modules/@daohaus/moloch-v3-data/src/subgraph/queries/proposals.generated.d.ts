import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type ListProposalsQueryVariables = Types.Exact<{
    where?: Types.Proposal_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Proposal_OrderBy;
    orderDirection?: Types.OrderDirection;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>;
export type ListProposalsQuery = {
    proposals: Array<{
        id: string;
        createdAt: string;
        createdBy: string;
        proposedBy?: string | undefined;
        txHash: string;
        proposalId: string;
        prevProposalId: string;
        proposalDataHash: string;
        proposalData: string;
        actionGasEstimate: string;
        details: string;
        title?: string | undefined;
        description?: string | undefined;
        proposalType: string;
        contentURI?: string | undefined;
        contentURIType?: string | undefined;
        sponsorTxHash?: string | undefined;
        sponsored: boolean;
        selfSponsor: boolean;
        sponsor?: string | undefined;
        sponsorTxAt?: string | undefined;
        votingPeriod: string;
        votingStarts: string;
        votingEnds: string;
        gracePeriod: string;
        graceEnds: string;
        expiration: string;
        expirationQueryField: string;
        cancelledTxHash?: string | undefined;
        cancelledBy?: string | undefined;
        cancelled: boolean;
        cancelledTxAt?: string | undefined;
        yesBalance: string;
        noBalance: string;
        yesVotes: string;
        noVotes: string;
        processTxHash?: string | undefined;
        processedBy?: string | undefined;
        processed: boolean;
        processTxAt?: string | undefined;
        actionFailed: boolean;
        passed: boolean;
        proposalOffering: string;
        maxTotalSharesAndLootAtYesVote: string;
        tributeToken?: string | undefined;
        tributeOffered?: string | undefined;
        tributeTokenSymbol?: string | undefined;
        tributeTokenDecimals?: string | undefined;
        tributeEscrowRecipient?: string | undefined;
        sponsorMembership?: {
            memberAddress: string;
            shares: string;
            delegateShares: string;
        } | undefined;
        dao: {
            totalShares: string;
            quorumPercent: string;
            minRetentionPercent: string;
        };
        votes?: Array<{
            id: string;
            txHash: string;
            createdAt: string;
            daoAddress: string;
            approved: boolean;
            balance: string;
            member: {
                id: string;
                memberAddress: string;
            };
        }> | undefined;
    }>;
};
export type ListConnectedMemberProposalsQueryVariables = Types.Exact<{
    where?: Types.Proposal_Filter;
    memberWhere?: Types.Member_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Proposal_OrderBy;
    orderDirection?: Types.OrderDirection;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>;
export type ListConnectedMemberProposalsQuery = {
    proposals: Array<{
        id: string;
        connectedMemberVotes?: Array<{
            id: string;
            txHash: string;
            createdAt: string;
            daoAddress: string;
            approved: boolean;
            balance: string;
            member: {
                id: string;
                memberAddress: string;
            };
        }> | undefined;
    }>;
};
export type FindProposalQueryVariables = Types.Exact<{
    id: Types.Scalars['ID'];
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>;
export type FindProposalQuery = {
    proposal?: {
        id: string;
        createdAt: string;
        createdBy: string;
        proposedBy?: string | undefined;
        txHash: string;
        proposalId: string;
        prevProposalId: string;
        proposalDataHash: string;
        proposalData: string;
        actionGasEstimate: string;
        details: string;
        title?: string | undefined;
        description?: string | undefined;
        proposalType: string;
        contentURI?: string | undefined;
        contentURIType?: string | undefined;
        sponsorTxHash?: string | undefined;
        sponsored: boolean;
        selfSponsor: boolean;
        sponsor?: string | undefined;
        sponsorTxAt?: string | undefined;
        votingPeriod: string;
        votingStarts: string;
        votingEnds: string;
        gracePeriod: string;
        graceEnds: string;
        expiration: string;
        expirationQueryField: string;
        cancelledTxHash?: string | undefined;
        cancelledBy?: string | undefined;
        cancelled: boolean;
        cancelledTxAt?: string | undefined;
        yesBalance: string;
        noBalance: string;
        yesVotes: string;
        noVotes: string;
        processTxHash?: string | undefined;
        processedBy?: string | undefined;
        processed: boolean;
        processTxAt?: string | undefined;
        actionFailed: boolean;
        passed: boolean;
        proposalOffering: string;
        maxTotalSharesAndLootAtYesVote: string;
        tributeToken?: string | undefined;
        tributeOffered?: string | undefined;
        tributeTokenSymbol?: string | undefined;
        tributeTokenDecimals?: string | undefined;
        tributeEscrowRecipient?: string | undefined;
        sponsorMembership?: {
            memberAddress: string;
            shares: string;
            delegateShares: string;
        } | undefined;
        dao: {
            totalShares: string;
            quorumPercent: string;
            minRetentionPercent: string;
        };
        votes?: Array<{
            id: string;
            txHash: string;
            createdAt: string;
            daoAddress: string;
            approved: boolean;
            balance: string;
            member: {
                id: string;
                memberAddress: string;
            };
        }> | undefined;
        connectedMemberVotes?: Array<{
            id: string;
            txHash: string;
            createdAt: string;
            daoAddress: string;
            approved: boolean;
            balance: string;
            member: {
                id: string;
                memberAddress: string;
            };
        }> | undefined;
    } | undefined;
};
export declare const ListProposalsDocument: DocumentNode<ListProposalsQuery, Types.Exact<{
    where?: Types.Proposal_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Proposal_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>>;
export declare const ListConnectedMemberProposalsDocument: DocumentNode<ListConnectedMemberProposalsQuery, Types.Exact<{
    where?: Types.Proposal_Filter | undefined;
    memberWhere?: Types.Member_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Proposal_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>>;
export declare const FindProposalDocument: DocumentNode<FindProposalQuery, Types.Exact<{
    id: Types.Scalars['ID'];
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>>;
