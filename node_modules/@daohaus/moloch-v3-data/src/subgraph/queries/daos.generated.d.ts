import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type ListDaosQueryVariables = Types.Exact<{
    where?: Types.Dao_Filter;
    now?: Types.Scalars['BigInt'];
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Dao_OrderBy;
    orderDirection?: Types.OrderDirection;
}>;
export type ListDaosQuery = {
    daos: Array<{
        id: string;
        createdAt: string;
        createdBy: string;
        txHash: string;
        safeAddress: string;
        lootPaused: boolean;
        sharesPaused: boolean;
        gracePeriod: string;
        votingPeriod: string;
        proposalOffering: string;
        quorumPercent: string;
        sponsorThreshold: string;
        minRetentionPercent: string;
        shareTokenName?: string | undefined;
        shareTokenSymbol?: string | undefined;
        sharesAddress: string;
        lootTokenName?: string | undefined;
        lootTokenSymbol?: string | undefined;
        lootAddress: string;
        totalShares: string;
        totalLoot: string;
        latestSponsoredProposalId: string;
        proposalCount: string;
        activeMemberCount: string;
        existingSafe: boolean;
        delegatedVaultManager: string;
        forwarder: string;
        referrer?: string | undefined;
        name?: string | undefined;
        profile?: Array<{
            createdAt: string;
            createdBy: string;
            contentType: string;
            content: string;
        }> | undefined;
        shamen?: Array<{
            id: string;
            createdAt: string;
            shamanAddress: string;
            permissions: string;
        }> | undefined;
        vaults: Array<{
            id: string;
            createdAt: string;
            active: boolean;
            ragequittable: boolean;
            name: string;
            safeAddress: string;
        }>;
        activeProposals?: Array<{
            id: string;
        }> | undefined;
    }>;
};
export type FindDaoQueryVariables = Types.Exact<{
    id: Types.Scalars['ID'];
    now?: Types.Scalars['BigInt'];
}>;
export type FindDaoQuery = {
    dao?: {
        id: string;
        createdAt: string;
        createdBy: string;
        txHash: string;
        safeAddress: string;
        lootPaused: boolean;
        sharesPaused: boolean;
        gracePeriod: string;
        votingPeriod: string;
        proposalOffering: string;
        quorumPercent: string;
        sponsorThreshold: string;
        minRetentionPercent: string;
        shareTokenName?: string | undefined;
        shareTokenSymbol?: string | undefined;
        sharesAddress: string;
        lootTokenName?: string | undefined;
        lootTokenSymbol?: string | undefined;
        lootAddress: string;
        totalShares: string;
        totalLoot: string;
        latestSponsoredProposalId: string;
        proposalCount: string;
        activeMemberCount: string;
        existingSafe: boolean;
        delegatedVaultManager: string;
        forwarder: string;
        referrer?: string | undefined;
        name?: string | undefined;
        profile?: Array<{
            createdAt: string;
            createdBy: string;
            contentType: string;
            content: string;
        }> | undefined;
        shamen?: Array<{
            id: string;
            createdAt: string;
            shamanAddress: string;
            permissions: string;
        }> | undefined;
        vaults: Array<{
            id: string;
            createdAt: string;
            active: boolean;
            ragequittable: boolean;
            name: string;
            safeAddress: string;
        }>;
        activeProposals?: Array<{
            id: string;
        }> | undefined;
    } | undefined;
};
export type ListMembershipsQueryVariables = Types.Exact<{
    where?: Types.Dao_Filter;
    memberWhere?: Types.Member_Filter;
    now?: Types.Scalars['BigInt'];
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Dao_OrderBy;
    orderDirection?: Types.OrderDirection;
}>;
export type ListMembershipsQuery = {
    daos: Array<{
        id: string;
        createdAt: string;
        createdBy: string;
        txHash: string;
        safeAddress: string;
        lootPaused: boolean;
        sharesPaused: boolean;
        gracePeriod: string;
        votingPeriod: string;
        proposalOffering: string;
        quorumPercent: string;
        sponsorThreshold: string;
        minRetentionPercent: string;
        shareTokenName?: string | undefined;
        shareTokenSymbol?: string | undefined;
        sharesAddress: string;
        lootTokenName?: string | undefined;
        lootTokenSymbol?: string | undefined;
        lootAddress: string;
        totalShares: string;
        totalLoot: string;
        latestSponsoredProposalId: string;
        proposalCount: string;
        activeMemberCount: string;
        existingSafe: boolean;
        delegatedVaultManager: string;
        forwarder: string;
        referrer?: string | undefined;
        name?: string | undefined;
        profile?: Array<{
            createdAt: string;
            createdBy: string;
            contentType: string;
            content: string;
        }> | undefined;
        shamen?: Array<{
            id: string;
            createdAt: string;
            shamanAddress: string;
            permissions: string;
        }> | undefined;
        vaults: Array<{
            id: string;
            createdAt: string;
            active: boolean;
            ragequittable: boolean;
            name: string;
            safeAddress: string;
        }>;
        activeProposals?: Array<{
            id: string;
        }> | undefined;
        members: Array<{
            id: string;
            createdAt: string;
            memberAddress: string;
            shares: string;
            loot: string;
            delegatingTo: string;
            delegateShares: string;
            delegateOfCount: string;
            votes?: Array<{
                txHash: string;
                createdAt: string;
                approved: boolean;
                balance: string;
            }> | undefined;
        }>;
    }>;
};
export declare const ListDaosDocument: DocumentNode<ListDaosQuery, Types.Exact<{
    where?: Types.Dao_Filter | undefined;
    now?: string | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Dao_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
}>>;
export declare const FindDaoDocument: DocumentNode<FindDaoQuery, Types.Exact<{
    id: Types.Scalars['ID'];
    now?: string | undefined;
}>>;
export declare const ListMembershipsDocument: DocumentNode<ListMembershipsQuery, Types.Exact<{
    where?: Types.Dao_Filter | undefined;
    memberWhere?: Types.Member_Filter | undefined;
    now?: string | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Dao_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
}>>;
