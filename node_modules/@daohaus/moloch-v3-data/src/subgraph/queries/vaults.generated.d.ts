import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type ListVaultsQueryVariables = Types.Exact<{
    where?: Types.Vault_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Vault_OrderBy;
    orderDirection?: Types.OrderDirection;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>;
export type ListVaultsQuery = {
    vaults: Array<{
        id: string;
        createdAt: string;
        active: boolean;
        ragequittable: boolean;
        name: string;
        safeAddress: string;
        dao: {
            id: string;
        };
    }>;
};
export type FindVaultQueryVariables = Types.Exact<{
    id: Types.Scalars['ID'];
}>;
export type FindVaultQuery = {
    vault?: {
        id: string;
        createdAt: string;
        active: boolean;
        ragequittable: boolean;
        name: string;
        safeAddress: string;
        dao: {
            id: string;
        };
    } | undefined;
};
export declare const ListVaultsDocument: DocumentNode<ListVaultsQuery, Types.Exact<{
    where?: Types.Vault_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Vault_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>>;
export declare const FindVaultDocument: DocumentNode<FindVaultQuery, Types.Exact<{
    id: Types.Scalars['ID'];
}>>;
