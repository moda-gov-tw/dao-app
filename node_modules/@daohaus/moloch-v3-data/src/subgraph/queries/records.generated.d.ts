import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type ListRecordsQueryVariables = Types.Exact<{
    where?: Types.Record_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Record_OrderBy;
    orderDirection?: Types.OrderDirection;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>;
export type ListRecordsQuery = {
    records: Array<{
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    }>;
};
export type FindRecordQueryVariables = Types.Exact<{
    id: Types.Scalars['ID'];
}>;
export type FindRecordQuery = {
    record?: {
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } | undefined;
};
export declare const ListRecordsDocument: DocumentNode<ListRecordsQuery, Types.Exact<{
    where?: Types.Record_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Record_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>>;
export declare const FindRecordDocument: DocumentNode<FindRecordQuery, Types.Exact<{
    id: Types.Scalars['ID'];
}>>;
