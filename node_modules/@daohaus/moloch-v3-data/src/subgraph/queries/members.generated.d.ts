import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type ListMembersQueryVariables = Types.Exact<{
    where?: Types.Member_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Member_OrderBy;
    orderDirection?: Types.OrderDirection;
}>;
export type ListMembersQuery = {
    members: Array<{
        id: string;
        createdAt: string;
        txHash: string;
        memberAddress: string;
        shares: string;
        loot: string;
        sharesLootDelegateShares: string;
        delegatingTo: string;
        delegateShares: string;
        delegateOfCount: string;
        lastDelegateUpdateTxHash?: string | undefined;
        votes?: Array<{
            txHash: string;
            createdAt: string;
            approved: boolean;
            balance: string;
        }> | undefined;
    }>;
};
export type FindMemberQueryVariables = Types.Exact<{
    id: Types.Scalars['ID'];
}>;
export type FindMemberQuery = {
    member?: {
        id: string;
        createdAt: string;
        txHash: string;
        memberAddress: string;
        shares: string;
        loot: string;
        sharesLootDelegateShares: string;
        delegatingTo: string;
        delegateShares: string;
        delegateOfCount: string;
        lastDelegateUpdateTxHash?: string | undefined;
        votes?: Array<{
            txHash: string;
            createdAt: string;
            approved: boolean;
            balance: string;
        }> | undefined;
    } | undefined;
};
export declare const ListMembersDocument: DocumentNode<ListMembersQuery, Types.Exact<{
    where?: Types.Member_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Member_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
}>>;
export declare const FindMemberDocument: DocumentNode<FindMemberQuery, Types.Exact<{
    id: Types.Scalars['ID'];
}>>;
