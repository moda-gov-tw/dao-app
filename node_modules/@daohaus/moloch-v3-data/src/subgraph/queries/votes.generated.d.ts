import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type ListVotesQueryVariables = Types.Exact<{
    where?: Types.Vote_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Vote_OrderBy;
    orderDirection?: Types.OrderDirection;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>;
export type ListVotesQuery = {
    votes: Array<{
        id: string;
        txHash: string;
        createdAt: string;
        daoAddress: string;
        approved: boolean;
        balance: string;
        member: {
            id: string;
            memberAddress: string;
        };
    }>;
};
export type FindVoteQueryVariables = Types.Exact<{
    id: Types.Scalars['ID'];
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>;
export type FindVoteQuery = {
    vote?: {
        id: string;
        txHash: string;
        createdAt: string;
        daoAddress: string;
        approved: boolean;
        balance: string;
        member: {
            id: string;
            memberAddress: string;
        };
    } | undefined;
};
export declare const ListVotesDocument: DocumentNode<ListVotesQuery, Types.Exact<{
    where?: Types.Vote_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Vote_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>>;
export declare const FindVoteDocument: DocumentNode<FindVoteQuery, Types.Exact<{
    id: Types.Scalars['ID'];
    connectedAddress?: Types.InputMaybe<Types.Scalars['Bytes']>;
}>>;
