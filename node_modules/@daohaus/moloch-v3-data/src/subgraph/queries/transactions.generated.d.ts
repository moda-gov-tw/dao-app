import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type ListTxsQueryVariables = Types.Exact<{
    where?: Types.EventTransaction_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.EventTransaction_OrderBy;
    orderDirection?: Types.OrderDirection;
}>;
export type ListTxsQuery = {
    transactions: Array<{
        id: string;
        createdAt: string;
        daoAddress?: string | undefined;
    }>;
};
export type FindTxQueryVariables = Types.Exact<{
    id: Types.Scalars['ID'];
}>;
export type FindTxQuery = {
    transaction?: {
        id: string;
        createdAt: string;
        daoAddress?: string | undefined;
    } | undefined;
};
export declare const ListTxsDocument: DocumentNode<ListTxsQuery, Types.Exact<{
    where?: Types.EventTransaction_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.EventTransaction_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
}>>;
export declare const FindTxDocument: DocumentNode<FindTxQuery, Types.Exact<{
    id: Types.Scalars['ID'];
}>>;
