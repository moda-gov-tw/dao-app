"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addParsedContent = exports.addDaoProfileFields = exports.getDaoAvatarImg = exports.transformMembershipList = exports.transformTokenBalances = exports.transformProposal = void 0;
const utils_1 = require("@daohaus/utils");
const proposalsStatus_1 = require("./proposalsStatus");
const transformProposal = (proposal) => {
    return Object.assign(Object.assign({}, proposal), { status: (0, proposalsStatus_1.getProposalStatus)(proposal) });
};
exports.transformProposal = transformProposal;
const transformTokenBalances = (tokenBalanceRes, safeAddress) => {
    const fiatTotal = tokenBalanceRes.reduce((sum, balance) => {
        sum += Number(balance.fiatBalance);
        return sum;
    }, 0);
    return { safeAddress, tokenBalances: tokenBalanceRes, fiatTotal };
};
exports.transformTokenBalances = transformTokenBalances;
const transformMembershipList = (memberships) => {
    return memberships.reduce((list, network) => {
        var _a, _b;
        if ((_a = network === null || network === void 0 ? void 0 : network.data) === null || _a === void 0 ? void 0 : _a.daos) {
            const daos = (_b = network === null || network === void 0 ? void 0 : network.data) === null || _b === void 0 ? void 0 : _b.daos.map((dao) => {
                var _a;
                return {
                    dao: dao.id,
                    daoAvatarImg: (0, exports.getDaoAvatarImg)(dao),
                    name: dao.name,
                    safeAddress: dao.safeAddress,
                    activeProposalCount: ((_a = dao.activeProposals) === null || _a === void 0 ? void 0 : _a.length) || 0,
                    totalProposalCount: dao.proposalCount,
                    activeMemberCount: dao.activeMemberCount,
                    votingPower: (0, utils_1.votingPowerPercentage)(dao.totalShares, dao.members[0].delegateShares),
                    networkId: network.networkId,
                    delegatingTo: dao.members[0].delegatingTo !== dao.members[0].memberAddress
                        ? dao.members[0].delegatingTo
                        : undefined,
                    isDelegate: Number(dao.members[0].delegateOfCount) > 0,
                    memberAddress: dao.members[0].memberAddress,
                    contractType: 'Moloch v3',
                };
            });
            return [...list, ...daos];
        }
        else {
            return list;
        }
    }, []);
};
exports.transformMembershipList = transformMembershipList;
const getDaoAvatarImg = (dao) => {
    if (!dao.profile || !dao.profile.length)
        return;
    const obj = JSON.parse(dao.profile[0].content);
    const avatarUrl = obj.avatarImg && obj.avatarImg.match(/Qm[a-zA-Z0-9/.]+/)
        ? `https://daohaus.mypinata.cloud/ipfs/${obj.avatarImg.match(/Qm[a-zA-Z0-9/.]+/)}`
        : obj.avatarImg;
    return avatarUrl;
};
exports.getDaoAvatarImg = getDaoAvatarImg;
const addDaoProfileFields = (dao) => {
    if (!dao.profile || !dao.profile.length)
        return;
    try {
        const obj = JSON.parse(dao.profile[0].content);
        const links = obj.links &&
            obj.links.map((linkObj) => {
                return typeof linkObj === 'string' ? JSON.parse(linkObj) : {};
            });
        const avatarUrl = (0, exports.getDaoAvatarImg)(dao);
        return {
            description: obj.description,
            longDescription: obj.longDescription,
            avatarImg: avatarUrl,
            tags: obj.tags,
            links,
        };
    }
    catch (e) {
        console.log('daoprofile parsing error', e);
        return;
    }
};
exports.addDaoProfileFields = addDaoProfileFields;
const addParsedContent = (record) => {
    if ((record === null || record === void 0 ? void 0 : record.contentType) === 'json') {
        try {
            const obj = JSON.parse(record.content);
            return Object.assign(Object.assign({}, record), { parsedContent: obj });
        }
        catch (e) {
            console.log('err', e);
            return;
        }
    }
    return record;
};
exports.addParsedContent = addParsedContent;
//# sourceMappingURL=transformers.js.map