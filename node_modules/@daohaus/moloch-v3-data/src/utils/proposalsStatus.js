"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProposalStatus = exports.passedQuorum = exports.isProposalFailed = exports.proposalNeedsProcessing = exports.isProposalExpired = exports.isProposalInGrace = exports.isProposalInVoting = exports.isProposalActionFailed = exports.isProposalPassed = exports.isProposalCancelled = exports.isProposalUnsponsored = void 0;
const utils_1 = require("@daohaus/utils");
const isProposalUnsponsored = (proposal) => {
    return (!proposal.sponsored && !proposal.cancelled && !(0, exports.isProposalExpired)(proposal));
};
exports.isProposalUnsponsored = isProposalUnsponsored;
const isProposalCancelled = (proposal) => proposal.cancelled;
exports.isProposalCancelled = isProposalCancelled;
const isProposalPassed = (proposal) => proposal.passed;
exports.isProposalPassed = isProposalPassed;
const isProposalActionFailed = (proposal) => proposal.actionFailed;
exports.isProposalActionFailed = isProposalActionFailed;
const isProposalInVoting = (proposal) => {
    const now = (0, utils_1.nowInSeconds)();
    return (Number(proposal.votingStarts) < now && Number(proposal.votingEnds) > now);
};
exports.isProposalInVoting = isProposalInVoting;
const isProposalInGrace = (proposal) => {
    const now = (0, utils_1.nowInSeconds)();
    return Number(proposal.votingEnds) < now && Number(proposal.graceEnds) > now;
};
exports.isProposalInGrace = isProposalInGrace;
const isProposalExpired = (proposal) => Number(proposal.expiration) > 0 &&
    !proposal.cancelled &&
    Number(proposal.expiration) <
        Number(proposal.votingPeriod) +
            Number(proposal.gracePeriod) +
            (0, utils_1.nowInSeconds)();
exports.isProposalExpired = isProposalExpired;
const proposalNeedsProcessing = (proposal) => !proposal.processed &&
    proposal.sponsored &&
    !proposal.cancelled &&
    (0, utils_1.nowInSeconds)() > Number(proposal.graceEnds) &&
    Number(proposal.yesBalance) > Number(proposal.noBalance);
exports.proposalNeedsProcessing = proposalNeedsProcessing;
const isProposalFailed = (proposal) => proposal.sponsored &&
    !proposal.cancelled &&
    (0, utils_1.nowInSeconds)() > Number(proposal.graceEnds) &&
    (!(0, exports.passedQuorum)(proposal) ||
        Number(proposal.yesBalance) <= Number(proposal.noBalance));
exports.isProposalFailed = isProposalFailed;
const isMinRetentionFailure = (proposal) => {
    return (proposal.sponsored &&
        !proposal.cancelled &&
        proposal.processed &&
        !proposal.passed &&
        failedMinRetention(proposal));
};
const failedMinRetention = (proposal) => {
    const propPercent = (Number(proposal.maxTotalSharesAndLootAtYesVote) *
        Number(proposal.dao.minRetentionPercent)) /
        100;
    return Number(proposal.dao.totalShares) < propPercent;
};
const isUnknownFailure = (proposal) => {
    return (proposal.sponsored &&
        !proposal.cancelled &&
        proposal.processed &&
        !proposal.passed);
};
const passedQuorum = (proposal) => {
    return (0, utils_1.checkHasQuorum)({
        yesVotes: Number(proposal.yesBalance),
        totalShares: Number(proposal.dao.totalShares),
        quorumPercent: Number(proposal.dao.quorumPercent),
    });
};
exports.passedQuorum = passedQuorum;
const getProposalStatus = (proposal) => {
    if ((0, exports.isProposalUnsponsored)(proposal)) {
        return utils_1.PROPOSAL_STATUS['unsponsored'];
    }
    if ((0, exports.isProposalCancelled)(proposal)) {
        return utils_1.PROPOSAL_STATUS['cancelled'];
    }
    if ((0, exports.isProposalActionFailed)(proposal)) {
        return utils_1.PROPOSAL_STATUS['actionFailed'];
    }
    if ((0, exports.isProposalPassed)(proposal)) {
        return utils_1.PROPOSAL_STATUS['passed'];
    }
    if ((0, exports.isProposalInVoting)(proposal)) {
        return utils_1.PROPOSAL_STATUS['voting'];
    }
    if ((0, exports.isProposalInGrace)(proposal)) {
        return utils_1.PROPOSAL_STATUS['grace'];
    }
    // processing check needs to be before failed check
    // a failed proposal doesn't need processing unless it failed due to quorum
    if ((0, exports.proposalNeedsProcessing)(proposal)) {
        return utils_1.PROPOSAL_STATUS['needsProcessing'];
    }
    if ((0, exports.isProposalFailed)(proposal)) {
        return utils_1.PROPOSAL_STATUS['failed'];
    }
    if ((0, exports.isProposalExpired)(proposal)) {
        return utils_1.PROPOSAL_STATUS['expired'];
    }
    if (isMinRetentionFailure(proposal)) {
        return utils_1.PROPOSAL_STATUS['failed'];
    }
    if (isUnknownFailure(proposal)) {
        return utils_1.PROPOSAL_STATUS['failed'];
    }
    return utils_1.PROPOSAL_STATUS['unknown'];
};
exports.getProposalStatus = getProposalStatus;
//# sourceMappingURL=proposalsStatus.js.map