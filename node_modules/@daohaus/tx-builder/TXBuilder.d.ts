import { TransactionReceipt } from 'viem';
import { ReactNode } from 'react';
import { PublicClient } from 'wagmi';
import { ABI, ArbitraryState, ArgType, TXLego } from '@daohaus/utils';
import { Keychain, PinataApiKeys } from '@daohaus/keychain-utils';
import { TxRecord } from './utils/txBuilderUtils';
export type TXLifeCycleFns = {
    onRequestSign?: () => void;
    onTxHash?: (txHash: string) => void;
    onTxError?: (error: unknown) => void;
    onTxSuccess?: (txReceipt: TransactionReceipt, txHash: string, appState: ArbitraryState) => void;
    onPollStart?: () => void;
    onPollError?: (error: unknown) => void;
    onPollSuccess?: (result: any, txReceipt: TransactionReceipt, appState: ArbitraryState) => void;
};
export type LifeCycleNames = keyof Required<TXLifeCycleFns>;
export type ArgCallback = (state: ArbitraryState) => ArgType[] | Promise<ArgType[]>;
type FireTransaction<CallerStateModel extends ArbitraryState = ArbitraryState> = ({ tx, callerState, lifeCycleFns, staticArgs, }: {
    tx: TXLego;
    callerState?: CallerStateModel;
    lifeCycleFns?: TXLifeCycleFns;
    staticArgs?: ArgType[];
}) => Promise<boolean> | undefined;
type TxContext = {
    transactions: TxRecord;
    txAmt: number;
    fireTransaction: FireTransaction;
    appState?: ArbitraryState;
};
export declare const TxBuilderContext: import("react").Context<TxContext>;
type BuilderProps<ApplicationState extends ArbitraryState = ArbitraryState> = {
    chainId: string | undefined | null;
    safeId?: string;
    daoId?: string;
    children: ReactNode;
    appState: ApplicationState;
    txLifeCycleFns?: TXLifeCycleFns;
    localABIs?: Record<string, ABI>;
    argCallbackRecord?: Record<string, (args: ArbitraryState) => ArgType[]>;
    rpcs?: Keychain;
    graphApiKeys?: Keychain;
    pinataApiKeys?: PinataApiKeys;
    explorerKeys?: Keychain;
    publicClient?: PublicClient;
};
export declare const TXBuilder: ({ chainId, safeId, daoId, appState, children, localABIs, txLifeCycleFns, argCallbackRecord, rpcs, graphApiKeys, pinataApiKeys, explorerKeys, publicClient, }: BuilderProps) => JSX.Element;
export declare const useTxBuilder: () => TxContext;
export {};
