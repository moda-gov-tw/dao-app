import { PublicClient } from 'wagmi';
import { Hash } from 'viem';
import { ABI, ArbitraryState, ReactSetter, TXLego } from '@daohaus/utils';
import { Keychain, PinataApiKeys, ValidNetwork } from '@daohaus/keychain-utils';
import { ArgCallback, TXLifeCycleFns } from '../TXBuilder';
export type TxRecord = Record<string, TXLego>;
export type MassState = {
    tx: TXLego;
    chainId: ValidNetwork;
    safeId?: string;
    daoid?: string;
    localABIs: Record<string, ABI>;
    appState: ArbitraryState;
};
export declare const executeTx: (args: {
    tx: TXLego;
    txHash: Hash;
    publicClient: PublicClient;
    setTransactions: ReactSetter<TxRecord>;
    chainId: ValidNetwork;
    lifeCycleFns?: TXLifeCycleFns;
    graphApiKeys: Keychain;
    appState: ArbitraryState;
}) => Promise<{
    receipt: import("viem").TransactionReceipt;
    txHash: `0x${string}`;
    error?: undefined;
} | {
    error: {
        type: string;
        errorObject: unknown;
        message: string;
    };
    receipt?: undefined;
    txHash?: undefined;
} | undefined>;
export declare function prepareTX(args: {
    tx: TXLego;
    chainId: ValidNetwork;
    safeId?: string;
    setTransactions: ReactSetter<TxRecord>;
    appState: ArbitraryState;
    lifeCycleFns: TXLifeCycleFns;
    localABIs: Record<string, ABI>;
    argCallbackRecord: Record<string, ArgCallback>;
    rpcs: Keychain;
    graphApiKeys: Keychain;
    pinataApiKeys: PinataApiKeys;
    explorerKeys: Keychain;
    publicClient?: PublicClient;
}): Promise<void>;
