import { ABI, ArbitraryState, JSONDetailsSearch, StringSearch } from '@daohaus/utils';
import { Keychain, PinataApiKeys, ValidNetwork } from '@daohaus/keychain-utils';
export declare const checkArgType: (arg: unknown) => import("@daohaus/utils").ArgType;
export declare const deepSearch: (appState: ArbitraryState, pathString: StringSearch) => unknown;
export declare const searchApp: (appState: ArbitraryState, pathString: StringSearch, shouldThrow?: boolean) => {};
export declare const checkHasCondition: (pathString: StringSearch) => boolean;
export declare const handleConditionalPath: (pathString: StringSearch) => string[];
export declare const searchArg: ({ appState, searchString, shouldThrow, }: {
    appState: ArbitraryState;
    searchString: StringSearch;
    shouldThrow: boolean;
}) => import("@daohaus/utils").ArgType;
export declare const handleDetailsJSON: ({ arg, appState, localABIs, chainId, safeId, rpcs, pinataApiKeys, explorerKeys, }: {
    arg: JSONDetailsSearch;
    appState: ArbitraryState;
    localABIs: Record<string, ABI>;
    chainId: ValidNetwork;
    safeId?: string | undefined;
    rpcs: Keychain;
    pinataApiKeys: PinataApiKeys;
    explorerKeys: Keychain;
}) => Promise<string>;
