import { ABI, ArbitraryState, ArgEncode, ArgType, EncodeCallArg, EstimateGas, EthAddress, EncodeMulticall, JSONDetailsSearch, MulticallAction, MulticallArg, StringSearch, TXLego } from '@daohaus/utils';
import { Keychain, PinataApiKeys, ValidNetwork } from '@daohaus/keychain-utils';
import { MetaTransaction } from '@gnosis.pm/safe-contracts';
export declare const estimateFunctionalGas: ({ chainId, contractAddress, from, value, data, rpcs, }: {
    chainId: ValidNetwork;
    contractAddress: string;
    from: string;
    value: bigint;
    data: string;
    rpcs?: Keychain | undefined;
}) => Promise<number | undefined>;
export declare const txActionToMetaTx: ({ abi, method, address, args, value, operation, }: {
    abi: ABI;
    address: string;
    method: string;
    args: ReadonlyArray<ArgType>;
    value?: number | undefined;
    operation?: number | undefined;
}) => MetaTransaction;
export declare const handleEncodeCallArg: ({ arg, chainId, localABIs, appState, rpcs, pinataApiKeys, explorerKeys, }: {
    arg: EncodeCallArg;
    chainId: ValidNetwork;
    localABIs: Record<string, ABI>;
    appState: ArbitraryState;
    rpcs: Keychain;
    pinataApiKeys: PinataApiKeys;
    explorerKeys: Keychain;
}) => Promise<string>;
export declare const handleMulticallArg: ({ arg, chainId, localABIs, appState, rpcs, pinataApiKeys, explorerKeys, }: {
    arg: MulticallArg | EncodeMulticall;
    chainId: ValidNetwork;
    localABIs: Record<string, ABI>;
    appState: ArbitraryState;
    rpcs: Keychain;
    pinataApiKeys: PinataApiKeys;
    explorerKeys: Keychain;
}) => Promise<MetaTransaction[]>;
export declare const gasEstimateFromActions: ({ actions, actionsCount, chainId, daoId, }: {
    actions: MetaTransaction[];
    actionsCount: number;
    chainId: ValidNetwork;
    daoId: string;
    safeId: string;
}) => Promise<number>;
export declare const handleEncodeMulticallArg: ({ arg, actions, }: {
    arg: MulticallArg | EncodeMulticall;
    actions: MetaTransaction[];
}) => Promise<string>;
export declare const handleGasEstimate: ({ safeId, chainId, localABIs, appState, arg, rpcs, pinataApiKeys, explorerKeys, }: {
    safeId?: string | undefined;
    chainId: ValidNetwork;
    arg: EstimateGas;
    appState: ArbitraryState;
    localABIs?: Record<string, ABI> | undefined;
    rpcs: Keychain;
    pinataApiKeys: PinataApiKeys;
    explorerKeys: Keychain;
}) => Promise<number>;
export declare const encodeMultiAction: (rawMulti: MetaTransaction[]) => string | {
    error: true;
    message: string;
};
export declare const encodeExecFromModule: ({ safeId, metaTx, }: {
    safeId: string;
    metaTx: MetaTransaction;
}) => MetaTransaction[];
export declare const buildMultiCallTX: ({ id, baalAddress, actions, JSONDetails, formActions, gasBufferPercentage, }: {
    id: string;
    baalAddress?: Keychain | `.${string}` | `0x${string}` | undefined;
    JSONDetails?: JSONDetailsSearch | undefined;
    actions: MulticallAction[];
    formActions?: boolean | undefined;
    gasBufferPercentage?: number | undefined;
}) => TXLego;
export declare const handleArgEncode: ({ arg, chainId, safeId, localABIs, appState, rpcs, pinataApiKeys, explorerKeys, }: {
    arg: ArgEncode;
    chainId: ValidNetwork;
    safeId?: string | undefined;
    localABIs: Record<string, ABI>;
    appState: ArbitraryState;
    rpcs: Keychain;
    pinataApiKeys: PinataApiKeys;
    explorerKeys: Keychain;
}) => Promise<string>;
