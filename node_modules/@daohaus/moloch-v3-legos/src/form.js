"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ADVANCED_PROPOSAL_FORMS = exports.BASIC_PROPOSAL_FORMS = exports.COMMON_FORMS = exports.TABULA_FORMS = exports.PROPOSAL_FORMS = exports.getFormLegoById = void 0;
const utils_1 = require("@daohaus/utils");
const fields_1 = require("./fields");
const tx_1 = require("./tx");
const getFormLegoById = (id) => {
    const allForms = Object.assign(Object.assign({}, exports.PROPOSAL_FORMS), exports.COMMON_FORMS);
    const formKey = Object.keys(allForms).find((key) => {
        return allForms[key].id === id;
    });
    if (!formKey)
        return;
    return allForms[formKey];
};
exports.getFormLegoById = getFormLegoById;
// Proposal settings fields (e.g. proposal expiry, proposal offering)
const PROPOSAL_SETTINGS_FIELDS = [fields_1.FIELD.PROPOSAL_EXPIRY, fields_1.FIELD.PROP_OFFERING];
/*
Quick Reference for forms

PROPOSAL_FORMS KEYS
- SHARE_SWAP
- SIGNAL
- ISSUE
- ADD_SHAMAN
- TRANSFER_ERC20
- TRANSFER_NETWORK_TOKEN
- UPDATE_GOV_SETTINGS
- TOKEN_SETTINGS
- TOKENS_FOR_SHARES
- GUILDKICK
- CREATE_PUBLICATION
- CREATE_ARTICLE

COMMON_FORMS KEYS
- METADATA_SETTINGS
- UPDATE_SHAMAN
*/
exports.PROPOSAL_FORMS = {
    SIGNAL: {
        id: 'SIGNAL',
        title: '信號提案',
        subtitle: '信號提案',
        description: '發起鏈上成員投票',
        requiredFields: { title: true, description: true },
        tx: tx_1.TX.POST_SIGNAL,
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    ISSUE: {
        id: 'ISSUE',
        title: '新增成員提案',
        subtitle: '代幣提案',
        description: '發起發放治理代幣提案',
        tx: tx_1.TX.ISSUE,
        requiredFields: {
            title: true,
            description: true,
            sharesRequested: true,
            lootRequested: true,
            recipient: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'recipient',
                type: 'input',
                label: 'Recipient',
                expectType: 'ethAddress',
                placeholder: '0x...',
            },
            Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: 'Voting Token Requested', id: 'sharesRequested' }),
            Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: 'Non-Voting Token Requested', id: 'lootRequested' }),
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    ADD_SHAMAN: {
        id: 'ADD_SHAMAN',
        title: 'Add Shaman',
        description: 'Grant DAO permissions to an external contract.',
        subtitle: 'Shaman Proposal',
        requiredFields: {
            title: true,
            description: true,
            shamanAddress: true,
            shamanPermission: true,
        },
        tx: tx_1.TX.ADD_SHAMAN,
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            fields_1.FIELD.SHAMAN_ADDRESS,
            fields_1.FIELD.SHAMAN_PERMISSION,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    TRANSFER_ERC20: {
        id: 'TRANSFER_ERC20',
        title: 'ERC20 轉帳提案',
        subtitle: '資金提案',
        description: '發起從DAO金庫轉帳ERC-20代幣提案',
        tx: tx_1.TX.ISSUE_ERC20,
        requiredFields: {
            title: true,
            description: true,
            payment: true,
            recipient: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'recipient',
                type: 'input',
                label: 'Recipient',
                info: 'Address to receive the tokens',
                placeholder: '0x...',
            },
            fields_1.FIELD.REQUEST_TOKEN,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    TRANSFER_ERC20_SIDECAR: {
        id: 'TRANSFER_ERC20_SIDECAR',
        title: 'Transfer ERC-20',
        subtitle: 'Transfer Proposal',
        description: 'Create a proposal to transfer ERC-20 tokens from the DAO safe',
        tx: tx_1.TX.ISSUE_ERC20_SIDECAR,
        requiredFields: {
            title: true,
            description: true,
            payment: true,
            recipient: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            fields_1.FIELD.SAFE_SELECT,
            {
                id: 'recipient',
                type: 'input',
                label: 'Recipient',
                info: 'Address to receive the tokens',
                placeholder: '0x...',
            },
            fields_1.FIELD.REQUEST_TOKEN,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    TRANSFER_NETWORK_TOKEN: {
        id: 'TRANSFER_NETWORK_TOKEN',
        title: 'Network Token Transfer',
        subtitle: '資金提案',
        description: "Request network's native token from the DAO treasury.",
        tx: tx_1.TX.ISSUE_NETWORK_TOKEN,
        requiredFields: {
            title: true,
            description: true,
            payment: true,
            recipient: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'recipient',
                type: 'input',
                label: 'Recipient',
                info: 'Address to receive the tokens',
                placeholder: '0x...',
            },
            fields_1.FIELD.REQUEST_NATIVE_TOKEN,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    TRANSFER_NETWORK_TOKEN_SIDECAR: {
        id: 'TRANSFER_NETWORK_TOKEN_SIDECAR',
        title: 'Network Token Transfer',
        subtitle: '資金提案',
        description: "Request network's native token from the DAO safe.",
        tx: tx_1.TX.ISSUE_NETWORK_TOKEN_SIDECAR,
        requiredFields: {
            title: true,
            description: true,
            payment: true,
            recipient: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            fields_1.FIELD.SAFE_SELECT,
            {
                id: 'recipient',
                type: 'input',
                label: 'Recipient',
                info: 'Address to receive the tokens',
                placeholder: '0x...',
            },
            fields_1.FIELD.REQUEST_NATIVE_TOKEN,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    UPDATE_GOV_SETTINGS: {
        id: 'UPDATE_GOV_SETTINGS',
        title: 'Update Governance Settings',
        subtitle: 'Governance Proposal',
        description: 'Change proposal timing or advanced governance settings.',
        tx: tx_1.TX.UPDATE_GOV_SETTINGS,
        requiredFields: {
            title: true,
            description: true,
            votingPeriod: true,
            gracePeriod: true,
            quorum: true,
            minRetention: true,
            sponsorThreshold: true,
            newOffering: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'timing',
                type: 'formSegment',
                title: 'Proposal Timing',
                description: 'Update your timing for Voting and Grace periods.',
                fields: [
                    {
                        id: 'timingSplit',
                        type: 'splitColumn',
                        rows: [
                            {
                                rowId: 'timingRows',
                                left: {
                                    id: 'votingPeriod',
                                    type: 'timePicker',
                                    label: 'Voting Period',
                                    info: utils_1.SUMMON_COPY.VOTING_PERIOD,
                                },
                                right: {
                                    id: 'gracePeriod',
                                    type: 'timePicker',
                                    label: 'Grace Period',
                                    info: utils_1.SUMMON_COPY.GRACE_PERIOD,
                                },
                            },
                        ],
                    },
                ],
            },
            {
                id: 'advanced',
                type: 'formSegment',
                title: 'Advanced Governance',
                description: 'Modify some advanced governance features.',
                fields: [
                    {
                        id: 'advancedSplit',
                        type: 'splitColumn',
                        rows: [
                            {
                                rowId: 'row1',
                                left: {
                                    id: 'quorum',
                                    type: 'input',
                                    expectType: 'percent',
                                    label: 'Quorum %',
                                    placeholder: '20',
                                    info: utils_1.SUMMON_COPY.QUORUM,
                                },
                                right: {
                                    id: 'minRetention',
                                    type: 'input',
                                    label: 'Min Retention',
                                    expectType: 'percent',
                                    placeholder: '66',
                                    info: utils_1.SUMMON_COPY.MIN_RETENTION,
                                },
                            },
                            {
                                rowId: 'row2',
                                left: {
                                    id: 'sponsorThreshold',
                                    type: 'toWeiInput',
                                    expectType: 'number',
                                    label: 'Sponsor Threshold',
                                    placeholder: '1',
                                    info: utils_1.SUMMON_COPY.SPONSOR_THRESHOLD,
                                },
                                right: {
                                    id: 'newOffering',
                                    type: 'toWeiInput',
                                    label: 'New Offering',
                                    expectType: 'number',
                                    placeholder: '0',
                                    info: utils_1.SUMMON_COPY.NEW_OFFERING,
                                },
                            },
                        ],
                    },
                ],
            },
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    TOKEN_SETTINGS: {
        id: 'TOKEN_SETTINGS',
        title: 'Update Token Settings',
        subtitle: 'Token Proposal',
        description: 'Change transferability of voting or non-voting tokens.',
        tx: tx_1.TX.TOKEN_SETTINGS,
        requiredFields: {
            title: true,
            description: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'tokenSettings',
                type: 'formSegment',
                title: 'DAO Tokens',
                description: 'Update Token Transferability',
                fields: [
                    {
                        id: 'split',
                        type: 'splitColumn',
                        rows: [
                            {
                                rowId: 'row1',
                                left: {
                                    id: 'vStake',
                                    type: 'switch',
                                    label: 'Voting Token',
                                    info: utils_1.SUMMON_COPY.STAKE_TRANSFER,
                                    switches: [
                                        {
                                            id: 'vStake',
                                            fieldLabel: {
                                                off: 'Transferable',
                                                on: 'Not Transferable',
                                            },
                                        },
                                    ],
                                },
                                right: {
                                    id: 'nvStake',
                                    type: 'switch',
                                    label: 'Non-Voting Token',
                                    info: utils_1.SUMMON_COPY.NV_STAKE_TRANSFER,
                                    switches: [
                                        {
                                            id: 'nvStake',
                                            fieldLabel: {
                                                off: 'Transferable',
                                                on: 'Not Transferable',
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                ],
            },
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    TOKENS_FOR_SHARES: {
        id: 'TOKENS_FOR_SHARES',
        title: 'DAO Token Swap',
        description: 'Request voting or non-voting tokens from the DAO in exchange for tokens.',
        subtitle: 'Token Proposal',
        tx: tx_1.TX.TOKENS_FOR_SHARES,
        requiredFields: {
            title: true,
            description: true,
            sharesRequested: true,
            lootRequested: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: 'Voting Token Requested', id: 'sharesRequested' }),
            Object.assign(Object.assign({}, fields_1.FIELD.TO_WEI), { label: 'Non-Voting Token Requested', id: 'lootRequested' }),
            fields_1.FIELD.TRIBUTE,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    GUILDKICK: {
        id: 'GUILDKICK',
        title: '踢除成員',
        subtitle: '代幣提案',
        description: '將此成員的可投票代幣替換成不可投票代幣',
        tx: tx_1.TX.GUILDKICK,
        requiredFields: {
            title: true,
            memberAddress: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'memberAddress',
                type: 'selectApplicant',
                label: '成員',
                daoMemberOnly: true,
            },
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    WALLETCONNECT: {
        id: 'WALLETCONNECT',
        title: 'Use WalletConnect',
        subtitle: 'WalletConnect Proposal',
        description: 'Interact with external contracts and applications.',
        tx: tx_1.TX.WALLETCONNECT,
        requiredFields: {
            title: true,
            walletConnectLink: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            fields_1.FIELD.WALLETCONNECT_LINKER,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    MULTICALL_BUILDER: {
        id: 'MULTICALL',
        title: 'Multicall Proposal Builder',
        subtitle: 'Multicall Proposal',
        description: 'Use the transaction builder to propose a multicall proposal.',
        tx: tx_1.TX.MULTICALL,
        requiredFields: {
            title: true,
        },
        fields: [
            {
                id: 'details',
                type: 'formSegment',
                collapsible: true,
                defaultOpen: true,
                title: 'Proposal Overview',
                fields: [
                    fields_1.FIELD.TITLE,
                    fields_1.FIELD.DESCRIPTION,
                    fields_1.FIELD.LINK,
                    ...PROPOSAL_SETTINGS_FIELDS,
                ],
            },
            {
                id: 'multisendActions',
                type: 'multisendActions',
            },
        ],
    },
    MULTICALL_BUILDER_SIDECAR: {
        id: 'MULTICALL_SIDECAR',
        title: 'Multicall Proposal Builder',
        subtitle: 'Multicall Proposal',
        description: 'Use the transaction builder to propose a multicall proposal.',
        tx: tx_1.TX.MULTICALL_SIDECAR,
        requiredFields: {
            title: true,
        },
        fields: [
            {
                id: 'details',
                type: 'formSegment',
                collapsible: true,
                defaultOpen: true,
                title: 'Proposal Overview',
                fields: [
                    fields_1.FIELD.TITLE,
                    fields_1.FIELD.DESCRIPTION,
                    fields_1.FIELD.LINK,
                    ...PROPOSAL_SETTINGS_FIELDS,
                ],
            },
            {
                id: 'multisendActions',
                type: 'multisendActions',
            },
        ],
    },
    ADD_SIGNER_TO_SIDECAR: {
        id: 'ADD_SIGNER_TO_SIDECAR',
        title: 'Add Signer to Safe',
        description: 'Create a proposal to tadd a signer to a DAO Safe',
        tx: tx_1.TX.ADD_SIGNER_TO_SIDECAR,
        devtool: true,
        log: true,
        requiredFields: {
            title: true,
            description: true,
            signer: true,
            threshold: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            fields_1.FIELD.SAFE_SELECT,
            {
                id: 'signer',
                type: 'input',
                label: 'Signer',
                info: 'Signer Address',
                expectType: 'ethAddress',
                placeholder: '0x...',
            },
            {
                id: 'threshold',
                type: 'input',
                label: 'Threshold (1 for 1/1 signers)',
                expectType: 'number',
                placeholder: '1',
            },
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    ISSUE_SHARES: {
        id: 'ISSUE_SHARES',
        title: 'DAO Token Request',
        subtitle: 'Token Proposal',
        description: 'Request voting tokens from the DAO for multiple addresses.',
        tx: tx_1.TX.ISSUE_SHARES,
        log: true,
        requiredFields: {
            title: true,
            description: true,
            addressesAndAmounts: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            fields_1.FIELD.ADDRESSES_AMOUNTS,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
};
exports.TABULA_FORMS = {
    CREATE_PUBLICATION: {
        id: 'CREATE_PUBLICATION',
        title: 'Start Publication',
        subtitle: 'Publication Proposal',
        description: 'Start a new DAO publication on Tabula.gg',
        tx: tx_1.TABULA_TX.CREATE_PUBLICATION,
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'pubData',
                type: 'formSegment',
                title: 'Publication Data',
                description: 'Some information about your publication.',
                fields: [
                    {
                        id: 'pubName',
                        type: 'input',
                        label: 'Publication Name',
                        placeholder: 'Name',
                    },
                    {
                        id: 'tags',
                        type: 'csInput',
                        label: 'Publication Name',
                        placeholder: 'comma, separated, tags',
                        itemNoun: {
                            singular: 'tag',
                            plural: 'tags',
                        },
                    },
                    {
                        id: 'pubDescription',
                        type: 'textarea',
                        label: 'Publication Description',
                        placeholder: 'Description',
                    },
                    {
                        id: 'pubImage',
                        type: 'input',
                        label: 'Publication Image',
                        placeholder: 'Image URL',
                        expectType: 'url',
                    },
                ],
            },
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    CREATE_ARTICLE: {
        id: 'CREATE_ARTICLE',
        title: 'Write an Article',
        subtitle: 'Tabula Article Proposal',
        description: 'Write an article on Tabula.gg',
        tx: tx_1.TABULA_TX.CREATE_ARTICLE,
        requiredFields: {
            title: true,
            description: true,
            articleTitle: true,
            fakeMD: true,
            pub_id: true,
        },
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            {
                id: 'pubData',
                type: 'formSegment',
                title: 'Publication Data',
                description: 'Some information about your publication.',
                fields: [
                    {
                        id: 'articleTitle',
                        type: 'input',
                        label: 'Article Title',
                        placeholder: "ex. 10 Signs You're a Real Champ",
                    },
                    fields_1.FIELD.FAKE_MD,
                ],
            },
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
};
exports.COMMON_FORMS = {
    METADATA_SETTINGS: {
        id: 'METADATA_SETTINGS',
        title: '更新相關數據',
        subtitle: 'DAO 設定',
        requiredFields: { name: true },
        tx: tx_1.TX.UPDATE_METADATA_SETTINGS,
        fields: [
            fields_1.FIELD.NAME,
            fields_1.FIELD.DESCRIPTION,
            Object.assign(Object.assign({}, fields_1.FIELD.DESCRIPTION), { id: 'long_description', label: '介紹' }),
            Object.assign(Object.assign({}, fields_1.FIELD.LINK), { id: 'icon', label: '圖像' }),
            {
                id: 'links',
                type: 'formSegment',
                title: '替DAO 加上介紹連結',
                fields: [
                    Object.assign(Object.assign({}, fields_1.FIELD.LINK), { id: 'discord', label: 'Discord' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'github', label: 'Github' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'blog', label: 'Blog' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'telegram', label: 'Telegram' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'twitter', label: 'Twitter' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'web', label: 'Website' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'custom1', label: '客製連結 #1' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'custom2', label: '客製連結 #2' }),
                    Object.assign(Object.assign({}, fields_1.FIELD.METADATA_LINK), { id: 'custom3', label: '客製連結 #3' }),
                ],
            },
            fields_1.FIELD.TAGS,
        ],
    },
    UPDATE_SHAMAN: {
        id: 'UPDATE_SHAMAN',
        title: 'Update Shaman Settings',
        description: 'Reduce shaman permissions level.',
        subtitle: 'Shaman Proposal',
        requiredFields: {
            title: true,
            description: true,
            shamanAddress: true,
            shamanPermission: true,
        },
        tx: tx_1.TX.ADD_SHAMAN,
        fields: [
            fields_1.FIELD.TITLE,
            fields_1.FIELD.DESCRIPTION,
            fields_1.FIELD.LINK,
            Object.assign(Object.assign({}, fields_1.FIELD.SHAMAN_ADDRESS), { disabled: true }),
            fields_1.FIELD.SHAMAN_DELUXE,
            ...PROPOSAL_SETTINGS_FIELDS,
        ],
    },
    MANAGE_DELEGATE: {
        id: 'MANAGE_DELEGATE',
        fields: [fields_1.FIELD.DELEGATE],
        requiredFields: {
            delegatingTo: true,
        },
        submitButtonText: 'Update Delegate',
        tx: tx_1.TX.MANAGE_DELEGATE,
    },
    RAGEQUIT: {
        id: 'RAGEQUIT',
        title: 'Ragequit',
        subtitle: 'Members',
        fields: [
            {
                id: 'tokenAmounts',
                type: 'formSegment',
                title: 'Step 1. Select voting and/or non-voting tokens to ragequit',
                fields: [
                    {
                        id: 'sharesToBurn',
                        type: 'ragequitToken',
                    },
                    { id: 'lootToBurn', type: 'ragequitToken' },
                ],
            },
            {
                id: 'tokenAddresses',
                type: 'formSegment',
                title: 'Step 2. Select treasury tokens you want to receive in exchange for your DAO tokens',
                fields: [{ id: 'tokens', type: 'ragequitTokenList' }],
            },
            {
                id: 'checkRender',
                type: 'checkRender',
                gateLabel: 'Ragequit to different address (optional)',
                components: [
                    {
                        id: 'to',
                        type: 'input',
                        label: 'Address to send funds',
                        expectType: 'ethAddress',
                        placeholder: '0x...',
                    },
                ],
            },
        ],
        tx: tx_1.TX.RAGEQUIT,
    },
    ADD_SAFE: {
        id: 'ADD_SAFE',
        description: 'Create a new Gnosis Safe and attach to your DAO as a non-ragequittable vault.',
        requiredFields: {
            name: true,
        },
        tx: tx_1.TX.ADD_SAFE,
        fields: [
            {
                id: 'name',
                type: 'input',
                label: 'Safe Name',
                placeholder: 'Enter name',
            },
        ],
        submitButtonText: 'Create',
    },
};
exports.BASIC_PROPOSAL_FORMS = {
    SIGNAL: exports.PROPOSAL_FORMS.SIGNAL,
    ISSUE: exports.PROPOSAL_FORMS.ISSUE,
    TOKENS_FOR_SHARES: exports.PROPOSAL_FORMS.TOKENS_FOR_SHARES,
    TRANSFER_ERC20: exports.PROPOSAL_FORMS.TRANSFER_ERC20,
    TRANSFER_NETWORK_TOKEN: exports.PROPOSAL_FORMS.TRANSFER_NETWORK_TOKEN,
};
exports.ADVANCED_PROPOSAL_FORMS = {
    WALLETCONNECT: exports.PROPOSAL_FORMS.WALLETCONNECT,
    UPDATE_GOV_SETTINGS: exports.PROPOSAL_FORMS.UPDATE_GOV_SETTINGS,
    TOKEN_SETTINGS: exports.PROPOSAL_FORMS.TOKEN_SETTINGS,
    ADD_SHAMAN: exports.PROPOSAL_FORMS.ADD_SHAMAN,
    GUILDKICK: exports.PROPOSAL_FORMS.GUILDKICK,
    MULTICALL_BUILDER: exports.PROPOSAL_FORMS.MULTICALL_BUILDER,
};
//# sourceMappingURL=form.js.map