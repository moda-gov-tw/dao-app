"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACTION_TX = exports.TABULA_TX = exports.TX = void 0;
const abis_1 = require("@daohaus/abis");
const utils_1 = require("@daohaus/utils");
const keychain_utils_1 = require("@daohaus/keychain-utils");
const tx_builder_1 = require("@daohaus/tx-builder");
const utils_2 = require("@daohaus/utils");
const utils_3 = require("@daohaus/utils");
const contracts_1 = require("./contracts");
const nestInArray = (arg) => {
    return {
        type: 'nestedArray',
        args: Array.isArray(arg) ? arg : [arg],
    };
};
exports.TX = {
    POST_SIGNAL: (0, tx_builder_1.buildMultiCallTX)({
        id: 'POST_SIGNAL',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: `.formValues.title`,
                description: `.formValues.description`,
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: utils_3.ProposalTypeIds.Signal },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.POSTER,
                method: 'post',
                operations: { type: 'static', value: 0 },
                args: [
                    {
                        type: 'JSONDetails',
                        jsonSchema: {
                            daoId: '.daoId',
                            table: { type: 'static', value: 'signal' },
                            queryType: { type: 'static', value: 'list' },
                            title: `.formValues.title`,
                            description: `.formValues.description`,
                            link: `.formValues.link`,
                        },
                    },
                    { type: 'static', value: utils_1.POSTER_TAGS.daoDatabaseProposal },
                ],
            },
        ],
    }),
    APPROVE_TOKEN: {
        id: 'APPROVE_TOKEN',
        contract: contracts_1.CONTRACT.ERC_20,
        method: 'approve',
        args: [
            { type: 'singleton', keychain: keychain_utils_1.CONTRACT_KEYCHAINS.TRIBUTE_MINION },
            { type: 'static', value: utils_2.MaxUint256 },
        ],
    },
    ISSUE: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ISSUE',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.IssueSharesLoot,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'mintShares',
                args: [
                    nestInArray('.formValues.recipient'),
                    nestInArray('.formValues.sharesRequested'),
                ],
            },
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'mintLoot',
                args: [
                    nestInArray('.formValues.recipient'),
                    nestInArray('.formValues.lootRequested'),
                ],
            },
        ],
    }),
    ISSUE_SHARES: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ISSUE',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.IssueSharesLoot,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'mintShares',
                args: [
                    '.formValues.addressesAndAmounts.recipients',
                    '.formValues.addressesAndAmounts.values',
                ],
            },
        ],
    }),
    ADD_SHAMAN: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ADD_SHAMAN',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: utils_3.ProposalTypeIds.AddShaman },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'setShamans',
                args: [
                    nestInArray('.formValues.shamanAddress'),
                    nestInArray('.formValues.shamanPermission'),
                ],
            },
        ],
    }),
    ISSUE_ERC20: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ISSUE_ERC20',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.TransferErc20,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.ERC_20_FUNDING,
                method: 'transfer',
                args: ['.formValues.recipient', '.formValues.paymentTokenAmt'],
            },
        ],
    }),
    ISSUE_ERC20_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ISSUE_ERC20_SIDECAR',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.TransferErc20,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'executeAsBaal',
                args: [
                    '.formValues.safeAddress',
                    { type: 'static', value: '0' },
                    {
                        type: 'encodeCall',
                        action: {
                            contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                            method: 'execTransactionFromModule',
                            args: [
                                {
                                    type: 'singleton',
                                    keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND,
                                },
                                { type: 'static', value: '0' },
                                {
                                    type: 'multicall',
                                    actions: [
                                        {
                                            contract: contracts_1.CONTRACT.ERC_20_FUNDING,
                                            method: 'transfer',
                                            args: [
                                                '.formValues.recipient',
                                                '.formValues.paymentTokenAmt',
                                            ],
                                        },
                                    ],
                                },
                                { type: 'static', value: '1' },
                            ],
                        },
                    },
                ],
            },
        ],
    }),
    ISSUE_NETWORK_TOKEN: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ISSUE_NETWORK_TOKEN',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.TransferNetworkToken,
                },
            },
        },
        actions: [
            {
                contract: {
                    type: 'static',
                    contractName: 'NETWORK',
                    abi: abis_1.LOCAL_ABI.ERC20,
                    targetAddress: '.formValues.recipient',
                },
                method: 'noMethod',
                args: [],
                value: '.formValues.paymentAmount',
                data: {
                    type: 'static',
                    value: utils_1.ENCODED_0X0_DATA,
                },
            },
        ],
    }),
    ISSUE_NETWORK_TOKEN_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ISSUE_NETWORK_TOKEN_SIDECAR',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.TransferNetworkToken,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'executeAsBaal',
                args: [
                    '.formValues.safeAddress',
                    { type: 'static', value: '0' },
                    {
                        type: 'encodeCall',
                        action: {
                            contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                            method: 'execTransactionFromModule',
                            args: [
                                {
                                    type: 'singleton',
                                    keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND,
                                },
                                { type: 'static', value: '0' },
                                {
                                    type: 'multicall',
                                    actions: [
                                        {
                                            contract: {
                                                type: 'static',
                                                contractName: 'NETWORK',
                                                abi: abis_1.LOCAL_ABI.ERC20,
                                                targetAddress: '.formValues.recipient',
                                            },
                                            method: 'noMethod',
                                            args: [],
                                            value: '.formValues.paymentAmount',
                                            data: {
                                                type: 'static',
                                                // value: ENCODED_0X0_DATA,
                                                value: '0x',
                                            },
                                        },
                                    ],
                                },
                                { type: 'static', value: '1' },
                            ],
                        },
                    },
                ],
            },
        ],
    }),
    UPDATE_METADATA_SETTINGS: {
        id: 'UPDATE_METADATA_SETTINGS',
        contract: contracts_1.CONTRACT.POSTER,
        method: 'post',
        args: [
            {
                type: 'JSONDetails',
                jsonSchema: {
                    daoId: '.daoId',
                    table: { type: 'static', value: 'daoProfile' },
                    queryType: { type: 'static', value: 'latest' },
                    name: '.formValues.name',
                    description: '.formValues.description',
                    longDescription: '.formValues.long_description',
                    avatarImg: '.formValues.icon',
                    tags: '.formValues.tags',
                    links: {
                        type: 'nestedArray',
                        args: [
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.discord',
                                    label: { type: 'static', value: 'Discord' },
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.github',
                                    label: { type: 'static', value: 'Github' },
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.blog',
                                    label: { type: 'static', value: 'Blog' },
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.telegram',
                                    label: { type: 'static', value: 'Telegram' },
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.twitter',
                                    label: { type: 'static', value: 'Twitter' },
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.web',
                                    label: { type: 'static', value: 'Web' },
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.custom1',
                                    label: '.formValues.custom1Label',
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.custom2',
                                    label: '.formValues.custom2Label',
                                },
                            },
                            {
                                type: 'JSONDetails',
                                jsonSchema: {
                                    url: '.formValues.custom3',
                                    label: '.formValues.custom3Label',
                                },
                            },
                        ],
                    },
                },
            },
            { type: 'static', value: utils_1.POSTER_TAGS.daoProfileUpdate },
        ],
    },
    UPDATE_GOV_SETTINGS: (0, tx_builder_1.buildMultiCallTX)({
        id: 'UPDATE_GOV_SETTINGS',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.UpdateGovSettings,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'setGovernanceConfig',
                args: [
                    {
                        type: 'argEncode',
                        args: [
                            '.formValues.votingPeriodInSeconds',
                            '.formValues.gracePeriodInSeconds',
                            '.formValues.newOffering',
                            '.formValues.quorum',
                            '.formValues.sponsorThreshold',
                            '.formValues.minRetention',
                        ],
                        solidityTypes: [
                            'uint32',
                            'uint32',
                            'uint256',
                            'uint256',
                            'uint256',
                            'uint256',
                        ],
                    },
                ],
            },
        ],
    }),
    TOKEN_SETTINGS: (0, tx_builder_1.buildMultiCallTX)({
        id: 'TOKEN_SETTINGS',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                vTokenTransferable: '.formValues.vStake',
                nvTokenTransferable: '.formValues.nvStake',
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.UpdateTokenSettings,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'setAdminConfig',
                args: ['.formValues.vStake', '.formValues.nvStake'],
            },
        ],
    }),
    TOKENS_FOR_SHARES: {
        id: 'TOKENS_FOR_SHARES',
        contract: contracts_1.CONTRACT.TRIBUTE_MINION,
        method: 'submitTributeProposal',
        args: [
            '.daoId',
            '.formValues.tokenAddress',
            '.formValues.tokenAmount',
            '.formValues.sharesRequested',
            '.formValues.lootRequested',
            {
                type: 'proposalExpiry',
                search: '.formValues.proposalExpiry',
                fallback: 0,
            },
            {
                type: 'static',
                value: '0',
            },
            {
                type: 'JSONDetails',
                jsonSchema: {
                    title: '.formValues.title',
                    description: '.formValues.description',
                    contentURI: `.formValues.link`,
                    contentURIType: { type: 'static', value: 'url' },
                    proposalType: {
                        type: 'static',
                        value: utils_3.ProposalTypeIds.TokensForShares,
                    },
                },
            },
        ],
    },
    GUILDKICK: (0, tx_builder_1.buildMultiCallTX)({
        id: 'GUILDKICK',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                link: '.formValues.link',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: utils_3.ProposalTypeIds.GuildKick },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'mintLoot',
                args: [
                    {
                        type: 'nestedArray',
                        args: ['.formValues.memberAddress'],
                    },
                    {
                        type: 'nestedArray',
                        args: ['.formValues.memberShares'],
                    },
                ],
            },
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'burnShares',
                args: [
                    {
                        type: 'nestedArray',
                        args: ['.formValues.memberAddress'],
                    },
                    {
                        type: 'nestedArray',
                        args: ['.formValues.memberShares'],
                    },
                ],
            },
        ],
    }),
    MANAGE_DELEGATE: {
        id: 'MANAGE_DELEGATE',
        contract: contracts_1.CONTRACT.SHARES_ERC20,
        method: 'delegate',
        args: ['.formValues.delegatingTo'],
    },
    RAGEQUIT: {
        id: 'RAGEQUIT',
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: 'ragequit',
        args: [
            '.formValues.to',
            '.formValues.sharesToBurn',
            '.formValues.lootToBurn',
            '.formValues.tokens',
        ],
    },
    WALLETCONNECT: (0, tx_builder_1.buildMultiCallTX)({
        id: 'WALLETCONNECT',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                link: '.formValues.link',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: utils_3.ProposalTypeIds.WalletConnect },
            },
        },
        actions: [
            {
                contract: {
                    type: 'static',
                    contractName: 'ACE',
                    abi: [],
                    targetAddress: '.formValues.txTo',
                },
                args: [],
                method: 'noMethod',
                value: '.formValues.txValue',
                data: '.formValues.txData',
                operations: '.formValues.txOperation',
            },
        ],
    }),
    ADD_SAFE: {
        id: 'ADD_SAFE',
        contract: contracts_1.CONTRACT.VAULT_SUMMONER,
        method: 'summonVault',
        args: ['.daoId', '.formValues.name'],
    },
    MULTICALL: (0, tx_builder_1.buildMultiCallTX)({
        id: 'MULTICALL',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                link: '.formValues.link',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: utils_3.ProposalTypeIds.Multicall },
            },
        },
        actions: [],
        formActions: true,
    }),
    MULTICALL_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: 'MULTICALL_SIDECAR',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                link: '.formValues.link',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: utils_3.ProposalTypeIds.Multicall },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'executeAsBaal',
                args: [
                    '.formValues.safeAddress',
                    { type: 'static', value: '0' },
                    {
                        type: 'encodeCall',
                        action: {
                            contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                            method: 'execTransactionFromModule',
                            args: [
                                {
                                    type: 'singleton',
                                    keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND,
                                },
                                { type: 'static', value: '0' },
                                {
                                    type: 'multicall',
                                    actions: [],
                                    formActions: true,
                                },
                                { type: 'static', value: '1' },
                            ],
                        },
                    },
                ],
            },
        ],
    }),
    ADD_SIGNER_TO_SIDECAR: (0, tx_builder_1.buildMultiCallTX)({
        id: 'ADD_SIGNER_TO_SIDECAR',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: {
                    type: 'static',
                    value: utils_3.ProposalTypeIds.AddSigner,
                },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.CURRENT_DAO,
                method: 'executeAsBaal',
                args: [
                    '.formValues.safeAddress',
                    { type: 'static', value: '0' },
                    {
                        type: 'encodeCall',
                        action: {
                            contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                            method: 'execTransactionFromModule',
                            args: [
                                {
                                    type: 'singleton',
                                    keychain: keychain_utils_1.CONTRACT_KEYCHAINS.GNOSIS_MULTISEND,
                                },
                                { type: 'static', value: '0' },
                                {
                                    type: 'multicall',
                                    actions: [
                                        {
                                            contract: contracts_1.CONTRACT.GNOSIS_MODULE,
                                            method: 'addOwnerWithThreshold',
                                            args: ['.formValues.signer', '.formValues.threshold'],
                                        },
                                    ],
                                },
                                { type: 'static', value: '1' },
                            ],
                        },
                    },
                ],
            },
        ],
    }),
};
exports.TABULA_TX = {
    CREATE_PUBLICATION: (0, tx_builder_1.buildMultiCallTX)({
        id: 'CREATE_PUBLICATION',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: 'Create Publication Proposal' },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.POSTER,
                method: 'post',
                args: [
                    {
                        type: 'JSONDetails',
                        jsonSchema: {
                            action: { type: 'static', value: utils_1.TABULA_TAGS.PUB_ACTION },
                            title: '.formValues.pubName',
                            tags: '.formValues.tags',
                            description: '.formValues.pubDescription',
                            image: '.formValues.pubImage',
                        },
                    },
                    { type: 'static', value: utils_1.TABULA_TAGS.PUBLICATION },
                ],
            },
        ],
    }),
    CREATE_ARTICLE: (0, tx_builder_1.buildMultiCallTX)({
        id: 'CREATE_ARTICLE',
        JSONDetails: {
            type: 'JSONDetails',
            jsonSchema: {
                title: '.formValues.title',
                description: '.formValues.description',
                contentURI: `.formValues.link`,
                contentURIType: { type: 'static', value: 'url' },
                proposalType: { type: 'static', value: 'Create Article Proposal' },
            },
        },
        actions: [
            {
                contract: contracts_1.CONTRACT.POSTER,
                method: 'post',
                args: [
                    {
                        type: 'JSONDetails',
                        jsonSchema: {
                            action: { type: 'static', value: utils_1.TABULA_TAGS.ARTICLE_ACTION },
                            publicationId: '.formValues.pubId',
                            article: { type: 'ipfsPinata', content: '.formValues.article' },
                            title: '.formValues.articleTitle',
                        },
                    },
                    { type: 'static', value: utils_1.TABULA_TAGS.PUBLICATION },
                ],
            },
        ],
    }),
};
exports.ACTION_TX = {
    SPONSOR: {
        id: 'SPONSOR',
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: 'sponsorProposal',
    },
    VOTE: {
        id: 'VOTE',
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: 'submitVote',
    },
    PROCESS: {
        id: 'PROCESS',
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: 'processProposal',
    },
    CANCEL: {
        id: 'CANCEL',
        contract: contracts_1.CONTRACT.CURRENT_DAO,
        method: 'cancelProposal',
    },
};
//# sourceMappingURL=tx.js.map