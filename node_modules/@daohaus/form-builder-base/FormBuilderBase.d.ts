import React, { ReactNode } from 'react';
import { ValidationMode, FieldValues } from 'react-hook-form';
import { ArbitraryState, LookupType } from '@daohaus/utils';
import { FormLego } from './utils/types';
type BaseContext = {
    form: FormLego;
    requiredFields: Record<string, boolean>;
    formDisabled: boolean;
    submitDisabled: boolean;
    isLoading: boolean;
    fieldObj: LookupType;
    fieldSpacing?: string;
    applyToEach?: ArbitraryState;
};
export declare const FormBaseContext: React.Context<BaseContext>;
type FormBaseProps = {
    form: FormLego;
    fieldObj: LookupType;
    defaultValues?: ArbitraryState;
    applyToEach?: ArbitraryState;
    formValidationMode?: keyof ValidationMode;
    formStatus?: string;
    isLoading?: boolean;
    formDisabled?: boolean;
    submitDisabled?: boolean;
    onSubmit?: (formValues: FieldValues) => any | Promise<any>;
    footer?: ReactNode;
    fieldSpacing?: string;
};
export declare const FormBuilderBase: ({ form, formDisabled, fieldObj, defaultValues, formValidationMode, submitDisabled, onSubmit, footer, fieldSpacing, isLoading, applyToEach, }: FormBaseProps) => JSX.Element;
export {};
