"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLengthOf = exports.isNumberString = exports.isArgType = exports.isObject = exports.isEthAddress = exports.isNumberish = exports.isBoolean = exports.isString = exports.isNumber = exports.isArray = void 0;
const viem_1 = require("viem");
// TS user-defined typeguards
const isArray = (item) => Array.isArray(item);
exports.isArray = isArray;
const isNumber = (item) => typeof item === 'number';
exports.isNumber = isNumber;
const isString = (item) => typeof item === 'string';
exports.isString = isString;
const isBoolean = (item) => typeof item === 'boolean';
exports.isBoolean = isBoolean;
const isNumberish = (item) => (0, exports.isNumber)(item) || (0, exports.isNumberString)(item);
exports.isNumberish = isNumberish;
const isEthAddress = (item) => (0, exports.isString)(item) && (0, viem_1.isAddress)(item);
exports.isEthAddress = isEthAddress;
// general 'is' guards that help us verify shapes of data
const isObject = (item) => {
    if (item instanceof Object)
        return true;
    try {
        if ((0, exports.isString)(item)) {
            JSON.parse(item);
            return true;
        }
        return false;
    }
    catch (error) {
        return false;
    }
};
exports.isObject = isObject;
const isArgType = (item) => {
    if ((0, exports.isArray)(item)) {
        return item.every(exports.isArgType);
    }
    return (0, exports.isString)(item) || (0, exports.isNumber)(item) || (0, exports.isBoolean)(item) || (0, exports.isObject)(item);
};
exports.isArgType = isArgType;
const isNumberString = (item) => (0, exports.isString)(item) && !isNaN(parseFloat(item)) && isFinite(Number(item));
exports.isNumberString = isNumberString;
const isLengthOf = (item, length) => (0, exports.isArray)(item) && item.length === length;
exports.isLengthOf = isLengthOf;
//# sourceMappingURL=typeguards.js.map