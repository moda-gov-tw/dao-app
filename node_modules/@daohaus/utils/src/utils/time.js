"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.baalTimeToNow = exports.formatPeriods = exports.calcExpiry = exports.unixTimeInSeconds = exports.toSeconds = exports.conversionFns = void 0;
const date_fns_1 = require("date-fns");
const typeguards_1 = require("./typeguards");
exports.conversionFns = {
    days: (amt) => (0, date_fns_1.hoursToSeconds)(amt * 24),
    hours: (amt) => (0, date_fns_1.hoursToSeconds)(amt),
    minutes: (amt) => (0, date_fns_1.minutesToSeconds)(amt),
    seconds: (amt) => amt,
};
const toSeconds = (amt, unit) => { var _a; return (_a = exports.conversionFns[unit]) === null || _a === void 0 ? void 0 : _a.call(exports.conversionFns, amt); };
exports.toSeconds = toSeconds;
const unixTimeInSeconds = () => {
    return Math.floor(Date.now() / 1000);
};
exports.unixTimeInSeconds = unixTimeInSeconds;
const calcExpiry = (duration) => {
    return duration > 0 ? (0, exports.unixTimeInSeconds)() + duration : 0;
};
exports.calcExpiry = calcExpiry;
const formatPeriods = (duration) => {
    if (duration) {
        let s = Number(duration);
        const d = Math.floor(s / (3600 * 24));
        s -= d * 3600 * 24;
        const h = Math.floor(s / 3600);
        s -= h * 3600;
        const m = Math.floor(s / 60);
        s -= m * 60;
        const tmp = [];
        d && tmp.push(`${d} 天${d > 1 ? '' : ''}`);
        (d || h) && h && tmp.push(`${h} 小時${h > 1 ? '' : ''}`);
        (d || h || m) && m && tmp.push(`${m} 分鐘${m > 1 ? '' : ''}`);
        s && tmp.push(`${s} 秒${s > 1 ? '' : ''}`);
        return tmp.join(' ');
    }
    return 0;
};
exports.formatPeriods = formatPeriods;
const baalTimeToNow = (time) => {
    if (!(0, typeguards_1.isNumberish)(time)) {
        console.warn('baalTimeToNow: time is not a number or numberish string', time);
        return;
    }
    return (0, date_fns_1.formatDistanceToNowStrict)(new Date(Number(time) * 1000));
};
exports.baalTimeToNow = baalTimeToNow;
//# sourceMappingURL=time.js.map