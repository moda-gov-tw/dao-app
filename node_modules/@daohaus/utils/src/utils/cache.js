"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getlocalForage = exports.CacheStoreName = exports.CACHE_CONFIG = void 0;
const tslib_1 = require("tslib");
const localforage = tslib_1.__importStar(require("localforage"));
exports.CACHE_CONFIG = {
    // driver: localforage.WEBSQL, // Force WebSQL; same as using setDriver()
    name: 'DAOhaus',
    version: 3.0,
    storeName: 'Universal DH Cache',
    description: 'Store for DH apps. Used for caching ABIs, member Profiles, and other data.',
};
var CacheStoreName;
(function (CacheStoreName) {
    CacheStoreName["ABI"] = "ABI";
    CacheStoreName["MEMBERS_PROFILE"] = "MEMBERS_PROFILE";
})(CacheStoreName = exports.CacheStoreName || (exports.CacheStoreName = {}));
const getlocalForage = (storeName) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const store = yield localforage.getItem(storeName);
        return store;
    }
    catch (error) {
        console.error(error);
    }
});
exports.getlocalForage = getlocalForage;
//# sourceMappingURL=cache.js.map