"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchFeeData = exports.getUnit = exports.getProcessingGasLimit = exports.getGasCostEstimate = void 0;
const tslib_1 = require("tslib");
const viem_1 = require("viem");
const viem_2 = require("./viem");
const constants_1 = require("../constants");
// OPTIMISM challenge - how to display this estimated gas fee like we do on other networks.
// ethers.js getFeeData returns maxFeePerGas as undefined,  might need to use gasPrice some how, then fetch the L1 amount
// https://community.optimism.io/docs/developers/build/transaction-fees/#displaying-fees-to-users
const getGasCostEstimate = (gasLimit, chainId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const feeDataNew = yield fetchFeeData({ chainId: chainId });
    return (Number((0, exports.getProcessingGasLimit)(gasLimit, chainId)) *
        Number(feeDataNew.maxFeePerGas || 0));
});
exports.getGasCostEstimate = getGasCostEstimate;
const getProcessingGasLimit = (actionGasEstimate, chainId) => {
    if (chainId === '0xa4b1' || chainId === '0xa') {
        return BigInt(Number(actionGasEstimate) > 0
            ? Number(actionGasEstimate) +
                constants_1.PROCESS_PROPOSAL_GAS_LIMIT_ADDITION +
                constants_1.L2_ADDITIONAL_GAS
            : constants_1.PROCESS_PROPOSAL_GAS_LIMIT_ADDITION * constants_1.GAS_BUFFER_MULTIPLIER +
                constants_1.L2_ADDITIONAL_GAS);
    }
    return BigInt(Number(actionGasEstimate) > 0
        ? Number(actionGasEstimate) + constants_1.PROCESS_PROPOSAL_GAS_LIMIT_ADDITION
        : constants_1.PROCESS_PROPOSAL_GAS_LIMIT_ADDITION * constants_1.GAS_BUFFER_MULTIPLIER);
};
exports.getProcessingGasLimit = getProcessingGasLimit;
function getUnit(unit) {
    if (typeof unit === 'number')
        return unit;
    if (unit === 'wei')
        return 0;
    return Math.abs(viem_1.weiUnits[unit]);
}
exports.getUnit = getUnit;
function fetchFeeData({ chainId, formatUnits: units = 'gwei', }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const client = (0, viem_2.createViemClient)({ chainId });
        const block = yield client.getBlock();
        let gasPrice = null;
        try {
            gasPrice = yield client.getGasPrice();
        }
        catch (e) {
            console.error(`Failed to get gas price: ${e}`);
        }
        let lastBaseFeePerGas = null;
        let maxFeePerGas = null;
        let maxPriorityFeePerGas = null;
        if (block === null || block === void 0 ? void 0 : block.baseFeePerGas) {
            lastBaseFeePerGas = block.baseFeePerGas;
            maxPriorityFeePerGas = (0, viem_1.parseGwei)('1');
            maxFeePerGas = block.baseFeePerGas * BigInt(2) + maxPriorityFeePerGas;
        }
        const unit = getUnit(units);
        const formatted = {
            gasPrice: gasPrice ? (0, viem_1.formatUnits)(gasPrice, unit) : null,
            maxFeePerGas: maxFeePerGas ? (0, viem_1.formatUnits)(maxFeePerGas, unit) : null,
            maxPriorityFeePerGas: maxPriorityFeePerGas
                ? (0, viem_1.formatUnits)(maxPriorityFeePerGas, unit)
                : null,
        };
        return {
            lastBaseFeePerGas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            formatted,
        };
    });
}
exports.fetchFeeData = fetchFeeData;
//# sourceMappingURL=gas.js.map