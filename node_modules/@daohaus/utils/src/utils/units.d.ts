export declare const toBaseUnits: (amount: string, decimals?: number) => string;
export declare const toWholeUnits: (amount: string, decimals?: number) => string;
type NumericalFormat = 'currency' | 'currencyShort' | 'number' | 'numberShort' | 'percent' | 'percentShort' | 'exponential';
interface ReadableNumberParams {
    value: number | string;
    unit?: string;
    decimals?: number;
    separator?: string;
    format?: NumericalFormat | string;
}
export declare const formatValueTo: ({ value, unit, decimals, separator, format, }: ReadableNumberParams) => string;
export declare const formatShares: (baseAmt: string | number) => string | undefined;
export declare const percentage: (value: number, total: number) => number;
export declare const roundedPercentage: (value: number, total: number) => number;
export declare const checkHasQuorum: ({ yesVotes, totalShares, quorumPercent, }: {
    yesVotes: number;
    totalShares: number;
    quorumPercent: number;
}) => boolean;
export declare const dynamicDecimals: ({ baseUnits, tokenDecimals, extraZeros, }: {
    baseUnits: number;
    tokenDecimals?: number | undefined;
    extraZeros?: number | undefined;
}) => number;
interface ReadableNumbersInterface {
    toCurrency: (args: Exclude<ReadableNumberParams, 'format'>) => string;
    toCurrencyShort: (args: Exclude<ReadableNumberParams, 'format'>) => string;
    toDollars: (args: Exclude<ReadableNumberParams, 'format' | 'decimals'>) => string;
    toNumber: (args: Exclude<ReadableNumberParams, 'format'>) => string;
    toNumberShort: (args: Exclude<ReadableNumberParams, 'format'>) => string;
    toPercent: (args: Exclude<ReadableNumberParams, 'format'>) => string;
    toPercentDecimals: (args: Exclude<ReadableNumberParams, 'format'>) => string;
    toExponential: (args: Exclude<ReadableNumberParams, 'format'>) => string;
    toCustomFormat: (args: ReadableNumberParams) => string;
}
export declare const readableNumbers: ReadableNumbersInterface;
export {};
