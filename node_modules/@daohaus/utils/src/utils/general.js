"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lowerCaseLootToken = exports.sharesDelegatedToMember = exports.memberUsdValueShare = exports.memberTokenBalanceShare = exports.nowInSeconds = exports.votingPowerPercentage = exports.ZERO_ADDRESS = void 0;
const viem_1 = require("viem");
exports.ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
const votingPowerPercentage = (daoTotalShares, memberShares) => {
    if (Number(daoTotalShares) === 0)
        return 0;
    const perc = (Number((0, viem_1.formatEther)(BigInt(memberShares))) /
        Number((0, viem_1.formatEther)(BigInt(daoTotalShares)))) *
        100;
    return Math.round(perc * 100) / 100;
};
exports.votingPowerPercentage = votingPowerPercentage;
const nowInSeconds = () => new Date().getTime() / 1000;
exports.nowInSeconds = nowInSeconds;
const memberTokenBalanceShare = (tokenBalance, daoTotalShares, daoTotalLoot, memberShares, memberLoot, decimals = 18) => {
    const daoSharesAndLoot = Number((0, viem_1.formatEther)(BigInt(daoTotalShares))) +
        Number((0, viem_1.formatEther)(BigInt(daoTotalLoot)));
    const sharesAndLoot = Number((0, viem_1.formatEther)(BigInt(memberShares))) +
        Number((0, viem_1.formatEther)(BigInt(memberLoot)));
    const ratio = sharesAndLoot / daoSharesAndLoot;
    const memberSharesWei = Number(tokenBalance) * ratio;
    return memberSharesWei / Math.pow(10, Number(decimals));
};
exports.memberTokenBalanceShare = memberTokenBalanceShare;
const memberUsdValueShare = (usdValue, daoTotalShares, daoTotalLoot, memberShares, memberLoot) => {
    const daoSharesAndLoot = Number((0, viem_1.formatEther)(BigInt(daoTotalShares))) +
        Number((0, viem_1.formatEther)(BigInt(daoTotalLoot)));
    if (daoSharesAndLoot === 0)
        return 0;
    const sharesAndLoot = Number((0, viem_1.formatEther)(BigInt(memberShares))) +
        Number((0, viem_1.formatEther)(BigInt(memberLoot)));
    const ratio = sharesAndLoot / daoSharesAndLoot;
    return Number(usdValue) * ratio;
};
exports.memberUsdValueShare = memberUsdValueShare;
const sharesDelegatedToMember = (delegateShares, memberShares) => {
    const val = Number(delegateShares) - Number(memberShares);
    if (!Number.isSafeInteger(val))
        return BigInt(val).toString();
    return val.toString();
};
exports.sharesDelegatedToMember = sharesDelegatedToMember;
const lowerCaseLootToken = (tokenName) => {
    if (!tokenName)
        return '';
    return tokenName.replace('LOOT', 'Loot');
};
exports.lowerCaseLootToken = lowerCaseLootToken;
//# sourceMappingURL=general.js.map