"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.L2_ADDITIONAL_GAS = exports.ACTION_GAS_LIMIT_ADDITION = exports.PROCESS_PROPOSAL_GAS_LIMIT_ADDITION = exports.GAS_BUFFER_MULTIPLIER = exports.PROPOSAL_FILTERS = exports.PROP_CARD_HELP = exports.DAO_METHOD_TO_PROPOSAL_TYPE = exports.SENSITIVE_PROPOSAL_TYPES = exports.PROPOSAL_TYPE_WARNINGS = exports.PROPOSAL_TYPE_LABELS = exports.ENCODED_0X0_DATA = exports.PROPOSAL_STATUS = exports.ProposalTypeIds = void 0;
var ProposalTypeIds;
(function (ProposalTypeIds) {
    ProposalTypeIds["Signal"] = "SIGNAL";
    ProposalTypeIds["IssueSharesLoot"] = "ISSUE";
    ProposalTypeIds["AddShaman"] = "ADD_SHAMAN";
    ProposalTypeIds["TransferErc20"] = "TRANSFER_ERC20";
    ProposalTypeIds["TransferNetworkToken"] = "TRANSFER_NETWORK_TOKEN";
    ProposalTypeIds["UpdateGovSettings"] = "UPDATE_GOV_SETTINGS";
    ProposalTypeIds["UpdateTokenSettings"] = "TOKEN_SETTINGS";
    ProposalTypeIds["TokensForShares"] = "TOKENS_FOR_SHARES";
    ProposalTypeIds["GuildKick"] = "GUILDKICK";
    ProposalTypeIds["WalletConnect"] = "WALLETCONNECT";
    ProposalTypeIds["Multicall"] = "MULTICALL";
    ProposalTypeIds["AddSigner"] = "ADD_SIGNER";
})(ProposalTypeIds = exports.ProposalTypeIds || (exports.ProposalTypeIds = {}));
exports.PROPOSAL_STATUS = {
    unsponsored: 'Unsponsored',
    voting: 'Voting',
    grace: 'Grace',
    expired: 'Expired',
    cancelled: 'Cancelled',
    needsProcessing: 'Ready for Execution',
    failed: 'Failed',
    passed: 'Passed',
    actionFailed: 'Execution Failed',
    unknown: 'Unknown',
};
exports.ENCODED_0X0_DATA = '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
exports.PROPOSAL_TYPE_LABELS = {
    SIGNAL: '信號提案',
    ISSUE: '代幣提案',
    ADD_SHAMAN: 'Shaman Proposal',
    TRANSFER_ERC20: '資金提案',
    TRANSFER_NETWORK_TOKEN: '資金提案',
    UPDATE_GOV_SETTINGS: 'Governance Proposal',
    TOKEN_SETTINGS: '代幣提案',
    TOKENS_FOR_SHARES: '代幣提案',
    GUILDKICK: '代幣提案',
    WALLETCONNECT: 'WalletConnect Proposal',
    MULTICALL: 'Multicall Proposal',
    ADD_SIGNER: 'Add Safe Signer Proposal',
};
exports.PROPOSAL_TYPE_WARNINGS = {
    SIGNAL: 'Proposal for DAO voting signal. No transactions are executed.',
    ISSUE: 'Proposal issues voting or non-voting tokens from the DAO.',
    TRANSFER_ERC20: 'Proposal transfers ERC-20 tokens from a DAO safe.',
    TRANSFER_NETWORK_TOKEN: 'Proposal transfers native tokens from a DAO safe.',
    ADD_SHAMAN: 'Proposal grants DAO permissions to an external contract.',
    UPDATE_GOV_SETTINGS: 'Proposal updates DAO proposal timing or advanced governance settings.',
    TOKEN_SETTINGS: 'Proposal updates DAO voting or non-voting token transferability settings.',
    TOKENS_FOR_SHARES: 'Proposal issues voting or non-voting tokens from the DAO.',
    GUILDKICK: 'Proposal transfers DAO voting tokens into non-voting tokens.',
    WALLETCONNECT: 'Proposal interacts with external contracts and applications.',
    ADD_SIGNER: 'Proposal adds a signer to one of the DAO non-ragequittable safes',
    MULTICALL: 'Proposal bundles a multiple actions to be executed in batch',
    ERROR_CANNOT_DECODE: 'Cannot decode contract details for this proposal. Please proceed with extreme caution!',
    ERROR_UNKOWN: 'Cannot verify contract details for this proposal. Please proceed with extreme caution!',
};
exports.SENSITIVE_PROPOSAL_TYPES = {
    ADD_SHAMAN: true,
};
exports.DAO_METHOD_TO_PROPOSAL_TYPE = {
    setShamans: ProposalTypeIds.AddShaman,
};
exports.PROP_CARD_HELP = {
    UNSPONSORED: 'A member of the DAO can sponsor this proposal.',
};
exports.PROPOSAL_FILTERS = {
    voting: '投票中',
    needsProcessing: '等待執行',
    passed: '已通過',
};
// Processing gas estimate buffer
exports.GAS_BUFFER_MULTIPLIER = 2;
// Adding to the gas limit to account for cost of processProposal
exports.PROCESS_PROPOSAL_GAS_LIMIT_ADDITION = 150000;
// Adding to the gas limit to account for cost of each action
exports.ACTION_GAS_LIMIT_ADDITION = 150000;
exports.L2_ADDITIONAL_GAS = 5000000;
//# sourceMappingURL=proposals.js.map