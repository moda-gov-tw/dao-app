import type { BigIntish, BytesLike } from '@daohaus/utils';
import { ValidNetwork } from '@daohaus/keychain-utils';
import WalletConnect from '@walletconnect/client';
import { IClientMeta } from '@walletconnect/legacy-types';
type EIP712TypedData = {
    domain: {
        name?: string;
        version?: string;
        chainId?: BigIntish;
        verifyingContract?: string;
        salt?: BytesLike;
    };
    types: {
        [key: string]: {
            name: string;
            type: string;
        }[];
    };
    message: Record<string, unknown>;
};
export declare enum WalletConnectVersion {
    NONE = 0,
    V1 = 1,
    V2 = 2
}
export declare const getWalletConnectVersion: (uri: string) => WalletConnectVersion;
export declare const isObjectEIP712TypedData: (obj?: unknown) => obj is EIP712TypedData;
export declare const encodeSafeSignMessage: (chainId: ValidNetwork, message: string | EIP712TypedData) => {
    to: string;
    data: string;
    value: string;
    operation: string;
} | undefined;
export type WCParams = {
    chainId: ValidNetwork;
    safeAddress: string;
    session?: WalletConnect;
    uri: string;
};
export type Tx = {
    data: string;
    from?: string;
    gas?: string;
    to: string;
    value: string;
    operation?: string;
};
export type WCPayload = {
    id: number;
    jsonrpc: string;
    method: string;
    params: Array<Tx>;
};
export declare const useWalletConnect: () => {
    wcConnector?: WalletConnect | undefined;
    wcClientData?: IClientMeta | undefined;
    txPayload?: WCPayload | undefined;
    txError?: string | undefined;
    wcConnect: (params: WCParams) => Promise<void>;
    wcDisconnect: (session: WalletConnect) => Promise<void>;
};
export {};
