/// <reference types="react" />
import { FieldLegoBase, FormLegoBase } from '@daohaus/utils';
export declare const MolochFields: {
    proposalExpiry: ({ id, defaultValue, rules, ...props }: {
        placeholder?: string | undefined;
        disabledPlaceholder?: boolean | undefined;
        defaultValue?: string | undefined;
        icon?: import("react-icons").IconType | undefined;
        number?: boolean | undefined;
        address?: boolean | undefined;
        long?: boolean | undefined;
        full?: boolean | undefined;
        value?: string | undefined;
    } & import("@daohaus/ui").PrimitiveElement & {
        defaultValue?: string | undefined;
        label: string;
    } & import("@daohaus/ui").PrimitiveWrapper & import("@daohaus/ui").PrimitiveSizable & import("@daohaus/ui").PrimitiveAddons & import("@daohaus/ui").HasRules) => JSX.Element;
    selectApplicant: ({ daoMemberOnly, ...props }: {
        placeholder?: string | undefined;
        disabledPlaceholder?: boolean | undefined;
        defaultValue?: string | undefined;
        icon?: import("react-icons").IconType | undefined;
        number?: boolean | undefined;
        address?: boolean | undefined;
        long?: boolean | undefined;
        full?: boolean | undefined;
        value?: string | undefined;
    } & import("@daohaus/ui").PrimitiveElement & {
        daoMemberOnly?: boolean | undefined;
    } & import("@daohaus/ui").PrimitiveWrapper & import("@daohaus/ui").PrimitiveSizable & import("@daohaus/ui").PrimitiveAddons & import("@daohaus/ui").HasRules) => JSX.Element;
    tributeInput: (props: import("@daohaus/ui").Buildable<{
        addressId?: string | undefined;
        amtId?: string | undefined;
    }>) => JSX.Element;
    requestNativeToken: (props: import("@daohaus/ui").Buildable<{
        amtId?: string | undefined;
        addressId?: string | undefined;
        safeAddressId?: string | undefined;
    }>) => JSX.Element;
    requestERC20: (props: import("@daohaus/ui").Buildable<{
        amtId?: string | undefined;
        addressId?: string | undefined;
        safeAddressId?: string | undefined;
    }>) => JSX.Element;
    shamanPermissionDeluxe: (props: import("@daohaus/ui").Buildable<Omit<import("@daohaus/ui").SelectProps, "options"> & import("@daohaus/ui").PrimitiveWrapper & import("@daohaus/ui").PrimitiveElement & import("@daohaus/ui").PrimitiveSizable & import("@daohaus/ui").PrimitiveAddons & import("@daohaus/ui").HasRules & {
        watchAddressField?: string | undefined;
    }>) => JSX.Element;
    tagsInput: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    proposalOffering: (props: import("@daohaus/ui").Buildable<{
        id?: string | undefined;
    }>) => JSX.Element | null;
    delegateInput: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    ragequitToken: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element | null;
    ragequitTokenList: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element | null;
    walletConnectLink: ({ icon, id, rules, ...props }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    metadataLink: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    safeSelect: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element | null;
    multisendActions: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    addressesAndAmounts: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    epochDatePicker: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    markdownField: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    input: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    inputSelect: ({ id, selectId, rules, options, disabled, long, full, error, warning, placeholder, selectPlaceholder, defaultValue, selectDefault, helperText, label, loading, info, success, hidden, address, rightAddon, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").InputSelectProps>) => JSX.Element;
    highlightInputText: ({ color, description, highlightColor, highlightInputId, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").HighlightInputTextProps>) => JSX.Element;
    textarea: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    switch: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Switchable>) => JSX.Element;
    radio: (props: import("@daohaus/ui").Buildable<{
        defaultValue?: string | undefined;
        radioGroup: import("dist/libs/ui/components/atoms/Radio/Radio.types").RadioItemGroupProps;
    }>) => JSX.Element;
    select: ({ id, rules, helperText, address, long, full, success, warning, error, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, options, containerClassName, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").SelectProps>) => JSX.Element;
    checkBox: (props: import("@daohaus/ui").Buildable<{
        checkboxes: import("@radix-ui/react-checkbox").CheckboxProps[];
    }>) => JSX.Element;
    csInput: (props: {
        placeholder?: string | undefined;
        disabledPlaceholder?: boolean | undefined;
        defaultValue?: string | undefined;
        icon?: import("react-icons").IconType | undefined;
        number?: boolean | undefined;
        address?: boolean | undefined;
        long?: boolean | undefined;
        full?: boolean | undefined;
        value?: string | undefined;
    } & import("@daohaus/ui").PrimitiveElement & import("@daohaus/ui").PrimitiveWrapper & import("@daohaus/ui").PrimitiveSizable & import("@daohaus/ui").PrimitiveAddons & import("@daohaus/ui").HasRules & {
        itemNoun: import("@daohaus/utils").Noun;
    }) => JSX.Element;
    checkRender: ({ gateLabel, ...props }: import("@daohaus/ui").Buildable<{
        gateLabel: string;
        onUnchecked?: (() => void) | undefined;
        label?: string | undefined;
        helperText?: string | undefined;
        info?: string | undefined;
        id: string;
        warning?: import("@daohaus/ui").WarningMessage | undefined;
        error?: import("@daohaus/ui").ErrorMessage | undefined;
        success?: import("@daohaus/ui").SuccessMessage | undefined;
        className?: string | undefined;
        disabled?: boolean | undefined;
        hidden?: boolean | undefined;
        loading?: boolean | undefined;
        long?: boolean | undefined;
        address?: boolean | undefined;
        full?: boolean | undefined;
        rightAddon?: import("react").ReactNode;
        rules?: import("react-hook-form").RegisterOptions<import("react-hook-form").FieldValues, string> | undefined;
        components: any[];
    }>) => JSX.Element;
    formSegment: (props: {
        fields: any[];
        label?: string | undefined;
        helperText?: string | undefined;
        info?: string | undefined;
        id: string;
        warning?: import("@daohaus/ui").WarningMessage | undefined;
        error?: import("@daohaus/ui").ErrorMessage | undefined;
        success?: import("@daohaus/ui").SuccessMessage | undefined;
        className?: string | undefined;
        disabled?: boolean | undefined;
        hidden?: boolean | undefined;
        loading?: boolean | undefined;
        long?: boolean | undefined;
        address?: boolean | undefined;
        full?: boolean | undefined;
        rightAddon?: import("react").ReactNode;
        rules?: import("react-hook-form").RegisterOptions<import("react-hook-form").FieldValues, string> | undefined;
        title?: import("react").ReactNode;
        description?: import("react").ReactNode;
        collapsible?: boolean | undefined;
        defaultOpen?: boolean | undefined;
        showDivider?: boolean | undefined;
    }) => JSX.Element;
    splitColumn: ({ rows, ...props }: import("@daohaus/ui").Buildable<{
        id: string;
        rows: {
            rowId: string;
            left: import("@daohaus/form-builder").FieldLego<{
                input: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                inputSelect: ({ id, selectId, rules, options, disabled, long, full, error, warning, placeholder, selectPlaceholder, defaultValue, selectDefault, helperText, label, loading, info, success, hidden, address, rightAddon, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").InputSelectProps>) => JSX.Element;
                highlightInputText: ({ color, description, highlightColor, highlightInputId, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").HighlightInputTextProps>) => JSX.Element;
                textarea: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                switch: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Switchable>) => JSX.Element;
                radio: (props: import("@daohaus/ui").Buildable<{
                    defaultValue?: string | undefined;
                    radioGroup: import("dist/libs/ui/components/atoms/Radio/Radio.types").RadioItemGroupProps;
                }>) => JSX.Element;
                select: ({ id, rules, helperText, address, long, full, success, warning, error, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, options, containerClassName, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").SelectProps>) => JSX.Element;
                checkBox: (props: import("@daohaus/ui").Buildable<{
                    checkboxes: import("@radix-ui/react-checkbox").CheckboxProps[];
                }>) => JSX.Element;
                csInput: (props: {
                    placeholder?: string | undefined;
                    disabledPlaceholder?: boolean | undefined;
                    defaultValue?: string | undefined;
                    icon?: import("react-icons").IconType | undefined;
                    number?: boolean | undefined;
                    address?: boolean | undefined;
                    long?: boolean | undefined;
                    full?: boolean | undefined;
                    value?: string | undefined;
                } & import("@daohaus/ui").PrimitiveElement & import("@daohaus/ui").PrimitiveWrapper & import("@daohaus/ui").PrimitiveSizable & import("@daohaus/ui").PrimitiveAddons & import("@daohaus/ui").HasRules & {
                    itemNoun: import("@daohaus/utils").Noun;
                }) => JSX.Element;
                tributeInput: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                checkRender: ({ gateLabel, ...props }: import("@daohaus/ui").Buildable<{
                    gateLabel: string;
                    onUnchecked?: (() => void) | undefined;
                    label?: string | undefined;
                    helperText?: string | undefined;
                    info?: string | undefined;
                    id: string;
                    warning?: import("@daohaus/ui").WarningMessage | undefined;
                    error?: import("@daohaus/ui").ErrorMessage | undefined;
                    success?: import("@daohaus/ui").SuccessMessage | undefined;
                    className?: string | undefined;
                    disabled?: boolean | undefined;
                    hidden?: boolean | undefined;
                    loading?: boolean | undefined;
                    long?: boolean | undefined;
                    address?: boolean | undefined;
                    full?: boolean | undefined;
                    rightAddon?: import("react").ReactNode;
                    rules?: import("react-hook-form").RegisterOptions<import("react-hook-form").FieldValues, string> | undefined;
                    components: any[];
                }>) => JSX.Element;
                formSegment: (props: {
                    fields: any[];
                    label?: string | undefined;
                    helperText?: string | undefined;
                    info?: string | undefined;
                    id: string;
                    warning?: import("@daohaus/ui").WarningMessage | undefined;
                    error?: import("@daohaus/ui").ErrorMessage | undefined;
                    success?: import("@daohaus/ui").SuccessMessage | undefined;
                    className?: string | undefined;
                    disabled?: boolean | undefined;
                    hidden?: boolean | undefined;
                    loading?: boolean | undefined;
                    long?: boolean | undefined;
                    address?: boolean | undefined;
                    full?: boolean | undefined;
                    rightAddon?: import("react").ReactNode;
                    rules?: import("react-hook-form").RegisterOptions<import("react-hook-form").FieldValues, string> | undefined;
                    title?: import("react").ReactNode;
                    description?: import("react").ReactNode;
                    collapsible?: boolean | undefined;
                    defaultOpen?: boolean | undefined;
                    showDivider?: boolean | undefined;
                }) => JSX.Element;
                splitColumn: any;
                shamanPermissions: (props: import("@daohaus/ui").Buildable<Omit<import("@daohaus/ui").SelectProps, "options">>) => JSX.Element;
                timePicker: ({ id, options, selectId, rules, ...props }: import("@daohaus/ui").Buildable<import("@daohaus/ui").TimePickerProps>) => JSX.Element;
                toWeiInput: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                tupleObject: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
            }>;
            right: import("@daohaus/form-builder").FieldLego<{
                input: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                inputSelect: ({ id, selectId, rules, options, disabled, long, full, error, warning, placeholder, selectPlaceholder, defaultValue, selectDefault, helperText, label, loading, info, success, hidden, address, rightAddon, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").InputSelectProps>) => JSX.Element;
                highlightInputText: ({ color, description, highlightColor, highlightInputId, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").HighlightInputTextProps>) => JSX.Element;
                textarea: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                switch: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Switchable>) => JSX.Element;
                radio: (props: import("@daohaus/ui").Buildable<{
                    defaultValue?: string | undefined;
                    radioGroup: import("dist/libs/ui/components/atoms/Radio/Radio.types").RadioItemGroupProps;
                }>) => JSX.Element;
                select: ({ id, rules, helperText, address, long, full, success, warning, error, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, options, containerClassName, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").SelectProps>) => JSX.Element;
                checkBox: (props: import("@daohaus/ui").Buildable<{
                    checkboxes: import("@radix-ui/react-checkbox").CheckboxProps[];
                }>) => JSX.Element;
                csInput: (props: {
                    placeholder?: string | undefined;
                    disabledPlaceholder?: boolean | undefined;
                    defaultValue?: string | undefined;
                    icon?: import("react-icons").IconType | undefined;
                    number?: boolean | undefined;
                    address?: boolean | undefined;
                    long?: boolean | undefined;
                    full?: boolean | undefined;
                    value?: string | undefined;
                } & import("@daohaus/ui").PrimitiveElement & import("@daohaus/ui").PrimitiveWrapper & import("@daohaus/ui").PrimitiveSizable & import("@daohaus/ui").PrimitiveAddons & import("@daohaus/ui").HasRules & {
                    itemNoun: import("@daohaus/utils").Noun;
                }) => JSX.Element;
                tributeInput: ({ id, rules, helperText, long, full, icon, success, warning, error, number, address, className, placeholder, defaultValue, value, disabled, hidden, rightAddon, label, loading, info, }: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                checkRender: ({ gateLabel, ...props }: import("@daohaus/ui").Buildable<{
                    gateLabel: string;
                    onUnchecked?: (() => void) | undefined;
                    label?: string | undefined;
                    helperText?: string | undefined;
                    info?: string | undefined;
                    id: string;
                    warning?: import("@daohaus/ui").WarningMessage | undefined;
                    error?: import("@daohaus/ui").ErrorMessage | undefined;
                    success?: import("@daohaus/ui").SuccessMessage | undefined;
                    className?: string | undefined;
                    disabled?: boolean | undefined;
                    hidden?: boolean | undefined;
                    loading?: boolean | undefined;
                    long?: boolean | undefined;
                    address?: boolean | undefined;
                    full?: boolean | undefined;
                    rightAddon?: import("react").ReactNode;
                    rules?: import("react-hook-form").RegisterOptions<import("react-hook-form").FieldValues, string> | undefined;
                    components: any[];
                }>) => JSX.Element;
                formSegment: (props: {
                    fields: any[];
                    label?: string | undefined;
                    helperText?: string | undefined;
                    info?: string | undefined;
                    id: string;
                    warning?: import("@daohaus/ui").WarningMessage | undefined;
                    error?: import("@daohaus/ui").ErrorMessage | undefined;
                    success?: import("@daohaus/ui").SuccessMessage | undefined;
                    className?: string | undefined;
                    disabled?: boolean | undefined;
                    hidden?: boolean | undefined;
                    loading?: boolean | undefined;
                    long?: boolean | undefined;
                    address?: boolean | undefined;
                    full?: boolean | undefined;
                    rightAddon?: import("react").ReactNode;
                    rules?: import("react-hook-form").RegisterOptions<import("react-hook-form").FieldValues, string> | undefined;
                    title?: import("react").ReactNode;
                    description?: import("react").ReactNode;
                    collapsible?: boolean | undefined;
                    defaultOpen?: boolean | undefined;
                    showDivider?: boolean | undefined;
                }) => JSX.Element;
                splitColumn: any;
                shamanPermissions: (props: import("@daohaus/ui").Buildable<Omit<import("@daohaus/ui").SelectProps, "options">>) => JSX.Element;
                timePicker: ({ id, options, selectId, rules, ...props }: import("@daohaus/ui").Buildable<import("@daohaus/ui").TimePickerProps>) => JSX.Element;
                toWeiInput: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
                tupleObject: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
            }>;
        }[];
    }>) => JSX.Element;
    shamanPermissions: (props: import("@daohaus/ui").Buildable<Omit<import("@daohaus/ui").SelectProps, "options">>) => JSX.Element;
    timePicker: ({ id, options, selectId, rules, ...props }: import("@daohaus/ui").Buildable<import("@daohaus/ui").TimePickerProps>) => JSX.Element;
    toWeiInput: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
    tupleObject: (props: import("@daohaus/ui").Buildable<import("@daohaus/ui").Field>) => JSX.Element;
};
export type MolochFieldLego = FieldLegoBase<typeof MolochFields>;
export type MolochFormLego = FormLegoBase<typeof MolochFields>;
