import { Ordering, Paging } from '@daohaus/data-fetch-utils';
import { Keychain, ValidNetwork } from '@daohaus/keychain-utils';
import { MolochV3Proposal, Proposal_Filter, Proposal_OrderBy } from '@daohaus/moloch-v3-data';
type DaoProposalsProps = {
    daoId: string;
    daoChain: ValidNetwork;
    graphApiKeys?: Keychain;
    filter?: Proposal_Filter;
    ordering?: Ordering<Proposal_OrderBy>;
    paging?: Paging;
};
export declare const useDaoProposals: (props?: DaoProposalsProps) => {
    isError: false;
    isIdle: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "idle";
    fetchNextPage: (options?: import("react-query").FetchNextPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    fetchPreviousPage: (options?: import("react-query").FetchPreviousPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    hasNextPage?: boolean | undefined;
    hasPreviousPage?: boolean | undefined;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined>, unknown>>;
    remove: () => void;
    proposals: MolochV3Proposal[];
    error: unknown;
    filter: Proposal_Filter;
    filterProposals: (filter: Proposal_Filter) => void;
    data: import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined> | undefined;
    ordering: Ordering<Proposal_OrderBy>;
    orderProposals: (ordering: Ordering<Proposal_OrderBy>) => void;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: import("react-query").FetchNextPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    fetchPreviousPage: (options?: import("react-query").FetchPreviousPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    hasNextPage?: boolean | undefined;
    hasPreviousPage?: boolean | undefined;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined>, unknown>>;
    remove: () => void;
    proposals: MolochV3Proposal[];
    error: unknown;
    filter: Proposal_Filter;
    filterProposals: (filter: Proposal_Filter) => void;
    data: import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined> | undefined;
    ordering: Ordering<Proposal_OrderBy>;
    orderProposals: (ordering: Ordering<Proposal_OrderBy>) => void;
} | {
    isError: false;
    isIdle: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    fetchNextPage: (options?: import("react-query").FetchNextPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    fetchPreviousPage: (options?: import("react-query").FetchPreviousPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    hasNextPage?: boolean | undefined;
    hasPreviousPage?: boolean | undefined;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined>, unknown>>;
    remove: () => void;
    proposals: MolochV3Proposal[];
    error: unknown;
    filter: Proposal_Filter;
    filterProposals: (filter: Proposal_Filter) => void;
    data: import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined> | undefined;
    ordering: Ordering<Proposal_OrderBy>;
    orderProposals: (ordering: Ordering<Proposal_OrderBy>) => void;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: import("react-query").FetchNextPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    fetchPreviousPage: (options?: import("react-query").FetchPreviousPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    hasNextPage?: boolean | undefined;
    hasPreviousPage?: boolean | undefined;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined>, unknown>>;
    remove: () => void;
    proposals: MolochV3Proposal[];
    error: unknown;
    filter: Proposal_Filter;
    filterProposals: (filter: Proposal_Filter) => void;
    data: import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined> | undefined;
    ordering: Ordering<Proposal_OrderBy>;
    orderProposals: (ordering: Ordering<Proposal_OrderBy>) => void;
} | {
    isError: false;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    fetchNextPage: (options?: import("react-query").FetchNextPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    fetchPreviousPage: (options?: import("react-query").FetchPreviousPageOptions | undefined) => Promise<import("react-query").InfiniteQueryObserverResult<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined, unknown>>;
    hasNextPage?: boolean | undefined;
    hasPreviousPage?: boolean | undefined;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined>, unknown>>;
    remove: () => void;
    proposals: MolochV3Proposal[];
    error: unknown;
    filter: Proposal_Filter;
    filterProposals: (filter: Proposal_Filter) => void;
    data: import("react-query").InfiniteData<import("@daohaus/data-fetch-utils").IListQueryResults<Proposal_OrderBy, Proposal_Filter, MolochV3Proposal[]> | undefined> | undefined;
    ordering: Ordering<Proposal_OrderBy>;
    orderProposals: (ordering: Ordering<Proposal_OrderBy>) => void;
};
export {};
