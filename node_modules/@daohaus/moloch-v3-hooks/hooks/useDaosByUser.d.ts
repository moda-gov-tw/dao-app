import { Ordering } from '@daohaus/data-fetch-utils';
import { Keychain, ValidNetwork } from '@daohaus/keychain-utils';
import { Dao_Filter, Dao_OrderBy, Member_Filter } from '@daohaus/moloch-v3-data';
import { MolochV3Membership } from '@daohaus/utils';
export declare const useDaosByUser: ({ userAddress, networkIds, daoFilter, memberFilter, graphApiKeys, ordering, }: {
    userAddress: string;
    networkIds?: ("0x1" | "0x5" | "0x64" | "0xa" | "0x89" | "0xa4b1")[] | undefined;
    daoFilter?: Dao_Filter | undefined;
    memberFilter?: Member_Filter | undefined;
    graphApiKeys?: Keychain<string> | undefined;
    ordering?: Ordering<Dao_OrderBy> | undefined;
}) => {
    isError: false;
    isIdle: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "idle";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("@daohaus/data-fetch-utils").IFindQueryResult<import("@daohaus/utils").MolochV3MembershipQuery>, unknown>>;
    remove: () => void;
    daos: MolochV3Membership[] | undefined;
    error: Error | undefined;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("@daohaus/data-fetch-utils").IFindQueryResult<import("@daohaus/utils").MolochV3MembershipQuery>, unknown>>;
    remove: () => void;
    daos: MolochV3Membership[] | undefined;
    error: Error | undefined;
} | {
    isError: false;
    isIdle: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("@daohaus/data-fetch-utils").IFindQueryResult<import("@daohaus/utils").MolochV3MembershipQuery>, unknown>>;
    remove: () => void;
    daos: MolochV3Membership[] | undefined;
    error: Error | undefined;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("@daohaus/data-fetch-utils").IFindQueryResult<import("@daohaus/utils").MolochV3MembershipQuery>, unknown>>;
    remove: () => void;
    daos: MolochV3Membership[] | undefined;
    error: Error | undefined;
} | {
    isError: false;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<import("@daohaus/data-fetch-utils").IFindQueryResult<import("@daohaus/utils").MolochV3MembershipQuery>, unknown>>;
    remove: () => void;
    daos: MolochV3Membership[] | undefined;
    error: Error | undefined;
};
