import { ValidNetwork, Keychain } from '@daohaus/keychain-utils';
export declare const useRecords: ({ daoId, chainId, recordType, pageSize, offset, graphApiKeys, credentialType, }: {
    daoId: string;
    chainId: ValidNetwork;
    recordType: string;
    pageSize?: number | undefined;
    offset?: number | undefined;
    graphApiKeys?: Keychain | undefined;
    credentialType?: string | undefined;
}) => {
    isError: false;
    isIdle: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "idle";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[], unknown>>;
    remove: () => void;
    records: ({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[] | undefined;
    error: Error | null;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[], unknown>>;
    remove: () => void;
    records: ({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[] | undefined;
    error: Error | null;
} | {
    isError: false;
    isIdle: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[], unknown>>;
    remove: () => void;
    records: ({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[] | undefined;
    error: Error | null;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[], unknown>>;
    remove: () => void;
    records: ({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[] | undefined;
    error: Error | null;
} | {
    isError: false;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[], unknown>>;
    remove: () => void;
    records: ({
        id: string;
        createdAt: string;
        createdBy: string;
        tag: string;
        table: string;
        contentType: string;
        content: string;
        queryType?: string | undefined;
        dao: {
            id: string;
        };
    } & {
        parsedContent?: unknown;
    })[] | undefined;
    error: Error | null;
};
