import { ValidNetwork, Keychain } from '@daohaus/keychain-utils';
type FetchShape = {
    decimals?: boolean;
    name?: boolean;
    symbol?: boolean;
    totalSupply?: boolean;
    balanceOf?: boolean;
    allowance?: boolean;
};
export declare const useERC20: ({ tokenAddress, userAddress, spenderAddress, chainId, rpcs, cacheTime, staleTime, fetchShape, }: {
    tokenAddress: string;
    userAddress?: string | null | undefined;
    spenderAddress?: string | null | undefined;
    chainId: ValidNetwork;
    rpcs?: Keychain | undefined;
    cacheTime?: number | undefined;
    staleTime?: number | undefined;
    fetchShape?: FetchShape | undefined;
}) => {
    isError: false;
    isIdle: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "idle";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<{
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    }, unknown>>;
    remove: () => void;
    tokenData: {
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    } | undefined;
    error: Error;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<{
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    }, unknown>>;
    remove: () => void;
    tokenData: {
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    } | undefined;
    error: Error;
} | {
    isError: false;
    isIdle: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<{
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    }, unknown>>;
    remove: () => void;
    tokenData: {
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    } | undefined;
    error: Error;
} | {
    isError: true;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<{
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    }, unknown>>;
    remove: () => void;
    tokenData: {
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    } | undefined;
    error: Error;
} | {
    isError: false;
    isIdle: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<{
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    }, unknown>>;
    remove: () => void;
    tokenData: {
        decimals: unknown;
        name: unknown;
        symbol: unknown;
        totalSupply: string | null;
        balance: string | null;
        allowance: string | null;
        isApproved: boolean;
    } | undefined;
    error: Error;
};
export {};
