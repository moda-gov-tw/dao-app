import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface IBaalInterface extends utils.Interface {
    functions: {
        "adminLock()": FunctionFragment;
        "avatar()": FunctionFragment;
        "burnLoot(address[],uint256[])": FunctionFragment;
        "burnShares(address[],uint256[])": FunctionFragment;
        "cancelProposal(uint32)": FunctionFragment;
        "encodeMultisend(bytes[],address)": FunctionFragment;
        "executeAsBaal(address,uint256,bytes)": FunctionFragment;
        "getProposalStatus(uint32)": FunctionFragment;
        "governorLock()": FunctionFragment;
        "gracePeriod()": FunctionFragment;
        "hashOperation(bytes)": FunctionFragment;
        "isAdmin(address)": FunctionFragment;
        "isGovernor(address)": FunctionFragment;
        "isManager(address)": FunctionFragment;
        "latestSponsoredProposalId()": FunctionFragment;
        "lockAdmin()": FunctionFragment;
        "lockGovernor()": FunctionFragment;
        "lockManager()": FunctionFragment;
        "lootPaused()": FunctionFragment;
        "lootToken()": FunctionFragment;
        "managerLock()": FunctionFragment;
        "minRetentionPercent()": FunctionFragment;
        "mintLoot(address[],uint256[])": FunctionFragment;
        "mintShares(address[],uint256[])": FunctionFragment;
        "multisendLibrary()": FunctionFragment;
        "processProposal(uint32,bytes)": FunctionFragment;
        "proposalCount()": FunctionFragment;
        "proposalOffering()": FunctionFragment;
        "quorumPercent()": FunctionFragment;
        "ragequit(address,uint256,uint256,address[])": FunctionFragment;
        "setAdminConfig(bool,bool)": FunctionFragment;
        "setAvatar(address)": FunctionFragment;
        "setGovernanceConfig(bytes)": FunctionFragment;
        "setShamans(address[],uint256[])": FunctionFragment;
        "setTarget(address)": FunctionFragment;
        "setTrustedForwarder(address)": FunctionFragment;
        "setUp(bytes)": FunctionFragment;
        "shamans(address)": FunctionFragment;
        "sharesPaused()": FunctionFragment;
        "sharesToken()": FunctionFragment;
        "sponsorProposal(uint32)": FunctionFragment;
        "sponsorThreshold()": FunctionFragment;
        "submitProposal(bytes,uint32,uint256,string)": FunctionFragment;
        "submitVote(uint32,bool)": FunctionFragment;
        "submitVoteWithSig(address,uint256,uint256,uint32,bool,uint8,bytes32,bytes32)": FunctionFragment;
        "target()": FunctionFragment;
        "totalLoot()": FunctionFragment;
        "totalShares()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "trustedForwarder()": FunctionFragment;
        "votingPeriod()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "adminLock" | "avatar" | "burnLoot" | "burnShares" | "cancelProposal" | "encodeMultisend" | "executeAsBaal" | "getProposalStatus" | "governorLock" | "gracePeriod" | "hashOperation" | "isAdmin" | "isGovernor" | "isManager" | "latestSponsoredProposalId" | "lockAdmin" | "lockGovernor" | "lockManager" | "lootPaused" | "lootToken" | "managerLock" | "minRetentionPercent" | "mintLoot" | "mintShares" | "multisendLibrary" | "processProposal" | "proposalCount" | "proposalOffering" | "quorumPercent" | "ragequit" | "setAdminConfig" | "setAvatar" | "setGovernanceConfig" | "setShamans" | "setTarget" | "setTrustedForwarder" | "setUp" | "shamans" | "sharesPaused" | "sharesToken" | "sponsorProposal" | "sponsorThreshold" | "submitProposal" | "submitVote" | "submitVoteWithSig" | "target" | "totalLoot" | "totalShares" | "totalSupply" | "trustedForwarder" | "votingPeriod"): FunctionFragment;
    encodeFunctionData(functionFragment: "adminLock", values?: undefined): string;
    encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
    encodeFunctionData(functionFragment: "burnLoot", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "burnShares", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "cancelProposal", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "encodeMultisend", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "executeAsBaal", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getProposalStatus", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "governorLock", values?: undefined): string;
    encodeFunctionData(functionFragment: "gracePeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "hashOperation", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "isAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isGovernor", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isManager", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "latestSponsoredProposalId", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockGovernor", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "lootPaused", values?: undefined): string;
    encodeFunctionData(functionFragment: "lootToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "managerLock", values?: undefined): string;
    encodeFunctionData(functionFragment: "minRetentionPercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "mintLoot", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "mintShares", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "multisendLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "processProposal", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "proposalCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "proposalOffering", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorumPercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "ragequit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>[]
    ]): string;
    encodeFunctionData(functionFragment: "setAdminConfig", values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setAvatar", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setGovernanceConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setShamans", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setTarget", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTrustedForwarder", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setUp", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "shamans", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharesPaused", values?: undefined): string;
    encodeFunctionData(functionFragment: "sharesToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "sponsorProposal", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "sponsorThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "submitProposal", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "submitVote", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "submitVoteWithSig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "target", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalLoot", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalShares", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "trustedForwarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "votingPeriod", values?: undefined): string;
    decodeFunctionResult(functionFragment: "adminLock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnLoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnShares", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "encodeMultisend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeAsBaal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProposalStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "governorLock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gracePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashOperation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestSponsoredProposalId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockGovernor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lootPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lootToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "managerLock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minRetentionPercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintLoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintShares", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multisendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalOffering", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumPercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ragequit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdminConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGovernanceConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setShamans", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "shamans", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharesPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharesToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitVoteWithSig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalLoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalShares", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingPeriod", data: BytesLike): Result;
    events: {};
}
export interface IBaal extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IBaalInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        adminLock(overrides?: CallOverrides): Promise<[boolean]>;
        avatar(overrides?: CallOverrides): Promise<[string]>;
        burnLoot(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        burnShares(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        cancelProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        encodeMultisend(calls: PromiseOrValue<BytesLike>[], target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        executeAsBaal(to: PromiseOrValue<string>, value: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getProposalStatus(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        governorLock(overrides?: CallOverrides): Promise<[boolean]>;
        gracePeriod(overrides?: CallOverrides): Promise<[number]>;
        hashOperation(transactions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        isAdmin(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isGovernor(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isManager(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        latestSponsoredProposalId(overrides?: CallOverrides): Promise<[number]>;
        lockAdmin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lockGovernor(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lockManager(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lootPaused(overrides?: CallOverrides): Promise<[boolean]>;
        lootToken(overrides?: CallOverrides): Promise<[string]>;
        managerLock(overrides?: CallOverrides): Promise<[boolean]>;
        minRetentionPercent(overrides?: CallOverrides): Promise<[BigNumber]>;
        mintLoot(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mintShares(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        multisendLibrary(overrides?: CallOverrides): Promise<[string]>;
        processProposal(id: PromiseOrValue<BigNumberish>, proposalData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        proposalCount(overrides?: CallOverrides): Promise<[number]>;
        proposalOffering(overrides?: CallOverrides): Promise<[BigNumber]>;
        quorumPercent(overrides?: CallOverrides): Promise<[BigNumber]>;
        ragequit(to: PromiseOrValue<string>, sharesToBurn: PromiseOrValue<BigNumberish>, lootToBurn: PromiseOrValue<BigNumberish>, tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAdminConfig(pauseShares: PromiseOrValue<boolean>, pauseLoot: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAvatar(avatar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setGovernanceConfig(governanceConfig: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setShamans(shamans: PromiseOrValue<string>[], permissions: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTarget(avatar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTrustedForwarder(trustedForwarderAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setUp(initializationParams: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        shamans(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        sharesPaused(overrides?: CallOverrides): Promise<[boolean]>;
        sharesToken(overrides?: CallOverrides): Promise<[string]>;
        sponsorProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sponsorThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;
        submitProposal(proposalData: PromiseOrValue<BytesLike>, expiration: PromiseOrValue<BigNumberish>, baalGas: PromiseOrValue<BigNumberish>, details: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        submitVote(id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        submitVoteWithSig(voter: PromiseOrValue<string>, expiry: PromiseOrValue<BigNumberish>, nonce: PromiseOrValue<BigNumberish>, id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        target(overrides?: CallOverrides): Promise<[string]>;
        totalLoot(overrides?: CallOverrides): Promise<[BigNumber]>;
        totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        trustedForwarder(overrides?: CallOverrides): Promise<[string]>;
        votingPeriod(overrides?: CallOverrides): Promise<[number]>;
    };
    adminLock(overrides?: CallOverrides): Promise<boolean>;
    avatar(overrides?: CallOverrides): Promise<string>;
    burnLoot(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    burnShares(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    cancelProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    encodeMultisend(calls: PromiseOrValue<BytesLike>[], target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    executeAsBaal(to: PromiseOrValue<string>, value: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getProposalStatus(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    governorLock(overrides?: CallOverrides): Promise<boolean>;
    gracePeriod(overrides?: CallOverrides): Promise<number>;
    hashOperation(transactions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    isAdmin(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isGovernor(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isManager(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    latestSponsoredProposalId(overrides?: CallOverrides): Promise<number>;
    lockAdmin(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lockGovernor(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lockManager(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lootPaused(overrides?: CallOverrides): Promise<boolean>;
    lootToken(overrides?: CallOverrides): Promise<string>;
    managerLock(overrides?: CallOverrides): Promise<boolean>;
    minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;
    mintLoot(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mintShares(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    multisendLibrary(overrides?: CallOverrides): Promise<string>;
    processProposal(id: PromiseOrValue<BigNumberish>, proposalData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    proposalCount(overrides?: CallOverrides): Promise<number>;
    proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;
    quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;
    ragequit(to: PromiseOrValue<string>, sharesToBurn: PromiseOrValue<BigNumberish>, lootToBurn: PromiseOrValue<BigNumberish>, tokens: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAdminConfig(pauseShares: PromiseOrValue<boolean>, pauseLoot: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAvatar(avatar: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setGovernanceConfig(governanceConfig: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setShamans(shamans: PromiseOrValue<string>[], permissions: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTarget(avatar: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTrustedForwarder(trustedForwarderAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setUp(initializationParams: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    shamans(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    sharesPaused(overrides?: CallOverrides): Promise<boolean>;
    sharesToken(overrides?: CallOverrides): Promise<string>;
    sponsorProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;
    submitProposal(proposalData: PromiseOrValue<BytesLike>, expiration: PromiseOrValue<BigNumberish>, baalGas: PromiseOrValue<BigNumberish>, details: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    submitVote(id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    submitVoteWithSig(voter: PromiseOrValue<string>, expiry: PromiseOrValue<BigNumberish>, nonce: PromiseOrValue<BigNumberish>, id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    target(overrides?: CallOverrides): Promise<string>;
    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;
    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    trustedForwarder(overrides?: CallOverrides): Promise<string>;
    votingPeriod(overrides?: CallOverrides): Promise<number>;
    callStatic: {
        adminLock(overrides?: CallOverrides): Promise<boolean>;
        avatar(overrides?: CallOverrides): Promise<string>;
        burnLoot(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        burnShares(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        cancelProposal(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        encodeMultisend(calls: PromiseOrValue<BytesLike>[], target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        executeAsBaal(to: PromiseOrValue<string>, value: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getProposalStatus(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean, boolean, boolean, boolean]>;
        governorLock(overrides?: CallOverrides): Promise<boolean>;
        gracePeriod(overrides?: CallOverrides): Promise<number>;
        hashOperation(transactions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        isAdmin(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isGovernor(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isManager(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        latestSponsoredProposalId(overrides?: CallOverrides): Promise<number>;
        lockAdmin(overrides?: CallOverrides): Promise<void>;
        lockGovernor(overrides?: CallOverrides): Promise<void>;
        lockManager(overrides?: CallOverrides): Promise<void>;
        lootPaused(overrides?: CallOverrides): Promise<boolean>;
        lootToken(overrides?: CallOverrides): Promise<string>;
        managerLock(overrides?: CallOverrides): Promise<boolean>;
        minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;
        mintLoot(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        mintShares(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        multisendLibrary(overrides?: CallOverrides): Promise<string>;
        processProposal(id: PromiseOrValue<BigNumberish>, proposalData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        proposalCount(overrides?: CallOverrides): Promise<number>;
        proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;
        quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;
        ragequit(to: PromiseOrValue<string>, sharesToBurn: PromiseOrValue<BigNumberish>, lootToBurn: PromiseOrValue<BigNumberish>, tokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        setAdminConfig(pauseShares: PromiseOrValue<boolean>, pauseLoot: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setAvatar(avatar: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setGovernanceConfig(governanceConfig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setShamans(shamans: PromiseOrValue<string>[], permissions: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setTarget(avatar: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTrustedForwarder(trustedForwarderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setUp(initializationParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        shamans(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sharesPaused(overrides?: CallOverrides): Promise<boolean>;
        sharesToken(overrides?: CallOverrides): Promise<string>;
        sponsorProposal(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;
        submitProposal(proposalData: PromiseOrValue<BytesLike>, expiration: PromiseOrValue<BigNumberish>, baalGas: PromiseOrValue<BigNumberish>, details: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        submitVote(id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        submitVoteWithSig(voter: PromiseOrValue<string>, expiry: PromiseOrValue<BigNumberish>, nonce: PromiseOrValue<BigNumberish>, id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        target(overrides?: CallOverrides): Promise<string>;
        totalLoot(overrides?: CallOverrides): Promise<BigNumber>;
        totalShares(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        trustedForwarder(overrides?: CallOverrides): Promise<string>;
        votingPeriod(overrides?: CallOverrides): Promise<number>;
    };
    filters: {};
    estimateGas: {
        adminLock(overrides?: CallOverrides): Promise<BigNumber>;
        avatar(overrides?: CallOverrides): Promise<BigNumber>;
        burnLoot(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        burnShares(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        cancelProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        encodeMultisend(calls: PromiseOrValue<BytesLike>[], target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        executeAsBaal(to: PromiseOrValue<string>, value: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getProposalStatus(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        governorLock(overrides?: CallOverrides): Promise<BigNumber>;
        gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;
        hashOperation(transactions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        isAdmin(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isGovernor(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isManager(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        latestSponsoredProposalId(overrides?: CallOverrides): Promise<BigNumber>;
        lockAdmin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lockGovernor(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lockManager(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lootPaused(overrides?: CallOverrides): Promise<BigNumber>;
        lootToken(overrides?: CallOverrides): Promise<BigNumber>;
        managerLock(overrides?: CallOverrides): Promise<BigNumber>;
        minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;
        mintLoot(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mintShares(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        multisendLibrary(overrides?: CallOverrides): Promise<BigNumber>;
        processProposal(id: PromiseOrValue<BigNumberish>, proposalData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        proposalCount(overrides?: CallOverrides): Promise<BigNumber>;
        proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;
        quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;
        ragequit(to: PromiseOrValue<string>, sharesToBurn: PromiseOrValue<BigNumberish>, lootToBurn: PromiseOrValue<BigNumberish>, tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAdminConfig(pauseShares: PromiseOrValue<boolean>, pauseLoot: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAvatar(avatar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setGovernanceConfig(governanceConfig: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setShamans(shamans: PromiseOrValue<string>[], permissions: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTarget(avatar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTrustedForwarder(trustedForwarderAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setUp(initializationParams: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        shamans(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sharesPaused(overrides?: CallOverrides): Promise<BigNumber>;
        sharesToken(overrides?: CallOverrides): Promise<BigNumber>;
        sponsorProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;
        submitProposal(proposalData: PromiseOrValue<BytesLike>, expiration: PromiseOrValue<BigNumberish>, baalGas: PromiseOrValue<BigNumberish>, details: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        submitVote(id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        submitVoteWithSig(voter: PromiseOrValue<string>, expiry: PromiseOrValue<BigNumberish>, nonce: PromiseOrValue<BigNumberish>, id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        target(overrides?: CallOverrides): Promise<BigNumber>;
        totalLoot(overrides?: CallOverrides): Promise<BigNumber>;
        totalShares(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;
        votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        adminLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        burnLoot(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        burnShares(from: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        cancelProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        encodeMultisend(calls: PromiseOrValue<BytesLike>[], target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeAsBaal(to: PromiseOrValue<string>, value: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getProposalStatus(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        governorLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashOperation(transactions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAdmin(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isGovernor(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isManager(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestSponsoredProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lockAdmin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lockGovernor(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lockManager(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lootPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lootToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        managerLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minRetentionPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mintLoot(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mintShares(to: PromiseOrValue<string>[], amount: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        multisendLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        processProposal(id: PromiseOrValue<BigNumberish>, proposalData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proposalOffering(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quorumPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ragequit(to: PromiseOrValue<string>, sharesToBurn: PromiseOrValue<BigNumberish>, lootToBurn: PromiseOrValue<BigNumberish>, tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAdminConfig(pauseShares: PromiseOrValue<boolean>, pauseLoot: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAvatar(avatar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setGovernanceConfig(governanceConfig: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setShamans(shamans: PromiseOrValue<string>[], permissions: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTarget(avatar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTrustedForwarder(trustedForwarderAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setUp(initializationParams: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        shamans(shaman: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sharesPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sharesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sponsorProposal(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sponsorThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        submitProposal(proposalData: PromiseOrValue<BytesLike>, expiration: PromiseOrValue<BigNumberish>, baalGas: PromiseOrValue<BigNumberish>, details: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        submitVote(id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        submitVoteWithSig(voter: PromiseOrValue<string>, expiry: PromiseOrValue<BigNumberish>, nonce: PromiseOrValue<BigNumberish>, id: PromiseOrValue<BigNumberish>, approved: PromiseOrValue<boolean>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        target(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalLoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
