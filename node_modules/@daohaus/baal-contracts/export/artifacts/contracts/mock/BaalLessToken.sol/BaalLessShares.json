{
  "contractName": "BaalLessShares",
  "sourceName": "contracts/mock/BaalLessToken.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baal",
      "outputs": [
        {
          "internalType": "contract IBaal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromTimePoint",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegationNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nCheckpoints",
          "type": "uint256"
        }
      ],
      "name": "getCheckpoint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromTimePoint",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaalVotes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timePoint",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "now",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timePoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_version",
          "type": "uint8"
        }
      ],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b506200002362000029565b620000eb565b600054610100900460ff1615620000965760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e9576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160601c61290b62000126600039600081816107f60152818161083f01528181610abe01528181610afe0152610b8d015261290b6000f3fe6080604052600436106102045760003560e01c80635c19a95c116101185780639dc29fac116100a0578063d505accf1161006f578063d505accf14610669578063dd62ed3e14610689578063e258a72e146106a9578063e5a2a2a5146106c9578063f2fde38b146106ea57600080fd5b80639dc29fac146105e9578063a457c2d714610609578063a9059cbb14610629578063c3cda5201461064957600080fd5b80637ecebe00116100e75780637ecebe00146105625780638abe09f2146105825780638da5cb5b1461059557806395d89b41146105b45780639ab24eb0146105c957600080fd5b80635c19a95c146104c95780636fcfff45146104e957806370a0823114610517578063715018a61461054d57600080fd5b80633659cfe61161019b57806347f761f51161016a57806347f761f5146103ef5780634f1ef2861461043057806352d1902d1461044357806354fd4d5014610458578063587cde1e1461047a57600080fd5b80633659cfe61461036d578063395093511461038f5780633a46b1a8146103af57806340c10f19146103cf57600080fd5b806318160ddd116101d757806318160ddd1461030157806323b872dd14610316578063313ce567146103365780633644e5151461035857600080fd5b806303c8a3c61461020957806306fdde031461024a578063095ea7b31461026c5780630cdfebfa1461029c575b600080fd5b34801561021557600080fd5b5061023761022436600461241a565b6101036020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561025657600080fd5b5061025f61070a565b60405161024191906126a2565b34801561027857600080fd5b5061028c6102873660046125d0565b61079c565b6040519015158152602001610241565b3480156102a857600080fd5b506102e56102b73660046125d0565b6101006020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b6040805163ffffffff9093168352602083019190915201610241565b34801561030d57600080fd5b50603554610237565b34801561032257600080fd5b5061028c610331366004612468565b6107b6565b34801561034257600080fd5b5060125b60405160ff9091168152602001610241565b34801561036457600080fd5b506102376107dc565b34801561037957600080fd5b5061038d61038836600461241a565b6107eb565b005b34801561039b57600080fd5b5061028c6103aa3660046125d0565b6108d4565b3480156103bb57600080fd5b506102376103ca3660046125d0565b6108f6565b3480156103db57600080fd5b5061038d6103ea3660046125d0565b610a37565b3480156103fb57600080fd5b5061040f61040a3660046125d0565b610a60565b60408051825163ffffffff1681526020928301519281019290925201610241565b61038d61043e36600461250e565b610ab3565b34801561044f57600080fd5b50610237610b80565b34801561046457600080fd5b5061019a5461034690600160a01b900460ff1681565b34801561048657600080fd5b506104b161049536600461241a565b610102602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610241565b3480156104d557600080fd5b5061038d6104e436600461241a565b610c33565b3480156104f557600080fd5b5061023761050436600461241a565b6101016020526000908152604090205481565b34801561052357600080fd5b5061023761053236600461241a565b6001600160a01b031660009081526033602052604090205490565b34801561055957600080fd5b5061038d610c3d565b34801561056e57600080fd5b5061023761057d36600461241a565b610c51565b34801561058e57600080fd5b5042610237565b3480156105a157600080fd5b50610104546001600160a01b03166104b1565b3480156105c057600080fd5b5061025f610c6f565b3480156105d557600080fd5b506102376105e436600461241a565b610c7e565b3480156105f557600080fd5b5061038d6106043660046125d0565b610cbc565b34801561061557600080fd5b5061028c6106243660046125d0565b610cce565b34801561063557600080fd5b5061028c6106443660046125d0565b610d54565b34801561065557600080fd5b5061038d6106643660046125fa565b610d62565b34801561067557600080fd5b5061038d6106843660046124a4565b610f58565b34801561069557600080fd5b506102376106a4366004612435565b6110bc565b3480156106b557600080fd5b5061038d6106c436600461266b565b6110e7565b3480156106d557600080fd5b5061019a546104b1906001600160a01b031681565b3480156106f657600080fd5b5061038d61070536600461241a565b6111f9565b606060368054610719906127fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610745906127fc565b80156107925780601f1061076757610100808354040283529160200191610792565b820191906000526020600020905b81548152906001019060200180831161077557829003601f168201915b5050505050905090565b6000336107aa81858561126f565b60019150505b92915050565b6000336107c4858285611393565b6107cf85858561140d565b60019150505b9392505050565b60006107e66115c3565b905090565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561083d5760405162461bcd60e51b8152600401610834906126d5565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661088660008051602061288f833981519152546001600160a01b031690565b6001600160a01b0316146108ac5760405162461bcd60e51b815260040161083490612721565b6108b5816115fa565b604080516000808252602082019092526108d191839190611602565b50565b6000336107aa8185856108e783836110bc565b6108f191906127b8565b61126f565b60004282106109355760405162461bcd60e51b815260206004820152600b60248201526a0859195d195c9b5a5b995960aa1b6044820152606401610834565b6001600160a01b038316600090815261010160205260409020548061095e5760009150506107b0565b8261096c8560018403610a60565b5163ffffffff1611610991576109858460018303610a60565b602001519150506107b0565b8261099d856000610a60565b5163ffffffff1611156109b45760009150506107b0565b600060001982015b81811115610a1f57600282820304810360006109d88883610a60565b805190915063ffffffff168714156109fa576020015194506107b09350505050565b805163ffffffff16871115610a1157819350610a18565b6001820392505b50506109bc565b610a298683610a60565b602001519695505050505050565b610a3f611781565b6035546001600160ff1b0390820111610a5c57610a5c82826117dc565b5050565b604080518082018252600080825260209182018190526001600160a01b039490941684526101008152818420928452918252918290208251808401909352805463ffffffff168352600101549082015290565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610afc5760405162461bcd60e51b8152600401610834906126d5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b4560008051602061288f833981519152546001600160a01b031690565b6001600160a01b031614610b6b5760405162461bcd60e51b815260040161083490612721565b610b74826115fa565b610a5c82826001611602565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c205760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610834565b5060008051602061288f83398151915290565b6108d133826118a9565b610c45611781565b610c4f60006119a0565b565b6001600160a01b0381166000908152609960205260408120546107b0565b606060378054610719906127fc565b6001600160a01b0381166000908152610101602052604081205480610ca45760006107d5565b610cb18360018303610a60565b602001519392505050565b610cc4611781565b610a5c82826119f3565b60003381610cdc82866110bc565b905083811015610d3c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610834565b610d49828686840361126f565b506001949350505050565b6000336107aa81858561140d565b83421115610db25760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610834565b6000610e5b610e537f0e3bc21ca2be03aeeee0e614bfe98f970c96a05a768f627c50ab81764cb50268610de361070a565b604051602001610df39190612686565b60408051601f198184030181528282528051602091820120908301939093528101919091526001600160a01b038a1660608201526080810189905260a0810188905260c00160405160208183030381529060405280519060200120611b33565b858585611b81565b90506001600160a01b038116610eb35760405162461bcd60e51b815260206004820181905260248201527f4552433230566f7465733a20696e76616c6964207369676e65722028307830296044820152606401610834565b6001600160a01b038116600090815261010360205260409020548614610f1b5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610834565b6001600160a01b038116600090815261010360205260408120805491610f4083612831565b9190505550610f4f81886118a9565b50505050505050565b83421115610fa85760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610834565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610fd78c611ba9565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061103282611bd1565b9050600061104282878787611b81565b9050896001600160a01b0316816001600160a01b0316146110a55760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610834565b6110b08a8a8a61126f565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6000548190610100900460ff16158015611108575060005460ff8083169116105b61116b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610834565b6000805461ffff191660ff808416919091176101001790915561019a8054918416600160a01b026001600160a81b03199092169190911790556111ac611bde565b6111b4611c0d565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b611201611781565b6001600160a01b0381166112665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610834565b6108d1816119a0565b6001600160a01b0383166112d15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610834565b6001600160a01b0382166113325760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610834565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061139f84846110bc565b9050600019811461140757818110156113fa5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610834565b611407848484840361126f565b50505050565b6001600160a01b0383166114715760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610834565b6001600160a01b0382166114d35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610834565b6114de838383611c34565b6001600160a01b038316600090815260336020526040902054818110156115565760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610834565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115b69086815260200190565b60405180910390a3611407565b60006107e67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6115f260655490565b606654611c3f565b6108d1611781565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561163a5761163583611c88565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561167357600080fd5b505afa9250505080156116a3575060408051601f3d908101601f191682019092526116a091810190612652565b60015b6117065760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610834565b60008051602061288f83398151915281146117755760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610834565b50611635838383611d24565b610104546001600160a01b03163314610c4f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610834565b6001600160a01b0382166118325760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610834565b61183e60008383611c34565b806035600082825461185091906127b8565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216600090815260336020526040812054116118f95760405162461bcd60e51b81526020600482015260076024820152662173686172657360c81b6044820152606401610834565b6001600160a01b0380831660009081526101026020526040902080548383166001600160a01b031982161790915516611951818361194c866001600160a01b031660009081526033602052604090205490565b611d49565b816001600160a01b0316816001600160a01b0316846001600160a01b03167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a4505050565b61010480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216611a535760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610834565b611a5f82600083611c34565b6001600160a01b03821660009081526033602052604090205481811015611ad35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610834565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60006107b0611b40611e2d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b9287878787611e64565b91509150611b9f81611f28565b5095945050505050565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b60006107b0611b406115c3565b600054610100900460ff16611c055760405162461bcd60e51b81526004016108349061276d565b610c4f612076565b600054610100900460ff16610c4f5760405162461bcd60e51b81526004016108349061276d565b6116358383836120a6565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6001600160a01b0381163b611cf55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610834565b60008051602061288f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611d2d83612152565b600082511180611d3a5750805b15611635576114078383612192565b816001600160a01b0316836001600160a01b031614158015611d6a57508015155b15611635576001600160a01b03831615611dcc576001600160a01b038316600090815261010160205260408120549081611da5576000611db7565b611db28560018403610a60565b602001515b9050828103611dc886848484612286565b5050505b6001600160a01b03821615611635576001600160a01b038216600090815261010160205260408120549081611e02576000611e14565b611e0f8460018403610a60565b602001515b9050828101611e2585848484612286565b505050505050565b60006107e67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611e5c60cc5490565b60cd54611c3f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611e9b5750600090506003611f1f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611eef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f1857600060019250925050611f1f565b9150600090505b94509492505050565b6000816004811115611f3c57611f3c612862565b1415611f455750565b6001816004811115611f5957611f59612862565b1415611fa75760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610834565b6002816004811115611fbb57611fbb612862565b14156120095760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610834565b600381600481111561201d5761201d612862565b14156108d15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610834565b600054610100900460ff1661209d5760405162461bcd60e51b81526004016108349061276d565b610c4f336119a0565b6001600160a01b0382166000908152603360205260409020541580156120e357506001600160a01b03821660009081526101016020526040902054155b80156120ef5750600081115b1561211f576001600160a01b03821660008181526101026020526040902080546001600160a01b03191690911790555b6001600160a01b038084166000908152610102602052604080822054858416835291205461163592918216911683611d49565b61215b81611c88565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6121fa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610834565b600080846001600160a01b0316846040516122159190612686565b600060405180830381855af49150503d8060008114612250576040519150601f19603f3d011682016040523d82523d6000602084013e612255565b606091505b509150915061227d82826040518060600160405280602781526020016128af602791396123af565b95945050505050565b4283158015906122c657506001600160a01b0385166000908152610100602090815260408083206000198801845290915290205463ffffffff8281169116145b156122fe576001600160a01b038516600090815261010060209081526040808320600019880184529091529020600101829055612364565b60408051808201825263ffffffff838116825260208083018681526001600160a01b038a16600081815261010084528681208b825284528681209551865463ffffffff191695169490941785559051600194850155825261010190529190912090850190555b60408051848152602081018490526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b606083156123be5750816107d5565b6107d583838151156123d35781518083602001fd5b8060405162461bcd60e51b815260040161083491906126a2565b80356001600160a01b038116811461240457600080fd5b919050565b803560ff8116811461240457600080fd5b60006020828403121561242c57600080fd5b6107d5826123ed565b6000806040838503121561244857600080fd5b612451836123ed565b915061245f602084016123ed565b90509250929050565b60008060006060848603121561247d57600080fd5b612486846123ed565b9250612494602085016123ed565b9150604084013590509250925092565b600080600080600080600060e0888a0312156124bf57600080fd5b6124c8886123ed565b96506124d6602089016123ed565b955060408801359450606088013593506124f260808901612409565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561252157600080fd5b61252a836123ed565b9150602083013567ffffffffffffffff8082111561254757600080fd5b818501915085601f83011261255b57600080fd5b81358181111561256d5761256d612878565b604051601f8201601f19908116603f0116810190838211818310171561259557612595612878565b816040528281528860208487010111156125ae57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156125e357600080fd5b6125ec836123ed565b946020939093013593505050565b60008060008060008060c0878903121561261357600080fd5b61261c876123ed565b9550602087013594506040870135935061263860608801612409565b92506080870135915060a087013590509295509295509295565b60006020828403121561266457600080fd5b5051919050565b60006020828403121561267d57600080fd5b6107d582612409565b600082516126988184602087016127d0565b9190910192915050565b60208152600082518060208401526126c18160408501602087016127d0565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156127cb576127cb61284c565b500190565b60005b838110156127eb5781810151838201526020016127d3565b838111156114075750506000910152565b600181811c9082168061281057607f821691505b60208210811415611bcb57634e487b7160e01b600052602260045260246000fd5b60006000198214156128455761284561284c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205bdba198ed08a38af51e95ed9a473b6a7049d59a345aea4ed751102cb1d80d8e64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c80635c19a95c116101185780639dc29fac116100a0578063d505accf1161006f578063d505accf14610669578063dd62ed3e14610689578063e258a72e146106a9578063e5a2a2a5146106c9578063f2fde38b146106ea57600080fd5b80639dc29fac146105e9578063a457c2d714610609578063a9059cbb14610629578063c3cda5201461064957600080fd5b80637ecebe00116100e75780637ecebe00146105625780638abe09f2146105825780638da5cb5b1461059557806395d89b41146105b45780639ab24eb0146105c957600080fd5b80635c19a95c146104c95780636fcfff45146104e957806370a0823114610517578063715018a61461054d57600080fd5b80633659cfe61161019b57806347f761f51161016a57806347f761f5146103ef5780634f1ef2861461043057806352d1902d1461044357806354fd4d5014610458578063587cde1e1461047a57600080fd5b80633659cfe61461036d578063395093511461038f5780633a46b1a8146103af57806340c10f19146103cf57600080fd5b806318160ddd116101d757806318160ddd1461030157806323b872dd14610316578063313ce567146103365780633644e5151461035857600080fd5b806303c8a3c61461020957806306fdde031461024a578063095ea7b31461026c5780630cdfebfa1461029c575b600080fd5b34801561021557600080fd5b5061023761022436600461241a565b6101036020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561025657600080fd5b5061025f61070a565b60405161024191906126a2565b34801561027857600080fd5b5061028c6102873660046125d0565b61079c565b6040519015158152602001610241565b3480156102a857600080fd5b506102e56102b73660046125d0565b6101006020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b6040805163ffffffff9093168352602083019190915201610241565b34801561030d57600080fd5b50603554610237565b34801561032257600080fd5b5061028c610331366004612468565b6107b6565b34801561034257600080fd5b5060125b60405160ff9091168152602001610241565b34801561036457600080fd5b506102376107dc565b34801561037957600080fd5b5061038d61038836600461241a565b6107eb565b005b34801561039b57600080fd5b5061028c6103aa3660046125d0565b6108d4565b3480156103bb57600080fd5b506102376103ca3660046125d0565b6108f6565b3480156103db57600080fd5b5061038d6103ea3660046125d0565b610a37565b3480156103fb57600080fd5b5061040f61040a3660046125d0565b610a60565b60408051825163ffffffff1681526020928301519281019290925201610241565b61038d61043e36600461250e565b610ab3565b34801561044f57600080fd5b50610237610b80565b34801561046457600080fd5b5061019a5461034690600160a01b900460ff1681565b34801561048657600080fd5b506104b161049536600461241a565b610102602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610241565b3480156104d557600080fd5b5061038d6104e436600461241a565b610c33565b3480156104f557600080fd5b5061023761050436600461241a565b6101016020526000908152604090205481565b34801561052357600080fd5b5061023761053236600461241a565b6001600160a01b031660009081526033602052604090205490565b34801561055957600080fd5b5061038d610c3d565b34801561056e57600080fd5b5061023761057d36600461241a565b610c51565b34801561058e57600080fd5b5042610237565b3480156105a157600080fd5b50610104546001600160a01b03166104b1565b3480156105c057600080fd5b5061025f610c6f565b3480156105d557600080fd5b506102376105e436600461241a565b610c7e565b3480156105f557600080fd5b5061038d6106043660046125d0565b610cbc565b34801561061557600080fd5b5061028c6106243660046125d0565b610cce565b34801561063557600080fd5b5061028c6106443660046125d0565b610d54565b34801561065557600080fd5b5061038d6106643660046125fa565b610d62565b34801561067557600080fd5b5061038d6106843660046124a4565b610f58565b34801561069557600080fd5b506102376106a4366004612435565b6110bc565b3480156106b557600080fd5b5061038d6106c436600461266b565b6110e7565b3480156106d557600080fd5b5061019a546104b1906001600160a01b031681565b3480156106f657600080fd5b5061038d61070536600461241a565b6111f9565b606060368054610719906127fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610745906127fc565b80156107925780601f1061076757610100808354040283529160200191610792565b820191906000526020600020905b81548152906001019060200180831161077557829003601f168201915b5050505050905090565b6000336107aa81858561126f565b60019150505b92915050565b6000336107c4858285611393565b6107cf85858561140d565b60019150505b9392505050565b60006107e66115c3565b905090565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561083d5760405162461bcd60e51b8152600401610834906126d5565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661088660008051602061288f833981519152546001600160a01b031690565b6001600160a01b0316146108ac5760405162461bcd60e51b815260040161083490612721565b6108b5816115fa565b604080516000808252602082019092526108d191839190611602565b50565b6000336107aa8185856108e783836110bc565b6108f191906127b8565b61126f565b60004282106109355760405162461bcd60e51b815260206004820152600b60248201526a0859195d195c9b5a5b995960aa1b6044820152606401610834565b6001600160a01b038316600090815261010160205260409020548061095e5760009150506107b0565b8261096c8560018403610a60565b5163ffffffff1611610991576109858460018303610a60565b602001519150506107b0565b8261099d856000610a60565b5163ffffffff1611156109b45760009150506107b0565b600060001982015b81811115610a1f57600282820304810360006109d88883610a60565b805190915063ffffffff168714156109fa576020015194506107b09350505050565b805163ffffffff16871115610a1157819350610a18565b6001820392505b50506109bc565b610a298683610a60565b602001519695505050505050565b610a3f611781565b6035546001600160ff1b0390820111610a5c57610a5c82826117dc565b5050565b604080518082018252600080825260209182018190526001600160a01b039490941684526101008152818420928452918252918290208251808401909352805463ffffffff168352600101549082015290565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610afc5760405162461bcd60e51b8152600401610834906126d5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b4560008051602061288f833981519152546001600160a01b031690565b6001600160a01b031614610b6b5760405162461bcd60e51b815260040161083490612721565b610b74826115fa565b610a5c82826001611602565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c205760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610834565b5060008051602061288f83398151915290565b6108d133826118a9565b610c45611781565b610c4f60006119a0565b565b6001600160a01b0381166000908152609960205260408120546107b0565b606060378054610719906127fc565b6001600160a01b0381166000908152610101602052604081205480610ca45760006107d5565b610cb18360018303610a60565b602001519392505050565b610cc4611781565b610a5c82826119f3565b60003381610cdc82866110bc565b905083811015610d3c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610834565b610d49828686840361126f565b506001949350505050565b6000336107aa81858561140d565b83421115610db25760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610834565b6000610e5b610e537f0e3bc21ca2be03aeeee0e614bfe98f970c96a05a768f627c50ab81764cb50268610de361070a565b604051602001610df39190612686565b60408051601f198184030181528282528051602091820120908301939093528101919091526001600160a01b038a1660608201526080810189905260a0810188905260c00160405160208183030381529060405280519060200120611b33565b858585611b81565b90506001600160a01b038116610eb35760405162461bcd60e51b815260206004820181905260248201527f4552433230566f7465733a20696e76616c6964207369676e65722028307830296044820152606401610834565b6001600160a01b038116600090815261010360205260409020548614610f1b5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610834565b6001600160a01b038116600090815261010360205260408120805491610f4083612831565b9190505550610f4f81886118a9565b50505050505050565b83421115610fa85760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610834565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610fd78c611ba9565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061103282611bd1565b9050600061104282878787611b81565b9050896001600160a01b0316816001600160a01b0316146110a55760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610834565b6110b08a8a8a61126f565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6000548190610100900460ff16158015611108575060005460ff8083169116105b61116b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610834565b6000805461ffff191660ff808416919091176101001790915561019a8054918416600160a01b026001600160a81b03199092169190911790556111ac611bde565b6111b4611c0d565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b611201611781565b6001600160a01b0381166112665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610834565b6108d1816119a0565b6001600160a01b0383166112d15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610834565b6001600160a01b0382166113325760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610834565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061139f84846110bc565b9050600019811461140757818110156113fa5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610834565b611407848484840361126f565b50505050565b6001600160a01b0383166114715760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610834565b6001600160a01b0382166114d35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610834565b6114de838383611c34565b6001600160a01b038316600090815260336020526040902054818110156115565760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610834565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115b69086815260200190565b60405180910390a3611407565b60006107e67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6115f260655490565b606654611c3f565b6108d1611781565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561163a5761163583611c88565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561167357600080fd5b505afa9250505080156116a3575060408051601f3d908101601f191682019092526116a091810190612652565b60015b6117065760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610834565b60008051602061288f83398151915281146117755760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610834565b50611635838383611d24565b610104546001600160a01b03163314610c4f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610834565b6001600160a01b0382166118325760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610834565b61183e60008383611c34565b806035600082825461185091906127b8565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216600090815260336020526040812054116118f95760405162461bcd60e51b81526020600482015260076024820152662173686172657360c81b6044820152606401610834565b6001600160a01b0380831660009081526101026020526040902080548383166001600160a01b031982161790915516611951818361194c866001600160a01b031660009081526033602052604090205490565b611d49565b816001600160a01b0316816001600160a01b0316846001600160a01b03167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a4505050565b61010480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216611a535760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610834565b611a5f82600083611c34565b6001600160a01b03821660009081526033602052604090205481811015611ad35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610834565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60006107b0611b40611e2d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b9287878787611e64565b91509150611b9f81611f28565b5095945050505050565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b60006107b0611b406115c3565b600054610100900460ff16611c055760405162461bcd60e51b81526004016108349061276d565b610c4f612076565b600054610100900460ff16610c4f5760405162461bcd60e51b81526004016108349061276d565b6116358383836120a6565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6001600160a01b0381163b611cf55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610834565b60008051602061288f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611d2d83612152565b600082511180611d3a5750805b15611635576114078383612192565b816001600160a01b0316836001600160a01b031614158015611d6a57508015155b15611635576001600160a01b03831615611dcc576001600160a01b038316600090815261010160205260408120549081611da5576000611db7565b611db28560018403610a60565b602001515b9050828103611dc886848484612286565b5050505b6001600160a01b03821615611635576001600160a01b038216600090815261010160205260408120549081611e02576000611e14565b611e0f8460018403610a60565b602001515b9050828101611e2585848484612286565b505050505050565b60006107e67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611e5c60cc5490565b60cd54611c3f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611e9b5750600090506003611f1f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611eef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f1857600060019250925050611f1f565b9150600090505b94509492505050565b6000816004811115611f3c57611f3c612862565b1415611f455750565b6001816004811115611f5957611f59612862565b1415611fa75760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610834565b6002816004811115611fbb57611fbb612862565b14156120095760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610834565b600381600481111561201d5761201d612862565b14156108d15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610834565b600054610100900460ff1661209d5760405162461bcd60e51b81526004016108349061276d565b610c4f336119a0565b6001600160a01b0382166000908152603360205260409020541580156120e357506001600160a01b03821660009081526101016020526040902054155b80156120ef5750600081115b1561211f576001600160a01b03821660008181526101026020526040902080546001600160a01b03191690911790555b6001600160a01b038084166000908152610102602052604080822054858416835291205461163592918216911683611d49565b61215b81611c88565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6121fa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610834565b600080846001600160a01b0316846040516122159190612686565b600060405180830381855af49150503d8060008114612250576040519150601f19603f3d011682016040523d82523d6000602084013e612255565b606091505b509150915061227d82826040518060600160405280602781526020016128af602791396123af565b95945050505050565b4283158015906122c657506001600160a01b0385166000908152610100602090815260408083206000198801845290915290205463ffffffff8281169116145b156122fe576001600160a01b038516600090815261010060209081526040808320600019880184529091529020600101829055612364565b60408051808201825263ffffffff838116825260208083018681526001600160a01b038a16600081815261010084528681208b825284528681209551865463ffffffff191695169490941785559051600194850155825261010190529190912090850190555b60408051848152602081018490526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b606083156123be5750816107d5565b6107d583838151156123d35781518083602001fd5b8060405162461bcd60e51b815260040161083491906126a2565b80356001600160a01b038116811461240457600080fd5b919050565b803560ff8116811461240457600080fd5b60006020828403121561242c57600080fd5b6107d5826123ed565b6000806040838503121561244857600080fd5b612451836123ed565b915061245f602084016123ed565b90509250929050565b60008060006060848603121561247d57600080fd5b612486846123ed565b9250612494602085016123ed565b9150604084013590509250925092565b600080600080600080600060e0888a0312156124bf57600080fd5b6124c8886123ed565b96506124d6602089016123ed565b955060408801359450606088013593506124f260808901612409565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561252157600080fd5b61252a836123ed565b9150602083013567ffffffffffffffff8082111561254757600080fd5b818501915085601f83011261255b57600080fd5b81358181111561256d5761256d612878565b604051601f8201601f19908116603f0116810190838211818310171561259557612595612878565b816040528281528860208487010111156125ae57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156125e357600080fd5b6125ec836123ed565b946020939093013593505050565b60008060008060008060c0878903121561261357600080fd5b61261c876123ed565b9550602087013594506040870135935061263860608801612409565b92506080870135915060a087013590509295509295509295565b60006020828403121561266457600080fd5b5051919050565b60006020828403121561267d57600080fd5b6107d582612409565b600082516126988184602087016127d0565b9190910192915050565b60208152600082518060208401526126c18160408501602087016127d0565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156127cb576127cb61284c565b500190565b60005b838110156127eb5781810151838201526020016127d3565b838111156114075750506000910152565b600181811c9082168061281057607f821691505b60208210811415611bcb57634e487b7160e01b600052602260045260246000fd5b60006000198214156128455761284561284c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205bdba198ed08a38af51e95ed9a473b6a7049d59a345aea4ed751102cb1d80d8e64736f6c63430008070033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "params": {
          "account": "Address to lose shares",
          "amount": "Amount to burn"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to."
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate 'votes' to.",
          "expiry": "The time at which to expire the signature.",
          "nonce": "The contract state required to match the signature.",
          "r": "The r signature",
          "s": "The s signature",
          "v": "The v signature"
        }
      },
      "getPastVotes(address,uint256)": {
        "params": {
          "account": "The user to check `votes` for.",
          "timePoint": "The unix time to check `votes` for."
        },
        "returns": {
          "votes": "Past `votes` delegated to `account`."
        }
      },
      "getVotes(address)": {
        "params": {
          "account": "The user to check delegated `votes` for."
        },
        "returns": {
          "votes": "Current `votes` delegated to `account`."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "params": {
          "amount": "Amount to mint",
          "recipient": "Address to receive shares"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "now()": {
        "returns": {
          "timePoint": "returns unix epoch timestamp"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setUp(uint8)": {
        "params": {
          "_version": "new version"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Shares",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_15340": {
          "entryPoint": null,
          "id": 15340,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_disableInitializers_4597": {
          "entryPoint": 41,
          "id": 4597,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:608:95",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:95",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "188:229:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "205:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "216:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "198:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "198:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "198:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "239:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "250:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "235:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "235:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "255:2:95",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "228:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "228:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "228:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "278:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "289:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "274:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "274:18:95"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "294:34:95",
                            "type": "",
                            "value": "Initializable: contract is initi"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "267:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "267:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "267:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "349:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "360:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "345:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "345:18:95"
                          },
                          {
                            "hexValue": "616c697a696e67",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "365:9:95",
                            "type": "",
                            "value": "alizing"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "338:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "338:37:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "338:37:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "384:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "396:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "407:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "392:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "392:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "384:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "165:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "179:4:95",
                    "type": ""
                  }
                ],
                "src": "14:403:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "519:87:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "529:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "541:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "552:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "537:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "537:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "529:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "571:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "586:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "594:4:95",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "582:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "582:17:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "564:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "564:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "564:36:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "488:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "499:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "510:4:95",
                    "type": ""
                  }
                ],
                "src": "422:184:95"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}",
          "id": 95,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23 PUSH3 0x29 JUMP JUMPDEST PUSH3 0xEB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND LT ISZERO PUSH3 0xE9 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x290B PUSH3 0x126 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x7F6 ADD MSTORE DUP2 DUP2 PUSH2 0x83F ADD MSTORE DUP2 DUP2 PUSH2 0xABE ADD MSTORE DUP2 DUP2 PUSH2 0xAFE ADD MSTORE PUSH2 0xB8D ADD MSTORE PUSH2 0x290B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x204 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C19A95C GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x9DC29FAC GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x669 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x689 JUMPI DUP1 PUSH4 0xE258A72E EQ PUSH2 0x6A9 JUMPI DUP1 PUSH4 0xE5A2A2A5 EQ PUSH2 0x6C9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x5E9 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x609 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x629 JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x8ABE09F2 EQ PUSH2 0x582 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5B4 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x54D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x19B JUMPI DUP1 PUSH4 0x47F761F5 GT PUSH2 0x16A JUMPI DUP1 PUSH4 0x47F761F5 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3C8A3C6 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xCDFEBFA EQ PUSH2 0x29C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25F PUSH2 0x70A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x79C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD PUSH2 0x237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x2468 JUMP JUMPDEST PUSH2 0x7B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x12 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x7DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x7EB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x8D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x8F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xA37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40F PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x241 JUMP JUMPDEST PUSH2 0x38D PUSH2 0x43E CALLDATASIZE PUSH1 0x4 PUSH2 0x250E JUMP JUMPDEST PUSH2 0xAB3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0xB80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19A SLOAD PUSH2 0x346 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x486 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B1 PUSH2 0x495 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x4E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x504 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x532 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0xC3D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP TIMESTAMP PUSH2 0x237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x104 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25F PUSH2 0xC6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x5E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x604 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xCBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x624 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xCCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x644 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xD54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x664 CALLDATASIZE PUSH1 0x4 PUSH2 0x25FA JUMP JUMPDEST PUSH2 0xD62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x684 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A4 JUMP JUMPDEST PUSH2 0xF58 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x6A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2435 JUMP JUMPDEST PUSH2 0x10BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x6C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x266B JUMP JUMPDEST PUSH2 0x10E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19A SLOAD PUSH2 0x4B1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x705 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x719 SWAP1 PUSH2 0x27FC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x745 SWAP1 PUSH2 0x27FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x792 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x767 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x792 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x775 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7AA DUP2 DUP6 DUP6 PUSH2 0x126F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C4 DUP6 DUP3 DUP6 PUSH2 0x1393 JUMP JUMPDEST PUSH2 0x7CF DUP6 DUP6 DUP6 PUSH2 0x140D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH2 0x15C3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0x83D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x26D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x886 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x2721 JUMP JUMPDEST PUSH2 0x8B5 DUP2 PUSH2 0x15FA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8D1 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1602 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7AA DUP2 DUP6 DUP6 PUSH2 0x8E7 DUP4 DUP4 PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x8F1 SWAP2 SWAP1 PUSH2 0x27B8 JUMP JUMPDEST PUSH2 0x126F JUMP JUMPDEST PUSH1 0x0 TIMESTAMP DUP3 LT PUSH2 0x935 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x859195D195C9B5A5B9959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x95E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x7B0 JUMP JUMPDEST DUP3 PUSH2 0x96C DUP6 PUSH1 0x1 DUP5 SUB PUSH2 0xA60 JUMP JUMPDEST MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x991 JUMPI PUSH2 0x985 DUP5 PUSH1 0x1 DUP4 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP2 POP POP PUSH2 0x7B0 JUMP JUMPDEST DUP3 PUSH2 0x99D DUP6 PUSH1 0x0 PUSH2 0xA60 JUMP JUMPDEST MLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 ADD JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x2 DUP3 DUP3 SUB DIV DUP2 SUB PUSH1 0x0 PUSH2 0x9D8 DUP9 DUP4 PUSH2 0xA60 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF AND DUP8 EQ ISZERO PUSH2 0x9FA JUMPI PUSH1 0x20 ADD MLOAD SWAP5 POP PUSH2 0x7B0 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP8 GT ISZERO PUSH2 0xA11 JUMPI DUP2 SWAP4 POP PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x1 DUP3 SUB SWAP3 POP JUMPDEST POP POP PUSH2 0x9BC JUMP JUMPDEST PUSH2 0xA29 DUP7 DUP4 PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA3F PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB SWAP1 DUP3 ADD GT PUSH2 0xA5C JUMPI PUSH2 0xA5C DUP3 DUP3 PUSH2 0x17DC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH2 0x100 DUP2 MSTORE DUP2 DUP5 KECCAK256 SWAP3 DUP5 MSTORE SWAP2 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD PUSH4 0xFFFFFFFF AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0xAFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x26D5 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB45 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x2721 JUMP JUMPDEST PUSH2 0xB74 DUP3 PUSH2 0x15FA JUMP JUMPDEST PUSH2 0xA5C DUP3 DUP3 PUSH1 0x1 PUSH2 0x1602 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xC20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8D1 CALLER DUP3 PUSH2 0x18A9 JUMP JUMPDEST PUSH2 0xC45 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0xC4F PUSH1 0x0 PUSH2 0x19A0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x719 SWAP1 PUSH2 0x27FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0xCA4 JUMPI PUSH1 0x0 PUSH2 0x7D5 JUMP JUMPDEST PUSH2 0xCB1 DUP4 PUSH1 0x1 DUP4 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xCC4 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0xA5C DUP3 DUP3 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xCDC DUP3 DUP7 PUSH2 0x10BC JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xD3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0xD49 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x126F JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7AA DUP2 DUP6 DUP6 PUSH2 0x140D JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A207369676E61747572652065787069726564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE5B PUSH2 0xE53 PUSH32 0xE3BC21CA2BE03AEEEE0E614BFE98F970C96A05A768F627C50AB81764CB50268 PUSH2 0xDE3 PUSH2 0x70A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDF3 SWAP2 SWAP1 PUSH2 0x2686 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1B33 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x1B81 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xEB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20696E76616C6964207369676E6572202830783029 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP7 EQ PUSH2 0xF1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20696E76616C6964206E6F6E636500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0xF40 DUP4 PUSH2 0x2831 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xF4F DUP2 DUP9 PUSH2 0x18A9 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xFA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xFD7 DUP13 PUSH2 0x1BA9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x1032 DUP3 PUSH2 0x1BD1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1042 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1B81 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x10B0 DUP11 DUP11 DUP11 PUSH2 0x126F JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1108 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0x116B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH1 0xFF DUP1 DUP5 AND SWAP2 SWAP1 SWAP2 OR PUSH2 0x100 OR SWAP1 SWAP2 SSTORE PUSH2 0x19A DUP1 SLOAD SWAP2 DUP5 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x11AC PUSH2 0x1BDE JUMP JUMPDEST PUSH2 0x11B4 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0xFF DUP3 AND DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1201 PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1266 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x8D1 DUP2 PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1332 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x139F DUP5 DUP5 PUSH2 0x10BC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1407 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x13FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x1407 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x126F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1471 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x14D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x14DE DUP4 DUP4 DUP4 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1556 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x15B6 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x15F2 PUSH1 0x65 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH2 0x1C3F JUMP JUMPDEST PUSH2 0x8D1 PUSH2 0x1781 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x163A JUMPI PUSH2 0x1635 DUP4 PUSH2 0x1C88 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x16A3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x16A0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2652 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1706 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1775 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST POP PUSH2 0x1635 DUP4 DUP4 DUP4 PUSH2 0x1D24 JUMP JUMPDEST PUSH2 0x104 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x183E PUSH1 0x0 DUP4 DUP4 PUSH2 0x1C34 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1850 SWAP2 SWAP1 PUSH2 0x27B8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD GT PUSH2 0x18F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x21736861726573 PUSH1 0xC8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND OR SWAP1 SWAP2 SSTORE AND PUSH2 0x1951 DUP2 DUP4 PUSH2 0x194C DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1D49 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x104 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1A53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x1A5F DUP3 PUSH1 0x0 DUP4 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1AD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B0 PUSH2 0x1B40 PUSH2 0x1E2D JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B92 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E64 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B9F DUP2 PUSH2 0x1F28 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B0 PUSH2 0x1B40 PUSH2 0x15C3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH2 0xC4F PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH2 0x1635 DUP4 DUP4 DUP4 PUSH2 0x20A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x1CF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D2D DUP4 PUSH2 0x2152 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x1D3A JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x1635 JUMPI PUSH2 0x1407 DUP4 DUP4 PUSH2 0x2192 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x1D6A JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1635 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1DCC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 PUSH2 0x1DA5 JUMPI PUSH1 0x0 PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x1DB2 DUP6 PUSH1 0x1 DUP5 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH2 0x1DC8 DUP7 DUP5 DUP5 DUP5 PUSH2 0x2286 JUMP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1635 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 PUSH2 0x1E02 JUMPI PUSH1 0x0 PUSH2 0x1E14 JUMP JUMPDEST PUSH2 0x1E0F DUP5 PUSH1 0x1 DUP5 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 POP DUP3 DUP2 ADD PUSH2 0x1E25 DUP6 DUP5 DUP5 DUP5 PUSH2 0x2286 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1E5C PUSH1 0xCC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xCD SLOAD PUSH2 0x1C3F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1E9B JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1F1F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F18 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1F1F JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1F3C JUMPI PUSH2 0x1F3C PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x1F45 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1F59 JUMPI PUSH2 0x1F59 PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1FBB JUMPI PUSH2 0x1FBB PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x2009 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x201D JUMPI PUSH2 0x201D PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x8D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x209D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH2 0xC4F CALLER PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x20E3 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x20EF JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0x211F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0x1635 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x215B DUP2 PUSH2 0x1C88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x21FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2215 SWAP2 SWAP1 PUSH2 0x2686 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2250 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2255 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x227D DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x28AF PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x23AF JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST TIMESTAMP DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x22C6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x100 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x0 NOT DUP9 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x22FE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x100 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x0 NOT DUP9 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD DUP3 SWAP1 SSTORE PUSH2 0x2364 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH4 0xFFFFFFFF DUP4 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x100 DUP5 MSTORE DUP7 DUP2 KECCAK256 DUP12 DUP3 MSTORE DUP5 MSTORE DUP7 DUP2 KECCAK256 SWAP6 MLOAD DUP7 SLOAD PUSH4 0xFFFFFFFF NOT AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 SSTORE SWAP1 MLOAD PUSH1 0x1 SWAP5 DUP6 ADD SSTORE DUP3 MSTORE PUSH2 0x101 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP1 DUP6 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x23BE JUMPI POP DUP2 PUSH2 0x7D5 JUMP JUMPDEST PUSH2 0x7D5 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x23D3 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2404 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2404 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D5 DUP3 PUSH2 0x23ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2451 DUP4 PUSH2 0x23ED JUMP JUMPDEST SWAP2 POP PUSH2 0x245F PUSH1 0x20 DUP5 ADD PUSH2 0x23ED JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x247D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2486 DUP5 PUSH2 0x23ED JUMP JUMPDEST SWAP3 POP PUSH2 0x2494 PUSH1 0x20 DUP6 ADD PUSH2 0x23ED JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x24BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24C8 DUP9 PUSH2 0x23ED JUMP JUMPDEST SWAP7 POP PUSH2 0x24D6 PUSH1 0x20 DUP10 ADD PUSH2 0x23ED JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x24F2 PUSH1 0x80 DUP10 ADD PUSH2 0x2409 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x252A DUP4 PUSH2 0x23ED JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x255B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x256D JUMPI PUSH2 0x256D PUSH2 0x2878 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2595 JUMPI PUSH2 0x2595 PUSH2 0x2878 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x25AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25EC DUP4 PUSH2 0x23ED JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x261C DUP8 PUSH2 0x23ED JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2638 PUSH1 0x60 DUP9 ADD PUSH2 0x2409 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x267D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D5 DUP3 PUSH2 0x2409 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2698 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x27D0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x26C1 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x27CB JUMPI PUSH2 0x27CB PUSH2 0x284C JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27EB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x27D3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1407 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2810 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BCB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2845 JUMPI PUSH2 0x2845 PUSH2 0x284C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212205B 0xDB LOG1 SWAP9 0xED ADDMOD LOG3 DUP11 CREATE2 0x1E SWAP6 0xED SWAP11 SELFBALANCE EXTCODESIZE PUSH11 0x7049D59A345AEA4ED75110 0x2C 0xB1 0xD8 0xD DUP15 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
      "sourceMap": "515:1763:87:-:0;;;1332:4:41;1289:48;;;;664:53:87;;;;;;;;;-1:-1:-1;688:22:87;:20;:22::i;:::-;515:1763;;5928:279:40;5996:13;;;;;;;5995:14;5987:66;;;;-1:-1:-1;;;5987:66:40;;216:2:95;5987:66:40;;;198:21:95;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:95;;;338:37;392:19;;5987:66:40;;;;;;;;6067:12;;6082:15;6067:12;;;:30;6063:138;;;6113:12;:30;;-1:-1:-1;;6113:30:40;6128:15;6113:30;;;;;;6162:28;;564:36:95;;;6162:28:40;;552:2:95;537:18;6162:28:40;;;;;;;6063:138;5928:279::o;422:184:95:-;515:1763:87;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@DOMAIN_SEPARATOR_6171": {
          "entryPoint": 2012,
          "id": 6171,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_EIP712NameHashDelegation_17115": {
          "entryPoint": null,
          "id": 17115,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_EIP712NameHash_7529": {
          "entryPoint": null,
          "id": 7529,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_EIP712VersionHashDelegation_17124": {
          "entryPoint": null,
          "id": 17124,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_EIP712VersionHash_7538": {
          "entryPoint": null,
          "id": 7538,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@__Ownable_init_3953": {
          "entryPoint": 7134,
          "id": 3953,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@__Ownable_init_unchained_3964": {
          "entryPoint": 8310,
          "id": 3964,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@__UUPSUpgradeable_init_4634": {
          "entryPoint": 7181,
          "id": 4634,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_afterTokenTransfer_5558": {
          "entryPoint": null,
          "id": 5558,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_approve_5493": {
          "entryPoint": 4719,
          "id": 5493,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_authorizeUpgrade_15446": {
          "entryPoint": 5626,
          "id": 15446,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_beforeTokenTransfer_15437": {
          "entryPoint": 7220,
          "id": 15437,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_beforeTokenTransfer_16475": {
          "entryPoint": 8358,
          "id": 16475,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_beforeTokenTransfer_5547": {
          "entryPoint": null,
          "id": 5547,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_buildDomainSeparatorDelegation_17090": {
          "entryPoint": null,
          "id": 17090,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_buildDomainSeparator_7504": {
          "entryPoint": 7231,
          "id": 7504,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_burn_5448": {
          "entryPoint": 6643,
          "id": 5448,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_checkOwner_3995": {
          "entryPoint": 6017,
          "id": 3995,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_delegate_16616": {
          "entryPoint": 6313,
          "id": 16616,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_domainSeparatorV4Delegation_17063": {
          "entryPoint": 7725,
          "id": 17063,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_domainSeparatorV4_7477": {
          "entryPoint": 5571,
          "id": 7477,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_functionDelegateCall_4431": {
          "entryPoint": 8594,
          "id": 4431,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getImplementation_4115": {
          "entryPoint": null,
          "id": 4115,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_hashTypedDataV4Delegation_17106": {
          "entryPoint": 6963,
          "id": 17106,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_hashTypedDataV4_7520": {
          "entryPoint": 7121,
          "id": 7520,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_mint_5376": {
          "entryPoint": 6108,
          "id": 5376,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_moveDelegates_16721": {
          "entryPoint": 7497,
          "id": 16721,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_msgSender_6709": {
          "entryPoint": null,
          "id": 6709,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_revert_6525": {
          "entryPoint": null,
          "id": 6525,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_setImplementation_4139": {
          "entryPoint": 7304,
          "id": 4139,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_spendAllowance_5536": {
          "entryPoint": 5011,
          "id": 5536,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_throwError_7087": {
          "entryPoint": 7976,
          "id": 7087,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_transferOwnership_4052": {
          "entryPoint": 6560,
          "id": 4052,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_transfer_5319": {
          "entryPoint": 5133,
          "id": 5319,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_upgradeToAndCallUUPS_4235": {
          "entryPoint": 5634,
          "id": 4235,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_upgradeToAndCall_4182": {
          "entryPoint": 7460,
          "id": 4182,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_upgradeTo_4154": {
          "entryPoint": 8530,
          "id": 4154,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_useNonce_6200": {
          "entryPoint": 7081,
          "id": 6200,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_writeCheckpoint_16796": {
          "entryPoint": 8838,
          "id": 16796,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@allowance_5114": {
          "entryPoint": 4284,
          "id": 5114,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@approve_5139": {
          "entryPoint": 1948,
          "id": 5139,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@baal_15331": {
          "entryPoint": null,
          "id": 15331,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@balanceOf_5071": {
          "entryPoint": null,
          "id": 5071,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@burn_15416": {
          "entryPoint": 3260,
          "id": 15416,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@checkpoints_16390": {
          "entryPoint": null,
          "id": 16390,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@current_6742": {
          "entryPoint": null,
          "id": 6742,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@decimals_5047": {
          "entryPoint": null,
          "id": 5047,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@decreaseAllowance_5242": {
          "entryPoint": 3278,
          "id": 5242,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@delegateBySig_16569": {
          "entryPoint": 3426,
          "id": 16569,
          "parameterSlots": 6,
          "returnSlots": 0
        },
        "@delegate_16488": {
          "entryPoint": 3123,
          "id": 16488,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@delegates_16398": {
          "entryPoint": null,
          "id": 16398,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@delegationNonces_16402": {
          "entryPoint": null,
          "id": 16402,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@getAddressSlot_6824": {
          "entryPoint": null,
          "id": 6824,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getBooleanSlot_6835": {
          "entryPoint": null,
          "id": 6835,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getCheckpoint_16979": {
          "entryPoint": 2656,
          "id": 16979,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getPastVotes_16931": {
          "entryPoint": 2294,
          "id": 16931,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getVotes_16962": {
          "entryPoint": 3198,
          "id": 16962,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@increaseAllowance_5201": {
          "entryPoint": 2260,
          "id": 5201,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@increment_6756": {
          "entryPoint": null,
          "id": 6756,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@isContract_6260": {
          "entryPoint": null,
          "id": 6260,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@mint_15400": {
          "entryPoint": 2615,
          "id": 15400,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@name_5027": {
          "entryPoint": 1802,
          "id": 5027,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@nonces_6160": {
          "entryPoint": 3153,
          "id": 6160,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@now_16806": {
          "entryPoint": null,
          "id": 16806,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@numCheckpoints_16394": {
          "entryPoint": null,
          "id": 16394,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@owner_3981": {
          "entryPoint": null,
          "id": 3981,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@permit_6144": {
          "entryPoint": 3928,
          "id": 6144,
          "parameterSlots": 7,
          "returnSlots": 0
        },
        "@proxiableUUID_4697": {
          "entryPoint": 2944,
          "id": 4697,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@recover_7334": {
          "entryPoint": 7041,
          "id": 7334,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@renounceOwnership_4009": {
          "entryPoint": 3133,
          "id": 4009,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@setUp_15369": {
          "entryPoint": 4327,
          "id": 15369,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@symbol_5037": {
          "entryPoint": 3183,
          "id": 5037,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@toTypedDataHash_7393": {
          "entryPoint": null,
          "id": 7393,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@totalSupply_5057": {
          "entryPoint": null,
          "id": 5057,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@transferFrom_5172": {
          "entryPoint": 1974,
          "id": 5172,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@transferOwnership_4032": {
          "entryPoint": 4601,
          "id": 4032,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@transfer_5096": {
          "entryPoint": 3412,
          "id": 5096,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@tryRecover_7301": {
          "entryPoint": 7780,
          "id": 7301,
          "parameterSlots": 4,
          "returnSlots": 2
        },
        "@upgradeToAndCall_4740": {
          "entryPoint": 2739,
          "id": 4740,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@upgradeTo_4719": {
          "entryPoint": 2027,
          "id": 4719,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@verifyCallResult_6505": {
          "entryPoint": 9135,
          "id": 6505,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@version_15333": {
          "entryPoint": null,
          "id": 15333,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "abi_decode_address": {
          "entryPoint": 9197,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 9242,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_address": {
          "entryPoint": 9269,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_addresst_uint256": {
          "entryPoint": 9320,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
          "entryPoint": 9380,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 7
        },
        "abi_decode_tuple_t_addresst_bytes_memory_ptr": {
          "entryPoint": 9486,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint256": {
          "entryPoint": 9680,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
          "entryPoint": 9722,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 6
        },
        "abi_decode_tuple_t_bytes32_fromMemory": {
          "entryPoint": 9810,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint8": {
          "entryPoint": 9835,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_uint8": {
          "entryPoint": 9225,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 9862,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 7,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_IBaal_$14873__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 9890,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_136d0f69bc85a5c125b5cc368e2880ebdb3c89d4d9828f6476431c386ea60257__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1a23b43d95073d55a7380117ca03cace60cd22fee15d5cb140d51e46236e6872__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 9941,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_4cb95558ae0b72228b49d05e80bd7028a9c838ca660b340001d1e4813e6f39db__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 10017,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_a260e14e85f4708f0331ef286c142a0afbf558408b64fafd24a23e404c959d74__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_a2660ea378538ee5f080b4f3db61aeeacc3724d206c0d153d576feaa81189bbc__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 10093,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_struct$_Checkpoint_$16383_memory_ptr__to_t_struct$_Checkpoint_$16383_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint32_t_uint256__to_t_uint32_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 10168,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "copy_memory_to_memory": {
          "entryPoint": 10192,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "extract_byte_array_length": {
          "entryPoint": 10236,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "increment_t_uint256": {
          "entryPoint": 10289,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 10316,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x12": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 10338,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 10360,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:22753:95",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:95",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "63:124:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "73:29:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "95:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "82:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "82:20:95"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "73:5:95"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "165:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "174:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "177:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "167:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "167:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "167:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "124:5:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "135:5:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "150:3:95",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "155:1:95",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "146:3:95"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "146:11:95"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "159:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "142:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "142:19:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "131:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "131:31:95"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "121:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "121:42:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "114:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "114:50:95"
                      },
                      "nodeType": "YulIf",
                      "src": "111:70:95"
                    }
                  ]
                },
                "name": "abi_decode_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "42:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "53:5:95",
                    "type": ""
                  }
                ],
                "src": "14:173:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "239:109:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "249:29:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "271:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "258:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "258:20:95"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "249:5:95"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "326:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "335:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "338:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "328:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "328:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "328:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "300:5:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "311:5:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "318:4:95",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "307:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "307:16:95"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "297:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "297:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "290:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "290:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "287:55:95"
                    }
                  ]
                },
                "name": "abi_decode_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "218:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "229:5:95",
                    "type": ""
                  }
                ],
                "src": "192:156:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "423:116:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "469:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "478:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "481:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "471:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "471:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "471:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "444:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "453:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "440:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "440:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "465:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "436:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "436:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "433:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "494:39:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "523:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "504:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "504:29:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "494:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "389:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "400:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "412:6:95",
                    "type": ""
                  }
                ],
                "src": "353:186:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "631:173:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "677:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "686:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "689:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "679:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "679:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "679:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "652:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "661:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "648:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "648:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "673:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "644:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "644:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "641:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "702:39:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "731:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "712:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "712:29:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "702:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "750:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "783:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "794:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "779:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "779:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "760:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "760:38:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "750:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "589:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "600:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "612:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "620:6:95",
                    "type": ""
                  }
                ],
                "src": "544:260:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "913:224:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "959:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "968:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "971:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "961:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "961:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "961:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "934:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "943:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "930:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "930:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "955:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "926:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "926:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "923:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "984:39:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1013:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "994:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "994:29:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "984:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1032:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1065:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1076:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1061:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1061:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1042:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1042:38:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1032:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1089:42:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1116:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1127:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1112:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1112:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1099:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1099:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1089:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "863:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "874:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "886:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "894:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "902:6:95",
                    "type": ""
                  }
                ],
                "src": "809:328:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1312:436:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1359:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1368:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1371:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1361:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1361:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1361:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1333:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1342:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1329:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1329:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1354:3:95",
                            "type": "",
                            "value": "224"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1325:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1325:33:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1322:53:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1384:39:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1413:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1394:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1394:29:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1384:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1432:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1465:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1476:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1461:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1461:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1442:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1442:38:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1432:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1489:42:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1516:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1527:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1512:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1512:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1499:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1499:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1489:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1540:42:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1567:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1578:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1563:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1563:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1550:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1550:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "1540:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1591:47:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1622:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1633:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1618:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1618:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "1601:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1601:37:95"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "1591:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1647:43:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1674:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1685:3:95",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1670:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1670:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1657:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1657:33:95"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "1647:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1699:43:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1726:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1737:3:95",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1722:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1722:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1709:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1709:33:95"
                      },
                      "variableNames": [
                        {
                          "name": "value6",
                          "nodeType": "YulIdentifier",
                          "src": "1699:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1230:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1241:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1253:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1261:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1269:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "1277:6:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "1285:6:95",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "1293:6:95",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "1301:6:95",
                    "type": ""
                  }
                ],
                "src": "1142:606:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1849:899:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1895:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1904:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1907:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1897:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1897:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1897:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1870:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1879:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1866:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1866:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1891:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1862:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1862:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1859:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1920:39:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1949:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1930:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1930:29:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1920:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1968:46:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1999:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2010:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1995:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1995:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1982:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1982:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "1972:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2023:28:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2033:18:95",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "2027:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2078:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2087:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2090:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2080:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2080:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2080:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2066:6:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2074:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2063:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2063:14:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2060:34:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2103:32:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2117:9:95"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2128:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2113:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2113:22:95"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "2107:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2183:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2192:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2195:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2185:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2185:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2185:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2162:2:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2166:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2158:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2158:13:95"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2173:7:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2154:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2154:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2147:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2147:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2144:55:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2208:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "2231:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2218:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2218:16:95"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "2212:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2257:22:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "2259:16:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2259:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2259:18:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "2249:2:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2253:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2246:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2246:10:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2243:36:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2288:17:95",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2302:2:95",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "not",
                          "nodeType": "YulIdentifier",
                          "src": "2298:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2298:7:95"
                      },
                      "variables": [
                        {
                          "name": "_4",
                          "nodeType": "YulTypedName",
                          "src": "2292:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2314:23:95",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2334:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2328:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2328:9:95"
                      },
                      "variables": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulTypedName",
                          "src": "2318:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2346:71:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2368:6:95"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "2392:2:95"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2396:4:95",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2388:3:95"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2388:13:95"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "2403:2:95"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2384:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2384:22:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2408:2:95",
                                    "type": "",
                                    "value": "63"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2380:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2380:31:95"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2413:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2376:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2376:40:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2364:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2364:53:95"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "2350:10:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2476:22:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "2478:16:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2478:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2478:18:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2435:10:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2447:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2432:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2432:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2455:10:95"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2467:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2452:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2452:22:95"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "2429:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2429:46:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2426:72:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2514:2:95",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "2518:10:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2507:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2507:22:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2507:22:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2545:6:95"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "2553:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2538:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2538:18:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2538:18:95"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2602:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2611:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2614:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2604:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2604:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2604:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2579:2:95"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2583:2:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2575:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2575:11:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2588:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2571:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2571:20:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2593:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2568:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2568:33:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2565:53:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2644:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2652:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2640:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2640:15:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2661:2:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2665:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2657:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2657:11:95"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "2670:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "2627:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2627:46:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2627:46:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2697:6:95"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2705:2:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2693:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2693:15:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2710:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2689:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2689:24:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2715:1:95",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2682:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2682:35:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2682:35:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2726:16:95",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "2736:6:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2726:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1807:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1818:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1830:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1838:6:95",
                    "type": ""
                  }
                ],
                "src": "1753:995:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2840:167:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2886:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2895:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2898:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2888:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2888:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2888:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2861:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2870:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2857:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2857:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2882:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2853:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2853:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2850:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2911:39:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2940:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "2921:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2921:29:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2911:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2959:42:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2986:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2997:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2982:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2982:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2969:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2969:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2959:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2798:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2809:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2821:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2829:6:95",
                    "type": ""
                  }
                ],
                "src": "2753:254:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3165:378:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3212:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3221:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3224:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3214:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3214:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3214:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3186:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3195:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3182:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3182:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3207:3:95",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3178:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3178:33:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3175:53:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3237:39:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3266:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "3247:18:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3247:29:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3237:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3285:42:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3312:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3323:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3308:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3308:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3295:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3295:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "3285:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3336:42:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3363:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3374:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3359:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3359:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3346:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3346:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "3336:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3387:46:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3418:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3429:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3414:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3414:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "3397:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3397:36:95"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "3387:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3442:43:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3469:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3480:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3465:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3465:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3452:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3452:33:95"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "3442:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3494:43:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3521:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3532:3:95",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3517:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3517:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3504:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3504:33:95"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "3494:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3091:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3102:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3114:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3122:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3130:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "3138:6:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "3146:6:95",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "3154:6:95",
                    "type": ""
                  }
                ],
                "src": "3012:531:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3629:103:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3675:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3684:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3687:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3677:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3677:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3677:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3650:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3659:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3646:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3646:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3671:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3642:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3642:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3639:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3700:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3716:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3710:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3710:16:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3700:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3595:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3606:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3618:6:95",
                    "type": ""
                  }
                ],
                "src": "3548:184:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3805:114:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3851:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3860:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3863:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3853:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3853:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3853:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3826:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3835:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3822:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3822:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3847:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3818:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3818:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3815:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3876:37:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3903:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint8",
                          "nodeType": "YulIdentifier",
                          "src": "3886:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3886:27:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3876:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3771:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3782:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3794:6:95",
                    "type": ""
                  }
                ],
                "src": "3737:182:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4061:137:95",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4071:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4091:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "4085:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4085:13:95"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "4075:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4133:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4141:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4129:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4129:17:95"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4148:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "4153:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "4107:21:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4107:53:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4107:53:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4169:23:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4180:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "4185:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4176:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4176:16:95"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "4169:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "4037:3:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4042:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "4053:3:95",
                    "type": ""
                  }
                ],
                "src": "3924:274:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4342:137:95",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4352:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4372:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "4366:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4366:13:95"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "4356:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4414:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4422:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4410:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4410:17:95"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4429:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "4434:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "4388:21:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4388:53:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4388:53:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4450:23:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4461:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "4466:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4457:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4457:16:95"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "4450:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "4318:3:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4323:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "4334:3:95",
                    "type": ""
                  }
                ],
                "src": "4203:276:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4732:144:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4749:3:95"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4758:3:95",
                                "type": "",
                                "value": "240"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4763:4:95",
                                "type": "",
                                "value": "6401"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4754:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4754:14:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4742:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4742:27:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4742:27:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4789:3:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4794:1:95",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4785:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4785:11:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4798:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4778:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4778:27:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4778:27:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4825:3:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4830:2:95",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4821:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4821:12:95"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "4835:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4814:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4814:28:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4814:28:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4851:19:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4862:3:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4867:2:95",
                            "type": "",
                            "value": "66"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4858:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4858:12:95"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "4851:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "4700:3:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4705:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4713:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "4724:3:95",
                    "type": ""
                  }
                ],
                "src": "4484:392:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4982:102:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4992:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5004:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5015:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5000:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5000:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4992:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5034:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5049:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5065:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5070:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "5061:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5061:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5074:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5057:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5057:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5045:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5045:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5027:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5027:51:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5027:51:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4951:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4962:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4973:4:95",
                    "type": ""
                  }
                ],
                "src": "4881:203:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5184:92:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5194:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5206:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5217:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5202:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5202:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5194:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5236:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5261:6:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "5254:6:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5254:14:95"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5247:6:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5247:22:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5229:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5229:41:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5229:41:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5153:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5164:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5175:4:95",
                    "type": ""
                  }
                ],
                "src": "5089:187:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5382:76:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5392:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5404:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5415:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5400:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5400:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5392:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5434:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5445:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5427:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5427:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5427:25:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5351:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5362:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5373:4:95",
                    "type": ""
                  }
                ],
                "src": "5281:177:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5704:350:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5714:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5726:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5737:3:95",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5722:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5722:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5714:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5757:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5768:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5750:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5750:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5750:25:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5784:29:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5802:3:95",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5807:1:95",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "5798:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5798:11:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5811:1:95",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "5794:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5794:19:95"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5788:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5833:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5844:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5829:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5829:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5853:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5861:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5849:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5849:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5822:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5822:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5822:43:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5885:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5896:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5881:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5881:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "5905:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5913:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5901:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5901:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5874:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5874:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5874:43:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5937:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5948:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5933:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5933:18:95"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "5953:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5926:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5926:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5926:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5980:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5991:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5976:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5976:19:95"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "5997:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5969:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5969:35:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5969:35:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6024:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6035:3:95",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6020:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6020:19:95"
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulIdentifier",
                            "src": "6041:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6013:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6013:35:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6013:35:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5633:9:95",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "5644:6:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "5652:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "5660:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5668:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5676:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5684:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5695:4:95",
                    "type": ""
                  }
                ],
                "src": "5463:591:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6272:276:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6282:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6294:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6305:3:95",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6290:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6290:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6282:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6325:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "6336:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6318:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6318:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6318:25:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6363:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6374:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6359:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6359:18:95"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "6379:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6352:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6352:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6352:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6406:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6417:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6402:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6402:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "6426:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6442:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6447:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6438:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6438:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6451:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6434:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6434:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6422:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6422:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6395:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6395:60:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6395:60:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6475:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6486:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6471:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6471:18:95"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "6491:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6464:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6464:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6464:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6518:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6529:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6514:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6514:19:95"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "6535:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6507:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6507:35:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6507:35:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6209:9:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "6220:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "6228:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "6236:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6244:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6252:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6263:4:95",
                    "type": ""
                  }
                ],
                "src": "6059:489:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6766:276:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6776:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6788:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6799:3:95",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6784:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6784:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6776:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6819:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "6830:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6812:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6812:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6812:25:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6857:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6868:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6853:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6853:18:95"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "6873:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6846:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6846:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6846:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6900:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6911:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6896:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6896:18:95"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "6916:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6889:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6889:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6889:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6943:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6954:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6939:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6939:18:95"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "6959:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6932:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6932:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6932:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6986:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6997:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6982:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6982:19:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "7007:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7023:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7028:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7019:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7019:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7032:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7015:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7015:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7003:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7003:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6975:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6975:61:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6975:61:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6703:9:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "6714:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "6722:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "6730:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6738:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6746:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6757:4:95",
                    "type": ""
                  }
                ],
                "src": "6553:489:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7228:217:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7238:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7250:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7261:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7246:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7246:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7238:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7281:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "7292:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7274:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7274:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7274:25:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7319:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7330:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7315:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7315:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7339:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7347:4:95",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7335:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7335:17:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7308:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7308:45:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7308:45:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7373:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7384:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7369:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7369:18:95"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "7389:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7362:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7362:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7362:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7416:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7427:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7412:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7412:18:95"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "7432:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7405:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7405:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7405:34:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7173:9:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "7184:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "7192:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7200:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7208:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7219:4:95",
                    "type": ""
                  }
                ],
                "src": "7047:398:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7566:102:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7576:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7588:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7599:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7584:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7584:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7576:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7618:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7633:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7649:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7654:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7645:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7645:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7658:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7641:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7641:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7629:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7629:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7611:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7611:51:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7611:51:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_IBaal_$14873__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7535:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7546:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7557:4:95",
                    "type": ""
                  }
                ],
                "src": "7450:218:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7794:262:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7811:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7822:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7804:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7804:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7804:21:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7834:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "7854:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "7848:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7848:13:95"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "7838:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7881:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7892:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7877:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7877:18:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "7897:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7870:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7870:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7870:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7939:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7947:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7935:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7935:15:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7956:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7967:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7952:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7952:18:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "7972:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "7913:21:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7913:66:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7913:66:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7988:62:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8004:9:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "8023:6:95"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8031:2:95",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8019:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8019:15:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8040:2:95",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8036:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8036:7:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8015:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8015:29:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8000:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8000:45:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8047:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7996:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7996:54:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7988:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7763:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7774:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7785:4:95",
                    "type": ""
                  }
                ],
                "src": "7673:383:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8235:174:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8252:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8263:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8245:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8245:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8245:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8286:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8297:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8282:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8282:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8302:2:95",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8275:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8275:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8275:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8325:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8336:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8321:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8321:18:95"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8341:26:95",
                            "type": "",
                            "value": "ECDSA: invalid signature"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8314:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8314:54:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8314:54:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8377:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8389:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8400:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8385:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8385:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8377:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8212:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8226:4:95",
                    "type": ""
                  }
                ],
                "src": "8061:348:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8588:225:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8605:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8616:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8598:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8598:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8598:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8639:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8650:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8635:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8635:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8655:2:95",
                            "type": "",
                            "value": "35"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8628:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8628:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8628:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8678:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8689:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8674:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8674:18:95"
                          },
                          {
                            "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8694:34:95",
                            "type": "",
                            "value": "ERC20: transfer to the zero addr"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8667:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8667:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8667:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8749:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8760:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8745:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8745:18:95"
                          },
                          {
                            "hexValue": "657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8765:5:95",
                            "type": "",
                            "value": "ess"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8738:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8738:33:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8738:33:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8780:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8792:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8803:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8788:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8788:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8780:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8565:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8579:4:95",
                    "type": ""
                  }
                ],
                "src": "8414:399:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8992:179:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9009:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9020:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9002:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9002:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9002:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9043:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9054:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9039:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9039:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9059:2:95",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9032:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9032:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9032:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9082:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9093:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9078:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9078:18:95"
                          },
                          {
                            "hexValue": "4552433230566f7465733a207369676e61747572652065787069726564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9098:31:95",
                            "type": "",
                            "value": "ERC20Votes: signature expired"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9071:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9071:59:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9071:59:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9139:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9151:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9162:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9147:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9147:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9139:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_136d0f69bc85a5c125b5cc368e2880ebdb3c89d4d9828f6476431c386ea60257__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8969:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8983:4:95",
                    "type": ""
                  }
                ],
                "src": "8818:353:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9350:224:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9367:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9378:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9360:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9360:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9360:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9401:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9412:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9397:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9397:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9417:2:95",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9390:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9390:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9390:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9440:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9451:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9436:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9436:18:95"
                          },
                          {
                            "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9456:34:95",
                            "type": "",
                            "value": "ERC20: burn amount exceeds balan"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9429:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9429:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9429:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9511:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9522:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9507:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9507:18:95"
                          },
                          {
                            "hexValue": "6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9527:4:95",
                            "type": "",
                            "value": "ce"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9500:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9500:32:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9500:32:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9541:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9553:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9564:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9549:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9549:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9541:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9327:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9341:4:95",
                    "type": ""
                  }
                ],
                "src": "9176:398:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9753:181:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9770:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9781:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9763:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9763:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9763:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9804:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9815:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9800:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9800:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9820:2:95",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9793:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9793:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9793:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9843:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9854:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9839:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9839:18:95"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9859:33:95",
                            "type": "",
                            "value": "ECDSA: invalid signature length"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9832:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9832:61:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9832:61:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9902:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9914:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9925:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9910:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9910:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9902:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9730:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9744:4:95",
                    "type": ""
                  }
                ],
                "src": "9579:355:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10113:175:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10130:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10141:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10123:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10123:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10123:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10164:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10175:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10160:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10160:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10180:2:95",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10153:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10153:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10153:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10203:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10214:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10199:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10199:18:95"
                          },
                          {
                            "hexValue": "4552433230566f7465733a20696e76616c6964206e6f6e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10219:27:95",
                            "type": "",
                            "value": "ERC20Votes: invalid nonce"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10192:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10192:55:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10192:55:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10256:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10268:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10279:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10264:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10264:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10256:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1a23b43d95073d55a7380117ca03cace60cd22fee15d5cb140d51e46236e6872__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10090:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10104:4:95",
                    "type": ""
                  }
                ],
                "src": "9939:349:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10467:228:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10484:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10495:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10477:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10477:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10477:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10518:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10529:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10514:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10514:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10534:2:95",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10507:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10507:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10507:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10557:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10568:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10553:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10553:18:95"
                          },
                          {
                            "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10573:34:95",
                            "type": "",
                            "value": "Ownable: new owner is the zero a"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10546:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10546:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10546:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10628:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10639:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10624:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10624:18:95"
                          },
                          {
                            "hexValue": "646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10644:8:95",
                            "type": "",
                            "value": "ddress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10617:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10617:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10617:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10662:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10674:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10685:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10670:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10670:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10662:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10444:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10458:4:95",
                    "type": ""
                  }
                ],
                "src": "10293:402:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10874:224:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10891:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10902:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10884:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10884:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10884:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10925:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10936:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10921:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10921:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10941:2:95",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10914:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10914:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10914:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10964:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10975:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10960:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10960:18:95"
                          },
                          {
                            "hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10980:34:95",
                            "type": "",
                            "value": "ERC20: approve to the zero addre"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10953:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10953:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10953:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11035:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11046:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11031:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11031:18:95"
                          },
                          {
                            "hexValue": "7373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11051:4:95",
                            "type": "",
                            "value": "ss"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11024:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11024:32:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11024:32:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11065:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11077:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11088:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11073:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11073:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11065:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10851:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10865:4:95",
                    "type": ""
                  }
                ],
                "src": "10700:398:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11277:234:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11294:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11305:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11287:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11287:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11287:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11328:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11339:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11324:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11324:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11344:2:95",
                            "type": "",
                            "value": "44"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11317:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11317:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11317:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11367:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11378:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11363:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11363:18:95"
                          },
                          {
                            "hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11383:34:95",
                            "type": "",
                            "value": "Function must be called through "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11356:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11356:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11356:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11438:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11449:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11434:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11434:18:95"
                          },
                          {
                            "hexValue": "64656c656761746563616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11454:14:95",
                            "type": "",
                            "value": "delegatecall"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11427:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11427:42:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11427:42:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11478:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11490:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11501:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11486:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11486:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11478:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11254:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11268:4:95",
                    "type": ""
                  }
                ],
                "src": "11103:408:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11690:179:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11707:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11718:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11700:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11700:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11700:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11741:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11752:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11737:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11737:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11757:2:95",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11730:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11730:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11730:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11780:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11791:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11776:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11776:18:95"
                          },
                          {
                            "hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11796:31:95",
                            "type": "",
                            "value": "ERC20: insufficient allowance"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11769:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11769:59:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11769:59:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11837:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11849:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11860:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11845:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11845:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11837:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11667:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11681:4:95",
                    "type": ""
                  }
                ],
                "src": "11516:353:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12048:179:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12065:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12076:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12058:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12058:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12058:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12099:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12110:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12095:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12095:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12115:2:95",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12088:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12088:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12088:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12138:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12149:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12134:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12134:18:95"
                          },
                          {
                            "hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12154:31:95",
                            "type": "",
                            "value": "ERC20Permit: expired deadline"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12127:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12127:59:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12127:59:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12195:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12207:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12218:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12203:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12203:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12195:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12025:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12039:4:95",
                    "type": ""
                  }
                ],
                "src": "11874:353:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12406:228:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12423:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12434:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12416:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12416:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12416:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12457:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12468:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12453:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12453:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12473:2:95",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12446:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12446:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12446:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12496:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12507:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12492:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12492:18:95"
                          },
                          {
                            "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12512:34:95",
                            "type": "",
                            "value": "ERC20: transfer amount exceeds b"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12485:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12485:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12485:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12567:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12578:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12563:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12563:18:95"
                          },
                          {
                            "hexValue": "616c616e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12583:8:95",
                            "type": "",
                            "value": "alance"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12556:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12556:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12556:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12601:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12613:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12624:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12609:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12609:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12601:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12383:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12397:4:95",
                    "type": ""
                  }
                ],
                "src": "12232:402:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12813:182:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12830:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12841:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12823:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12823:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12823:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12864:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12875:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12860:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12860:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12880:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12853:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12853:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12853:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12903:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12914:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12899:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12899:18:95"
                          },
                          {
                            "hexValue": "4552433230566f7465733a20696e76616c6964207369676e6572202830783029",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12919:34:95",
                            "type": "",
                            "value": "ERC20Votes: invalid signer (0x0)"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12892:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12892:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12892:62:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12963:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12975:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12986:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12971:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12971:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12963:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_4cb95558ae0b72228b49d05e80bd7028a9c838ca660b340001d1e4813e6f39db__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12790:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12804:4:95",
                    "type": ""
                  }
                ],
                "src": "12639:356:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13174:224:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13191:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13202:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13184:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13184:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13184:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13225:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13236:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13221:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13221:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13241:2:95",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13214:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13214:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13214:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13264:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13275:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13260:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13260:18:95"
                          },
                          {
                            "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13280:34:95",
                            "type": "",
                            "value": "ECDSA: invalid signature 's' val"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13253:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13253:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13253:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13335:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13346:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13331:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13331:18:95"
                          },
                          {
                            "hexValue": "7565",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13351:4:95",
                            "type": "",
                            "value": "ue"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13324:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13324:32:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13324:32:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13365:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13377:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13388:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13373:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13373:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13365:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13151:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13165:4:95",
                    "type": ""
                  }
                ],
                "src": "13000:398:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13577:234:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13594:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13605:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13587:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13587:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13587:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13628:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13639:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13624:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13624:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13644:2:95",
                            "type": "",
                            "value": "44"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13617:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13617:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13617:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13667:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13678:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13663:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13663:18:95"
                          },
                          {
                            "hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13683:34:95",
                            "type": "",
                            "value": "Function must be called through "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13656:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13656:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13656:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13738:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13749:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13734:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13734:18:95"
                          },
                          {
                            "hexValue": "6163746976652070726f7879",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13754:14:95",
                            "type": "",
                            "value": "active proxy"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13727:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13727:42:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13727:42:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13778:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13790:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13801:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13786:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13786:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13778:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13554:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13568:4:95",
                    "type": ""
                  }
                ],
                "src": "13403:408:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13990:246:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14007:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14018:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14000:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14000:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14000:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14041:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14052:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14037:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14037:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14057:2:95",
                            "type": "",
                            "value": "56"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14030:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14030:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14030:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14080:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14091:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14076:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14076:18:95"
                          },
                          {
                            "hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14096:34:95",
                            "type": "",
                            "value": "UUPSUpgradeable: must not be cal"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14069:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14069:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14069:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14151:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14162:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14147:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14147:18:95"
                          },
                          {
                            "hexValue": "6c6564207468726f7567682064656c656761746563616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14167:26:95",
                            "type": "",
                            "value": "led through delegatecall"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14140:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14140:54:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14140:54:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14203:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14215:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14226:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14211:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14211:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14203:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13967:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13981:4:95",
                    "type": ""
                  }
                ],
                "src": "13816:420:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14415:231:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14432:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14443:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14425:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14425:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14425:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14466:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14477:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14462:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14462:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14482:2:95",
                            "type": "",
                            "value": "41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14455:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14455:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14455:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14505:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14516:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14501:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14501:18:95"
                          },
                          {
                            "hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f78",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14521:34:95",
                            "type": "",
                            "value": "ERC1967Upgrade: unsupported prox"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14494:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14494:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14494:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14576:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14587:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14572:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14572:18:95"
                          },
                          {
                            "hexValue": "6961626c6555554944",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14592:11:95",
                            "type": "",
                            "value": "iableUUID"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14565:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14565:39:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14565:39:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14613:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14625:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14636:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14621:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14621:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14613:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14392:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14406:4:95",
                    "type": ""
                  }
                ],
                "src": "14241:405:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14825:236:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14842:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14853:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14835:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14835:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14835:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14876:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14887:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14872:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14872:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14892:2:95",
                            "type": "",
                            "value": "46"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14865:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14865:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14865:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14915:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14926:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14911:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14911:18:95"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14931:34:95",
                            "type": "",
                            "value": "Initializable: contract is alrea"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14904:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14904:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14904:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14986:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14997:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14982:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14982:18:95"
                          },
                          {
                            "hexValue": "647920696e697469616c697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15002:16:95",
                            "type": "",
                            "value": "dy initialized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14975:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14975:44:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14975:44:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15028:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15040:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15051:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15036:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15036:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15028:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14802:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14816:4:95",
                    "type": ""
                  }
                ],
                "src": "14651:410:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15240:236:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15257:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15268:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15250:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15250:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15250:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15291:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15302:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15287:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15287:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15307:2:95",
                            "type": "",
                            "value": "46"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15280:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15280:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15280:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15330:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15341:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15326:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15326:18:95"
                          },
                          {
                            "hexValue": "45524331393637557067726164653a206e657720696d706c656d656e74617469",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15346:34:95",
                            "type": "",
                            "value": "ERC1967Upgrade: new implementati"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15319:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15319:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15319:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15401:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15412:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15397:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15397:18:95"
                          },
                          {
                            "hexValue": "6f6e206973206e6f742055555053",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15417:16:95",
                            "type": "",
                            "value": "on is not UUPS"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15390:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15390:44:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15390:44:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15443:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15455:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15466:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15451:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15451:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15443:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15217:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15231:4:95",
                    "type": ""
                  }
                ],
                "src": "15066:410:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15655:180:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15672:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15683:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15665:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15665:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15665:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15706:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15717:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15702:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15702:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15722:2:95",
                            "type": "",
                            "value": "30"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15695:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15695:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15695:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15745:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15756:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15741:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15741:18:95"
                          },
                          {
                            "hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15761:32:95",
                            "type": "",
                            "value": "ERC20Permit: invalid signature"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15734:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15734:60:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15734:60:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15803:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15815:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15826:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15811:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15811:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15803:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15632:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15646:4:95",
                    "type": ""
                  }
                ],
                "src": "15481:354:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16014:235:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16031:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16042:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16024:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16024:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16024:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16065:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16076:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16061:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16061:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16081:2:95",
                            "type": "",
                            "value": "45"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16054:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16054:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16054:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16104:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16115:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16100:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16100:18:95"
                          },
                          {
                            "hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16120:34:95",
                            "type": "",
                            "value": "ERC1967: new implementation is n"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16093:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16093:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16093:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16175:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16186:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16171:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16171:18:95"
                          },
                          {
                            "hexValue": "6f74206120636f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16191:15:95",
                            "type": "",
                            "value": "ot a contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16164:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16164:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16164:43:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16216:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16228:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16239:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16224:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16224:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16216:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15991:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16005:4:95",
                    "type": ""
                  }
                ],
                "src": "15840:409:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16428:182:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16445:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16456:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16438:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16438:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16438:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16479:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16490:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16475:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16475:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16495:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16468:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16468:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16468:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16518:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16529:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16514:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16514:18:95"
                          },
                          {
                            "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16534:34:95",
                            "type": "",
                            "value": "Ownable: caller is not the owner"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16507:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16507:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16507:62:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16578:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16590:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16601:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16586:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16586:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16578:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16405:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16419:4:95",
                    "type": ""
                  }
                ],
                "src": "16254:356:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16789:156:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16806:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16817:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16799:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16799:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16799:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16840:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16851:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16836:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16836:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16856:1:95",
                            "type": "",
                            "value": "7"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16829:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16829:29:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16829:29:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16878:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16889:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16874:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16874:18:95"
                          },
                          {
                            "hexValue": "21736861726573",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16894:9:95",
                            "type": "",
                            "value": "!shares"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16867:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16867:37:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16867:37:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16913:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16925:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16936:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16921:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16921:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16913:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a260e14e85f4708f0331ef286c142a0afbf558408b64fafd24a23e404c959d74__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16766:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16780:4:95",
                    "type": ""
                  }
                ],
                "src": "16615:330:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17124:161:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17141:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17152:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17134:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17134:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17134:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17175:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17186:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17171:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17171:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17191:2:95",
                            "type": "",
                            "value": "11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17164:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17164:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17164:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17214:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17225:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17210:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17210:18:95"
                          },
                          {
                            "hexValue": "2164657465726d696e6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17230:13:95",
                            "type": "",
                            "value": "!determined"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17203:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17203:41:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17203:41:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17253:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17265:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17276:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17261:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17261:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17253:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a2660ea378538ee5f080b4f3db61aeeacc3724d206c0d153d576feaa81189bbc__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17101:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17115:4:95",
                    "type": ""
                  }
                ],
                "src": "16950:335:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17464:223:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17481:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17492:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17474:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17474:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17474:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17515:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17526:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17511:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17511:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17531:2:95",
                            "type": "",
                            "value": "33"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17504:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17504:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17504:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17554:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17565:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17550:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17550:18:95"
                          },
                          {
                            "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17570:34:95",
                            "type": "",
                            "value": "ERC20: burn from the zero addres"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17543:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17543:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17543:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17625:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17636:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17621:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17621:18:95"
                          },
                          {
                            "hexValue": "73",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17641:3:95",
                            "type": "",
                            "value": "s"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17614:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17614:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17614:31:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17654:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17666:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17677:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17662:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17662:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17654:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17441:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17455:4:95",
                    "type": ""
                  }
                ],
                "src": "17290:397:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17866:228:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17883:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17894:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17876:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17876:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17876:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17917:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17928:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17913:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17913:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17933:2:95",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17906:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17906:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17906:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17956:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17967:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17952:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17952:18:95"
                          },
                          {
                            "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17972:34:95",
                            "type": "",
                            "value": "Address: delegate call to non-co"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17945:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17945:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17945:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18027:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18038:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18023:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18023:18:95"
                          },
                          {
                            "hexValue": "6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18043:8:95",
                            "type": "",
                            "value": "ntract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18016:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18016:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18016:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18061:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18073:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18084:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18069:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18069:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18061:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17843:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17857:4:95",
                    "type": ""
                  }
                ],
                "src": "17692:402:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18273:227:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18290:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18301:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18283:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18283:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18283:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18324:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18335:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18320:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18320:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18340:2:95",
                            "type": "",
                            "value": "37"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18313:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18313:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18313:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18363:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18374:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18359:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18359:18:95"
                          },
                          {
                            "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18379:34:95",
                            "type": "",
                            "value": "ERC20: transfer from the zero ad"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18352:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18352:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18352:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18434:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18445:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18430:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18430:18:95"
                          },
                          {
                            "hexValue": "6472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18450:7:95",
                            "type": "",
                            "value": "dress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18423:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18423:35:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18423:35:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18467:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18479:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18490:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18475:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18475:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18467:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18250:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18264:4:95",
                    "type": ""
                  }
                ],
                "src": "18099:401:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18679:226:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18696:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18707:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18689:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18689:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18689:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18730:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18741:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18726:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18726:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18746:2:95",
                            "type": "",
                            "value": "36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18719:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18719:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18719:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18769:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18780:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18765:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18765:18:95"
                          },
                          {
                            "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18785:34:95",
                            "type": "",
                            "value": "ERC20: approve from the zero add"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18758:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18758:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18758:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18840:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18851:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18836:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18836:18:95"
                          },
                          {
                            "hexValue": "72657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18856:6:95",
                            "type": "",
                            "value": "ress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18829:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18829:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18829:34:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18872:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18884:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18895:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18880:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18880:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18872:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18656:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18670:4:95",
                    "type": ""
                  }
                ],
                "src": "18505:400:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19084:233:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19101:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19112:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19094:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19094:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19094:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19135:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19146:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19131:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19131:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19151:2:95",
                            "type": "",
                            "value": "43"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19124:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19124:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19124:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19174:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19185:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19170:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19170:18:95"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19190:34:95",
                            "type": "",
                            "value": "Initializable: contract is not i"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19163:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19163:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19163:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19245:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19256:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19241:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19241:18:95"
                          },
                          {
                            "hexValue": "6e697469616c697a696e67",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19261:13:95",
                            "type": "",
                            "value": "nitializing"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19234:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19234:41:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19234:41:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19284:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19296:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19307:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19292:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19292:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19284:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19061:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19075:4:95",
                    "type": ""
                  }
                ],
                "src": "18910:407:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19496:227:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19513:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19524:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19506:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19506:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19506:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19547:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19558:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19543:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19543:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19563:2:95",
                            "type": "",
                            "value": "37"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19536:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19536:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19536:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19586:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19597:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19582:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19582:18:95"
                          },
                          {
                            "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19602:34:95",
                            "type": "",
                            "value": "ERC20: decreased allowance below"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19575:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19575:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19575:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19657:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19668:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19653:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19653:18:95"
                          },
                          {
                            "hexValue": "207a65726f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19673:7:95",
                            "type": "",
                            "value": " zero"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19646:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19646:35:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19646:35:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19690:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19702:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19713:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19698:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19698:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19690:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19473:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19487:4:95",
                    "type": ""
                  }
                ],
                "src": "19322:401:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19902:181:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19919:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19930:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19912:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19912:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19912:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19953:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19964:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19949:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19949:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19969:2:95",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19942:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19942:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19942:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19992:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20003:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19988:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19988:18:95"
                          },
                          {
                            "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20008:33:95",
                            "type": "",
                            "value": "ERC20: mint to the zero address"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19981:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19981:61:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19981:61:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20051:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20063:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20074:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20059:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20059:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20051:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19879:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19893:4:95",
                    "type": ""
                  }
                ],
                "src": "19728:355:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20247:163:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "20257:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20269:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20280:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20265:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20265:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20257:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20299:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20320:6:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "20314:5:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20314:13:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20329:10:95",
                                "type": "",
                                "value": "0xffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "20310:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20310:30:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20292:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20292:49:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20292:49:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20361:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20372:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20357:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20357:20:95"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20389:6:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20397:4:95",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20385:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20385:17:95"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20379:5:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20379:24:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20350:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20350:54:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20350:54:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_struct$_Checkpoint_$16383_memory_ptr__to_t_struct$_Checkpoint_$16383_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20216:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "20227:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20238:4:95",
                    "type": ""
                  }
                ],
                "src": "20088:322:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20516:76:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "20526:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20538:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20549:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20534:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20534:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20526:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20568:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "20579:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20561:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20561:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20561:25:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20485:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "20496:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20507:4:95",
                    "type": ""
                  }
                ],
                "src": "20415:177:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20726:119:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "20736:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20748:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20759:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20744:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20744:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20736:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20778:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "20789:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20771:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20771:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20771:25:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20816:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20827:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20812:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20812:18:95"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "20832:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20805:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20805:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20805:34:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20687:9:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "20698:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "20706:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20717:4:95",
                    "type": ""
                  }
                ],
                "src": "20597:248:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20977:136:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "20987:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20999:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21010:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20995:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20995:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20987:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21029:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21044:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21052:10:95",
                                "type": "",
                                "value": "0xffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21040:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21040:23:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21022:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21022:42:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21022:42:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21084:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21095:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21080:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21080:18:95"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "21100:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21073:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21073:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21073:34:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint32_t_uint256__to_t_uint32_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20938:9:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "20949:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "20957:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20968:4:95",
                    "type": ""
                  }
                ],
                "src": "20850:263:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21215:87:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "21225:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21237:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21248:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21233:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21233:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "21225:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21267:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21282:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21290:4:95",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21278:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21278:17:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21260:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21260:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21260:36:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21184:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "21195:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21206:4:95",
                    "type": ""
                  }
                ],
                "src": "21118:184:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21355:80:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "21382:22:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "21384:16:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21384:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "21384:18:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "21371:1:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21378:1:95"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "21374:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21374:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "21368:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21368:13:95"
                      },
                      "nodeType": "YulIf",
                      "src": "21365:39:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "21413:16:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "21424:1:95"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "21427:1:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21420:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21420:9:95"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "21413:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "21338:1:95",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "21341:1:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "21347:3:95",
                    "type": ""
                  }
                ],
                "src": "21307:128:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21493:205:95",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "21503:10:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "21512:1:95",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "21507:1:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "21572:63:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "21597:3:95"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "21602:1:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "21593:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21593:11:95"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "21616:3:95"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "21621:1:95"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "21612:3:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21612:11:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "21606:5:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21606:18:95"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "21586:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21586:39:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "21586:39:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "21533:1:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "21536:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "21530:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21530:13:95"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "21544:19:95",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "21546:15:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "21555:1:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "21558:2:95",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "21551:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21551:10:95"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "21546:1:95"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "21526:3:95",
                        "statements": []
                      },
                      "src": "21522:113:95"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "21661:31:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "21674:3:95"
                                    },
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "21679:6:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "21670:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21670:16:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "21688:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "21663:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21663:27:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "21663:27:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "21650:1:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "21653:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "21647:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21647:13:95"
                      },
                      "nodeType": "YulIf",
                      "src": "21644:48:95"
                    }
                  ]
                },
                "name": "copy_memory_to_memory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "21471:3:95",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "21476:3:95",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "21481:6:95",
                    "type": ""
                  }
                ],
                "src": "21440:258:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21758:325:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "21768:22:95",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21782:1:95",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "21785:4:95"
                          }
                        ],
                        "functionName": {
                          "name": "shr",
                          "nodeType": "YulIdentifier",
                          "src": "21778:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21778:12:95"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "21768:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "21799:38:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "21829:4:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21835:1:95",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "21825:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21825:12:95"
                      },
                      "variables": [
                        {
                          "name": "outOfPlaceEncoding",
                          "nodeType": "YulTypedName",
                          "src": "21803:18:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "21876:31:95",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "21878:27:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "21892:6:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "21900:4:95",
                                  "type": "",
                                  "value": "0x7f"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "21888:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21888:17:95"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "21878:6:95"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "21856:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "21849:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21849:26:95"
                      },
                      "nodeType": "YulIf",
                      "src": "21846:61:95"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "21966:111:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "21987:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21994:3:95",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21999:10:95",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "21990:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21990:20:95"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "21980:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21980:31:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "21980:31:95"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "22031:1:95",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "22034:4:95",
                                  "type": "",
                                  "value": "0x22"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "22024:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "22024:15:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "22024:15:95"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "22059:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "22062:4:95",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "22052:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "22052:15:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "22052:15:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "21922:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "21945:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21953:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "21942:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21942:14:95"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "21919:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21919:38:95"
                      },
                      "nodeType": "YulIf",
                      "src": "21916:161:95"
                    }
                  ]
                },
                "name": "extract_byte_array_length",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "21738:4:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "21747:6:95",
                    "type": ""
                  }
                ],
                "src": "21703:380:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22135:88:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "22166:22:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "22168:16:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "22168:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "22168:18:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "22151:5:95"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22162:1:95",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "22158:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22158:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "22148:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22148:17:95"
                      },
                      "nodeType": "YulIf",
                      "src": "22145:43:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "22197:20:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "22208:5:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22215:1:95",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22204:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22204:13:95"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "22197:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "22117:5:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "22127:3:95",
                    "type": ""
                  }
                ],
                "src": "22088:135:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22260:95:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22277:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22284:3:95",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22289:10:95",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "22280:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22280:20:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22270:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22270:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22270:31:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22317:1:95",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22320:4:95",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22310:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22310:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22310:15:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22341:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22344:4:95",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "22334:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22334:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22334:15:95"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "22228:127:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22392:95:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22409:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22416:3:95",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22421:10:95",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "22412:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22412:20:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22402:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22402:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22402:31:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22449:1:95",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22452:4:95",
                            "type": "",
                            "value": "0x12"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22442:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22442:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22442:15:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22473:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22476:4:95",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "22466:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22466:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22466:15:95"
                    }
                  ]
                },
                "name": "panic_error_0x12",
                "nodeType": "YulFunctionDefinition",
                "src": "22360:127:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22524:95:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22541:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22548:3:95",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22553:10:95",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "22544:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22544:20:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22534:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22534:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22534:31:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22581:1:95",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22584:4:95",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22574:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22574:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22574:15:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22605:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22608:4:95",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "22598:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22598:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22598:15:95"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "22492:127:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22656:95:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22673:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22680:3:95",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22685:10:95",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "22676:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22676:20:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22666:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22666:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22666:31:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22713:1:95",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22716:4:95",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22706:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22706:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22706:15:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22737:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22740:4:95",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "22730:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22730:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22730:15:95"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "22624:127:95"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint8(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint8(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, shl(240, 6401))\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_contract$_IBaal_$14873__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_136d0f69bc85a5c125b5cc368e2880ebdb3c89d4d9828f6476431c386ea60257__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Votes: signature expired\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1a23b43d95073d55a7380117ca03cace60cd22fee15d5cb140d51e46236e6872__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC20Votes: invalid nonce\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Permit: expired deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4cb95558ae0b72228b49d05e80bd7028a9c838ca660b340001d1e4813e6f39db__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC20Votes: invalid signer (0x0)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC20Permit: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a260e14e85f4708f0331ef286c142a0afbf558408b64fafd24a23e404c959d74__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"!shares\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a2660ea378538ee5f080b4f3db61aeeacc3724d206c0d153d576feaa81189bbc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"!determined\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_Checkpoint_$16383_memory_ptr__to_t_struct$_Checkpoint_$16383_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(mload(value0), 0xffffffff))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint32_t_uint256__to_t_uint32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
          "id": 95,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "4647": [
          {
            "length": 32,
            "start": 2038
          },
          {
            "length": 32,
            "start": 2111
          },
          {
            "length": 32,
            "start": 2750
          },
          {
            "length": 32,
            "start": 2814
          },
          {
            "length": 32,
            "start": 2957
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x204 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C19A95C GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x9DC29FAC GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x669 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x689 JUMPI DUP1 PUSH4 0xE258A72E EQ PUSH2 0x6A9 JUMPI DUP1 PUSH4 0xE5A2A2A5 EQ PUSH2 0x6C9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x5E9 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x609 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x629 JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x8ABE09F2 EQ PUSH2 0x582 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5B4 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x54D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x19B JUMPI DUP1 PUSH4 0x47F761F5 GT PUSH2 0x16A JUMPI DUP1 PUSH4 0x47F761F5 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3C8A3C6 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xCDFEBFA EQ PUSH2 0x29C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25F PUSH2 0x70A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x79C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD PUSH2 0x237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x2468 JUMP JUMPDEST PUSH2 0x7B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x12 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x7DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x7EB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x8D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x8F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xA37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40F PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x241 JUMP JUMPDEST PUSH2 0x38D PUSH2 0x43E CALLDATASIZE PUSH1 0x4 PUSH2 0x250E JUMP JUMPDEST PUSH2 0xAB3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0xB80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19A SLOAD PUSH2 0x346 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x486 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B1 PUSH2 0x495 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x241 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x4E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x504 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x532 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0xC3D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP TIMESTAMP PUSH2 0x237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x104 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25F PUSH2 0xC6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x5E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x604 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xCBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x624 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xCCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x644 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0xD54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x664 CALLDATASIZE PUSH1 0x4 PUSH2 0x25FA JUMP JUMPDEST PUSH2 0xD62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x684 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A4 JUMP JUMPDEST PUSH2 0xF58 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x6A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2435 JUMP JUMPDEST PUSH2 0x10BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x6C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x266B JUMP JUMPDEST PUSH2 0x10E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19A SLOAD PUSH2 0x4B1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0x705 CALLDATASIZE PUSH1 0x4 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x719 SWAP1 PUSH2 0x27FC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x745 SWAP1 PUSH2 0x27FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x792 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x767 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x792 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x775 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7AA DUP2 DUP6 DUP6 PUSH2 0x126F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C4 DUP6 DUP3 DUP6 PUSH2 0x1393 JUMP JUMPDEST PUSH2 0x7CF DUP6 DUP6 DUP6 PUSH2 0x140D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH2 0x15C3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0x83D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x26D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x886 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x2721 JUMP JUMPDEST PUSH2 0x8B5 DUP2 PUSH2 0x15FA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8D1 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1602 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7AA DUP2 DUP6 DUP6 PUSH2 0x8E7 DUP4 DUP4 PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x8F1 SWAP2 SWAP1 PUSH2 0x27B8 JUMP JUMPDEST PUSH2 0x126F JUMP JUMPDEST PUSH1 0x0 TIMESTAMP DUP3 LT PUSH2 0x935 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x859195D195C9B5A5B9959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x95E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x7B0 JUMP JUMPDEST DUP3 PUSH2 0x96C DUP6 PUSH1 0x1 DUP5 SUB PUSH2 0xA60 JUMP JUMPDEST MLOAD PUSH4 0xFFFFFFFF AND GT PUSH2 0x991 JUMPI PUSH2 0x985 DUP5 PUSH1 0x1 DUP4 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP2 POP POP PUSH2 0x7B0 JUMP JUMPDEST DUP3 PUSH2 0x99D DUP6 PUSH1 0x0 PUSH2 0xA60 JUMP JUMPDEST MLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 ADD JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x2 DUP3 DUP3 SUB DIV DUP2 SUB PUSH1 0x0 PUSH2 0x9D8 DUP9 DUP4 PUSH2 0xA60 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF AND DUP8 EQ ISZERO PUSH2 0x9FA JUMPI PUSH1 0x20 ADD MLOAD SWAP5 POP PUSH2 0x7B0 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP8 GT ISZERO PUSH2 0xA11 JUMPI DUP2 SWAP4 POP PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x1 DUP3 SUB SWAP3 POP JUMPDEST POP POP PUSH2 0x9BC JUMP JUMPDEST PUSH2 0xA29 DUP7 DUP4 PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA3F PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB SWAP1 DUP3 ADD GT PUSH2 0xA5C JUMPI PUSH2 0xA5C DUP3 DUP3 PUSH2 0x17DC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH2 0x100 DUP2 MSTORE DUP2 DUP5 KECCAK256 SWAP3 DUP5 MSTORE SWAP2 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD PUSH4 0xFFFFFFFF AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0xAFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x26D5 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB45 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x2721 JUMP JUMPDEST PUSH2 0xB74 DUP3 PUSH2 0x15FA JUMP JUMPDEST PUSH2 0xA5C DUP3 DUP3 PUSH1 0x1 PUSH2 0x1602 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xC20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8D1 CALLER DUP3 PUSH2 0x18A9 JUMP JUMPDEST PUSH2 0xC45 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0xC4F PUSH1 0x0 PUSH2 0x19A0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x719 SWAP1 PUSH2 0x27FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0xCA4 JUMPI PUSH1 0x0 PUSH2 0x7D5 JUMP JUMPDEST PUSH2 0xCB1 DUP4 PUSH1 0x1 DUP4 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xCC4 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0xA5C DUP3 DUP3 PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xCDC DUP3 DUP7 PUSH2 0x10BC JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xD3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0xD49 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x126F JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7AA DUP2 DUP6 DUP6 PUSH2 0x140D JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A207369676E61747572652065787069726564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE5B PUSH2 0xE53 PUSH32 0xE3BC21CA2BE03AEEEE0E614BFE98F970C96A05A768F627C50AB81764CB50268 PUSH2 0xDE3 PUSH2 0x70A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDF3 SWAP2 SWAP1 PUSH2 0x2686 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1B33 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x1B81 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xEB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20696E76616C6964207369676E6572202830783029 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP7 EQ PUSH2 0xF1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230566F7465733A20696E76616C6964206E6F6E636500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0xF40 DUP4 PUSH2 0x2831 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xF4F DUP2 DUP9 PUSH2 0x18A9 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xFA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xFD7 DUP13 PUSH2 0x1BA9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x1032 DUP3 PUSH2 0x1BD1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1042 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1B81 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x10B0 DUP11 DUP11 DUP11 PUSH2 0x126F JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1108 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0x116B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH1 0xFF DUP1 DUP5 AND SWAP2 SWAP1 SWAP2 OR PUSH2 0x100 OR SWAP1 SWAP2 SSTORE PUSH2 0x19A DUP1 SLOAD SWAP2 DUP5 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x11AC PUSH2 0x1BDE JUMP JUMPDEST PUSH2 0x11B4 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0xFF DUP3 AND DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1201 PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1266 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x8D1 DUP2 PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1332 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x139F DUP5 DUP5 PUSH2 0x10BC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1407 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x13FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x1407 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x126F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1471 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x14D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x14DE DUP4 DUP4 DUP4 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1556 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x15B6 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x15F2 PUSH1 0x65 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH2 0x1C3F JUMP JUMPDEST PUSH2 0x8D1 PUSH2 0x1781 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x163A JUMPI PUSH2 0x1635 DUP4 PUSH2 0x1C88 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x16A3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x16A0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2652 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1706 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1775 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST POP PUSH2 0x1635 DUP4 DUP4 DUP4 PUSH2 0x1D24 JUMP JUMPDEST PUSH2 0x104 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x183E PUSH1 0x0 DUP4 DUP4 PUSH2 0x1C34 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1850 SWAP2 SWAP1 PUSH2 0x27B8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD GT PUSH2 0x18F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x21736861726573 PUSH1 0xC8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND OR SWAP1 SWAP2 SSTORE AND PUSH2 0x1951 DUP2 DUP4 PUSH2 0x194C DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1D49 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x104 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1A53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH2 0x1A5F DUP3 PUSH1 0x0 DUP4 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1AD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B0 PUSH2 0x1B40 PUSH2 0x1E2D JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B92 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E64 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B9F DUP2 PUSH2 0x1F28 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B0 PUSH2 0x1B40 PUSH2 0x15C3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH2 0xC4F PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH2 0x1635 DUP4 DUP4 DUP4 PUSH2 0x20A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x1CF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x288F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D2D DUP4 PUSH2 0x2152 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x1D3A JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x1635 JUMPI PUSH2 0x1407 DUP4 DUP4 PUSH2 0x2192 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x1D6A JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1635 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1DCC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 PUSH2 0x1DA5 JUMPI PUSH1 0x0 PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x1DB2 DUP6 PUSH1 0x1 DUP5 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH2 0x1DC8 DUP7 DUP5 DUP5 DUP5 PUSH2 0x2286 JUMP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1635 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 PUSH2 0x1E02 JUMPI PUSH1 0x0 PUSH2 0x1E14 JUMP JUMPDEST PUSH2 0x1E0F DUP5 PUSH1 0x1 DUP5 SUB PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 POP DUP3 DUP2 ADD PUSH2 0x1E25 DUP6 DUP5 DUP5 DUP5 PUSH2 0x2286 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1E5C PUSH1 0xCC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xCD SLOAD PUSH2 0x1C3F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1E9B JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1F1F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F18 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1F1F JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1F3C JUMPI PUSH2 0x1F3C PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x1F45 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1F59 JUMPI PUSH2 0x1F59 PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1FBB JUMPI PUSH2 0x1FBB PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x2009 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x201D JUMPI PUSH2 0x201D PUSH2 0x2862 JUMP JUMPDEST EQ ISZERO PUSH2 0x8D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x209D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP1 PUSH2 0x276D JUMP JUMPDEST PUSH2 0xC4F CALLER PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x20E3 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x20EF JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0x211F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0x1635 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x1D49 JUMP JUMPDEST PUSH2 0x215B DUP2 PUSH2 0x1C88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x21FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x834 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2215 SWAP2 SWAP1 PUSH2 0x2686 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2250 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2255 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x227D DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x28AF PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x23AF JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST TIMESTAMP DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x22C6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x100 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x0 NOT DUP9 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x22FE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x100 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x0 NOT DUP9 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD DUP3 SWAP1 SSTORE PUSH2 0x2364 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH4 0xFFFFFFFF DUP4 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x100 DUP5 MSTORE DUP7 DUP2 KECCAK256 DUP12 DUP3 MSTORE DUP5 MSTORE DUP7 DUP2 KECCAK256 SWAP6 MLOAD DUP7 SLOAD PUSH4 0xFFFFFFFF NOT AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 SSTORE SWAP1 MLOAD PUSH1 0x1 SWAP5 DUP6 ADD SSTORE DUP3 MSTORE PUSH2 0x101 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP1 DUP6 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x23BE JUMPI POP DUP2 PUSH2 0x7D5 JUMP JUMPDEST PUSH2 0x7D5 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x23D3 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x834 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2404 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2404 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D5 DUP3 PUSH2 0x23ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2451 DUP4 PUSH2 0x23ED JUMP JUMPDEST SWAP2 POP PUSH2 0x245F PUSH1 0x20 DUP5 ADD PUSH2 0x23ED JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x247D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2486 DUP5 PUSH2 0x23ED JUMP JUMPDEST SWAP3 POP PUSH2 0x2494 PUSH1 0x20 DUP6 ADD PUSH2 0x23ED JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x24BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24C8 DUP9 PUSH2 0x23ED JUMP JUMPDEST SWAP7 POP PUSH2 0x24D6 PUSH1 0x20 DUP10 ADD PUSH2 0x23ED JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x24F2 PUSH1 0x80 DUP10 ADD PUSH2 0x2409 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x252A DUP4 PUSH2 0x23ED JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x255B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x256D JUMPI PUSH2 0x256D PUSH2 0x2878 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2595 JUMPI PUSH2 0x2595 PUSH2 0x2878 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x25AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25EC DUP4 PUSH2 0x23ED JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x261C DUP8 PUSH2 0x23ED JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2638 PUSH1 0x60 DUP9 ADD PUSH2 0x2409 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x267D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D5 DUP3 PUSH2 0x2409 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2698 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x27D0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x26C1 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x27CB JUMPI PUSH2 0x27CB PUSH2 0x284C JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27EB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x27D3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1407 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2810 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BCB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2845 JUMPI PUSH2 0x2845 PUSH2 0x284C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212205B 0xDB LOG1 SWAP9 0xED ADDMOD LOG3 DUP11 CREATE2 0x1E SWAP6 0xED SWAP11 SELFBALANCE EXTCODESIZE PUSH11 0x7049D59A345AEA4ED75110 0x2C 0xB1 0xD8 0xD DUP15 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
      "sourceMap": "515:1763:87:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1438:51:92;;;;;;;;;;-1:-1:-1;1438:51:92;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5427:25:95;;;5415:2;5400:18;1438:51:92;;;;;;;;2491:98:44;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4768:197::-;;;;;;;;;;-1:-1:-1;4768:197:44;;;;;:::i;:::-;;:::i;:::-;;;5254:14:95;;5247:22;5229:41;;5217:2;5202:18;4768:197:44;5089:187:95;1092:69:92;;;;;;;;;;-1:-1:-1;1092:69:92;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21052:10:95;21040:23;;;21022:42;;21095:2;21080:18;;21073:34;;;;20995:18;1092:69:92;20850:263:95;3579:106:44;;;;;;;;;;-1:-1:-1;3666:12:44;;3579:106;;5527:286;;;;;;;;;;-1:-1:-1;5527:286:44;;;;;:::i;:::-;;:::i;3428:91::-;;;;;;;;;;-1:-1:-1;3510:2:44;3428:91;;;21290:4:95;21278:17;;;21260:36;;21248:2;21233:18;3428:91:44;21118:184:95;3276:113:48;;;;;;;;;;;;;:::i;3317:197:41:-;;;;;;;;;;-1:-1:-1;3317:197:41;;;;;:::i;:::-;;:::i;:::-;;6208:234:44;;;;;;;;;;-1:-1:-1;6208:234:44;;;;;:::i;:::-;;:::i;7541:1288:92:-;;;;;;;;;;-1:-1:-1;7541:1288:92;;;;;:::i;:::-;;:::i;1214:228:87:-;;;;;;;;;;-1:-1:-1;1214:228:87;;;;;:::i;:::-;;:::i;9432:208:92:-;;;;;;;;;;-1:-1:-1;9432:208:92;;;;;:::i;:::-;;:::i;:::-;;;;20314:13:95;;20329:10;20310:30;20292:49;;20397:4;20385:17;;;20379:24;20357:20;;;20350:54;;;;20265:18;9432:208:92;20088:322:95;3763:222:41;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;637:20:87:-;;;;;;;;;;-1:-1:-1;637:20:87;;;;-1:-1:-1;;;637:20:87;;;;;;1336:44:92;;;;;;;;;;-1:-1:-1;1336:44:92;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1336:44:92;;;;;;-1:-1:-1;;;;;5045:32:95;;;5027:51;;5015:2;5000:18;1336:44:92;4881:203:95;2649:103:92;;;;;;;;;;-1:-1:-1;2649:103:92;;;;;:::i;:::-;;:::i;1231:49::-;;;;;;;;;;-1:-1:-1;1231:49:92;;;;;:::i;:::-;;;;;;;;;;;;;;3743:125:44;;;;;;;;;;-1:-1:-1;3743:125:44;;;;;:::i;:::-;-1:-1:-1;;;;;3843:18:44;3817:7;3843:18;;;:9;:18;;;;;;;3743:125;2071:101:36;;;;;;;;;;;;;:::i;3026:126:48:-;;;;;;;;;;-1:-1:-1;3026:126:48;;;;;:::i;:::-;;:::i;7182:94:92:-;;;;;;;;;;-1:-1:-1;7254:15:92;7182:94;;1441:85:36;;;;;;;;;;-1:-1:-1;1513:6:36;;-1:-1:-1;;;;;1513:6:36;1441:85;;2702:102:44;;;;;;;;;;;;;:::i;9037:389:92:-;;;;;;;;;;-1:-1:-1;9037:389:92;;;;;:::i;:::-;;:::i;1583:105:87:-;;;;;;;;;;-1:-1:-1;1583:105:87;;;;;:::i;:::-;;:::i;6929:427:44:-;;;;;;;;;;-1:-1:-1;6929:427:44;;;;;:::i;:::-;;:::i;4064:189::-;;;;;;;;;;-1:-1:-1;4064:189:44;;;;;:::i;:::-;;:::i;3141:933:92:-;;;;;;;;;;-1:-1:-1;3141:933:92;;;;;:::i;:::-;;:::i;2328:637:48:-;;;;;;;;;;-1:-1:-1;2328:637:48;;;;;:::i;:::-;;:::i;4311:149:44:-;;;;;;;;;;-1:-1:-1;4311:149:44;;;;;:::i;:::-;;:::i;819:248:87:-;;;;;;;;;;-1:-1:-1;819:248:87;;;;;:::i;:::-;;:::i;614:17::-;;;;;;;;;;-1:-1:-1;614:17:87;;;;-1:-1:-1;;;;;614:17:87;;;2321:198:36;;;;;;;;;;-1:-1:-1;2321:198:36;;;;;:::i;:::-;;:::i;2491:98:44:-;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;929:10:52;4905:32:44;929:10:52;4921:7:44;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;;:::o;5527:286::-;5654:4;929:10:52;5710:38:44;5726:4;929:10:52;5741:6:44;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;5802:4;5795:11;;;5527:286;;;;;;:::o;3276:113:48:-;3336:7;3362:20;:18;:20::i;:::-;3355:27;;3276:113;:::o;3317:197:41:-;1889:4;-1:-1:-1;;;;;1898:6:41;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:41;;;;;;;:::i;:::-;;;;;;;;;1995:6;-1:-1:-1;;;;;1971:30:41;:20;-1:-1:-1;;;;;;;;;;;1642:65:38;-1:-1:-1;;;;;1642:65:38;;1563:151;1971:20:41;-1:-1:-1;;;;;1971:30:41;;1963:87;;;;-1:-1:-1;;;1963:87:41;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;6208:234:44:-;6296:4;929:10:52;6350:64:44;929:10:52;6366:7:44;6403:10;6375:25;929:10:52;6366:7:44;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;7541:1288:92:-;7662:13;7254:15;7699:9;:17;7691:41;;;;-1:-1:-1;;;7691:41:92;;17152:2:95;7691:41:92;;;17134:21:95;17191:2;17171:18;;;17164:30;-1:-1:-1;;;17210:18:95;;;17203:41;17261:18;;7691:41:92;16950:335:95;7691:41:92;-1:-1:-1;;;;;7803:23:92;;7780:20;7803:23;;;:14;:23;;;;;;7840:17;7836:31;;7866:1;7859:8;;;;;7836:31;7997:9;7923:40;7937:7;7961:1;7946:12;:16;7923:13;:40::i;:::-;:54;:83;;;7902:172;;8028:40;8042:7;8066:1;8051:12;:16;8028:13;:40::i;:::-;:46;;;8021:53;;;;;7902:172;8206:9;8164:25;8178:7;8187:1;8164:13;:25::i;:::-;:39;:51;;;8160:65;;;8224:1;8217:8;;;;;8160:65;8239:13;-1:-1:-1;;8286:16:92;;8316:440;8331:5;8323;:13;8316:440;;;8489:1;8472:13;;;8471:19;8463:27;;8446:14;8531:30;8545:7;8463:27;8531:13;:30::i;:::-;8583:16;;8508:53;;-1:-1:-1;8583:29:92;;;;8579:162;;;8621:8;;;;-1:-1:-1;8614:15:92;;-1:-1:-1;;;;8614:15:92;8579:162;8656:16;;:28;;;-1:-1:-1;8652:89:92;;;8694:6;8686:14;;8652:89;;;8740:1;8731:6;:10;8723:18;;8652:89;8338:418;;8316:440;;;8777:29;8791:7;8800:5;8777:13;:29::i;:::-;:35;;;;7541:1288;-1:-1:-1;;;;;;7541:1288:92:o;1214:228:87:-;1334:13:36;:11;:13::i;:::-;3666:12:44;;-1:-1:-1;;;;;1346:21:87;1336:6;1320:22:::1;:47;1316:110;;1387:24;1393:9;1404:6;1387:5;:24::i;:::-;1214:228:::0;;:::o;9432:208:92:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;9597:22:92;;;;;;:11;:22;;;;;:36;;;;;;;;;;9590:43;;;;;;;;;;;;;;;;;;;;;;9432:208::o;3763:222:41:-;1889:4;-1:-1:-1;;;;;1898:6:41;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:41;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:41;:20;-1:-1:-1;;;;;;;;;;;1642:65:38;-1:-1:-1;;;;;1642:65:38;;1563:151;1971:20:41;-1:-1:-1;;;;;1971:30:41;;1963:87;;;;-1:-1:-1;;;1963:87:41;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;3006:131::-:0;3084:7;2324:4;-1:-1:-1;;;;;2333:6:41;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:41;;14018:2:95;2308:92:41;;;14000:21:95;14057:2;14037:18;;;14030:30;14096:34;14076:18;;;14069:62;14167:26;14147:18;;;14140:54;14211:19;;2308:92:41;13816:420:95;2308:92:41;-1:-1:-1;;;;;;;;;;;;3006:131:41;:::o;2649:103:92:-;2713:32;2723:10;2735:9;2713;:32::i;2071:101:36:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;3026:126:48:-;-1:-1:-1;;;;;3121:14:48;;3095:7;3121:14;;;:7;:14;;;;;929::53;3121:24:48;838:112:53;2702:102:44;2758:13;2790:7;2783:14;;;;;:::i;9037:389:92:-;-1:-1:-1;;;;;9187:23:92;;9135:13;9187:23;;;:14;:23;;;;;;9307:17;:102;;9408:1;9307:102;;;9343:40;9357:7;9381:1;9366:12;:16;9343:13;:40::i;:::-;:46;;;9299:110;9037:389;-1:-1:-1;;;9037:389:92:o;1583:105:87:-;1334:13:36;:11;:13::i;:::-;1659:22:87::1;1665:7;1674:6;1659:5;:22::i;6929:427:44:-:0;7022:4;929:10:52;7022:4:44;7103:25;929:10:52;7120:7:44;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;-1:-1:-1;;;7138:85:44;;19524:2:95;7138:85:44;;;19506:21:95;19563:2;19543:18;;;19536:30;19602:34;19582:18;;;19575:62;-1:-1:-1;;;19653:18:95;;;19646:35;19698:19;;7138:85:44;19322:401:95;7138:85:44;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;-1:-1:-1;7345:4:44;;6929:427;-1:-1:-1;;;;6929:427:44:o;4064:189::-;4143:4;929:10:52;4197:28:44;929:10:52;4214:2:44;4218:6;4197:9;:28::i;3141:933:92:-;3333:6;7254:15;3324;;3316:57;;;;-1:-1:-1;;;3316:57:92;;9020:2:95;3316:57:92;;;9002:21:95;9059:2;9039:18;;;9032:30;9098:31;9078:18;;;9071:59;9147:18;;3316:57:92;8818:353:95;3316:57:92;3383:14;3400:436;3438:343;1599:83;3621:6;:4;:6::i;:::-;3604:24;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3604:24:92;;;;;;;;;3594:35;;3604:24;3594:35;;;;3513:236;;;6318:25:95;;;;6359:18;;6352:34;;;;-1:-1:-1;;;;;6422:32:95;;6402:18;;;6395:60;6471:18;;;6464:34;;;6514:19;;;6507:35;;;6290:19;;3513:236:92;;;;;;;;;;;;3482:285;;;;;;3438:26;:343::i;:::-;3795:1;3810;3825;3400:24;:436::i;:::-;3383:453;-1:-1:-1;;;;;;3854:20:92;;3846:65;;;;-1:-1:-1;;;3846:65:92;;12841:2:95;3846:65:92;;;12823:21:95;;;12860:18;;;12853:30;12919:34;12899:18;;;12892:62;12971:18;;3846:65:92;12639:356:95;3846:65:92;-1:-1:-1;;;;;3938:24:92;;;;;;:16;:24;;;;;;3929:33;;3921:71;;;;-1:-1:-1;;;3921:71:92;;10141:2:95;3921:71:92;;;10123:21:95;10180:2;10160:18;;;10153:30;10219:27;10199:18;;;10192:55;10264:18;;3921:71:92;9939:349:95;3921:71:92;-1:-1:-1;;;;;4003:24:92;;;;;;:16;:24;;;;;:26;;;;;;:::i;:::-;;;;;;4039:28;4049:6;4057:9;4039;:28::i;:::-;3306:768;3141:933;;;;;;:::o;2328:637:48:-;2563:8;2544:15;:27;;2536:69;;;;-1:-1:-1;;;2536:69:48;;12076:2:95;2536:69:48;;;12058:21:95;12115:2;12095:18;;;12088:30;12154:31;12134:18;;;12127:59;12203:18;;2536:69:48;11874:353:95;2536:69:48;2616:18;1363:95;2676:5;2683:7;2692:5;2699:16;2709:5;2699:9;:16::i;:::-;2647:79;;;;;;5750:25:95;;;;-1:-1:-1;;;;;5849:15:95;;;5829:18;;;5822:43;5901:15;;;;5881:18;;;5874:43;5933:18;;;5926:34;5976:19;;;5969:35;6020:19;;;6013:35;;;5722:19;;2647:79:48;;;;;;;;;;;;2637:90;;;;;;2616:111;;2738:12;2753:28;2770:10;2753:16;:28::i;:::-;2738:43;;2792:14;2809:39;2834:4;2840:1;2843;2846;2809:24;:39::i;:::-;2792:56;;2876:5;-1:-1:-1;;;;;2866:15:48;:6;-1:-1:-1;;;;;2866:15:48;;2858:58;;;;-1:-1:-1;;;2858:58:48;;15683:2:95;2858:58:48;;;15665:21:95;15722:2;15702:18;;;15695:30;15761:32;15741:18;;;15734:60;15811:18;;2858:58:48;15481:354:95;2858:58:48;2927:31;2936:5;2943:7;2952:5;2927:8;:31::i;:::-;2526:439;;;2328:637;;;;;;;:::o;4311:149:44:-;-1:-1:-1;;;;;4426:18:44;;;4400:7;4426:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4311:149::o;819:248:87:-;4871:13:40;;889:8:87;;4871:13:40;;;;;4870:14;:40;;;;-1:-1:-1;4888:12:40;;:22;;;;:12;;:22;4870:40;4862:99;;;;-1:-1:-1;;;4862:99:40;;14853:2:95;4862:99:40;;;14835:21:95;14892:2;14872:18;;;14865:30;14931:34;14911:18;;;14904:62;-1:-1:-1;;;14982:18:95;;;14975:44;15036:19;;4862:99:40;14651:410:95;4862:99:40;4971:12;:22;;-1:-1:-1;;5003:20:40;4971:22;;;;5003:20;;;;4971:22;5003:20;;;;913:4:87::1;:24:::0;;982:18;;::::1;-1:-1:-1::0;;;982:18:87::1;-1:-1:-1::0;;;;;;982:18:87;;;;;;::::1;::::0;;1010:16:::1;:14;:16::i;:::-;1036:24;:22;:24::i;:::-;5060:5:40::0;5044:21;;-1:-1:-1;;5044:21:40;;;5080:20;;21290:4:95;21278:17;;21260:36;;5080:20:40;;21248:2:95;21233:18;5080:20:40;;;;;;;819:248:87;;:::o;2321:198:36:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2409:22:36;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:36;;10495:2:95;2401:73:36::1;::::0;::::1;10477:21:95::0;10534:2;10514:18;;;10507:30;10573:34;10553:18;;;10546:62;-1:-1:-1;;;10624:18:95;;;10617:36;10670:19;;2401:73:36::1;10293:402:95::0;2401:73:36::1;2484:28;2503:8;2484:18;:28::i;10841:370:44:-:0;-1:-1:-1;;;;;10972:19:44;;10964:68;;;;-1:-1:-1;;;10964:68:44;;18707:2:95;10964:68:44;;;18689:21:95;18746:2;18726:18;;;18719:30;18785:34;18765:18;;;18758:62;-1:-1:-1;;;18836:18:95;;;18829:34;18880:19;;10964:68:44;18505:400:95;10964:68:44;-1:-1:-1;;;;;11050:21:44;;11042:68;;;;-1:-1:-1;;;11042:68:44;;10902:2:95;11042:68:44;;;10884:21:95;10941:2;10921:18;;;10914:30;10980:34;10960:18;;;10953:62;-1:-1:-1;;;11031:18:95;;;11024:32;11073:19;;11042:68:44;10700:398:95;11042:68:44;-1:-1:-1;;;;;11121:18:44;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11172:32;;5427:25:95;;;11172:32:44;;5400:18:95;11172:32:44;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;-1:-1:-1;;11688:16:44;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;-1:-1:-1;;;11741:68:44;;11718:2:95;11741:68:44;;;11700:21:95;11757:2;11737:18;;;11730:30;11796:31;11776:18;;;11769:59;11845:18;;11741:68:44;11516:353:95;11741:68:44;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11612:321;11492:441;;;:::o;7810:818::-;-1:-1:-1;;;;;7936:18:44;;7928:68;;;;-1:-1:-1;;;7928:68:44;;18301:2:95;7928:68:44;;;18283:21:95;18340:2;18320:18;;;18313:30;18379:34;18359:18;;;18352:62;-1:-1:-1;;;18430:18:95;;;18423:35;18475:19;;7928:68:44;18099:401:95;7928:68:44;-1:-1:-1;;;;;8014:16:44;;8006:64;;;;-1:-1:-1;;;8006:64:44;;8616:2:95;8006:64:44;;;8598:21:95;8655:2;8635:18;;;8628:30;8694:34;8674:18;;;8667:62;-1:-1:-1;;;8745:18:95;;;8738:33;8788:19;;8006:64:44;8414:399:95;8006:64:44;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;-1:-1:-1;;;;;8152:15:44;;8130:19;8152:15;;;:9;:15;;;;;;8185:21;;;;8177:72;;;;-1:-1:-1;;;8177:72:44;;12434:2:95;8177:72:44;;;12416:21:95;12473:2;12453:18;;;12446:30;12512:34;12492:18;;;12485:62;-1:-1:-1;;;12563:18:95;;;12556:36;12609:19;;8177:72:44;12232:402:95;8177:72:44;-1:-1:-1;;;;;8283:15:44;;;;;;;:9;:15;;;;;;8301:20;;;8283:38;;8498:13;;;;;;;;;;:23;;;;;;8547:26;;;;;;8315:6;5427:25:95;;5415:2;5400:18;;5281:177;8547:26:44;;;;;;;;8584:37;2938:974:38;2851:160:57;2904:7;2930:74;1604:95;2964:17;4395:12;;;4311:103;2964:17;4740:15;;2930:21;:74::i;2192:84:87:-;1334:13:36;:11;:13::i;2938:974:38:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;2938:974;;;:::o;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:38;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:38;;;;;;;;-1:-1:-1;;3531:63:38;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:38;;15268:2:95;3758:56:38;;;15250:21:95;15307:2;15287:18;;;15280:30;15346:34;15326:18;;;15319:62;-1:-1:-1;;;15397:18:95;;;15390:44;15451:19;;3758:56:38;15066:410:95;3527:302:38;-1:-1:-1;;;;;;;;;;;3644:28:38;;3636:82;;;;-1:-1:-1;;;3636:82:38;;14443:2:95;3636:82:38;;;14425:21:95;14482:2;14462:18;;;14455:30;14521:34;14501:18;;;14494:62;-1:-1:-1;;;14572:18:95;;;14565:39;14621:19;;3636:82:38;14241:405:95;3636:82:38;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;1599:130:36:-;1513:6;;-1:-1:-1;;;;;1513:6:36;929:10:52;1662:23:36;1654:68;;;;-1:-1:-1;;;1654:68:36;;16456:2:95;1654:68:36;;;16438:21:95;;;16475:18;;;16468:30;16534:34;16514:18;;;16507:62;16586:18;;1654:68:36;16254:356:95;8904:535:44;-1:-1:-1;;;;;8987:21:44;;8979:65;;;;-1:-1:-1;;;8979:65:44;;19930:2:95;8979:65:44;;;19912:21:95;19969:2;19949:18;;;19942:30;20008:33;19988:18;;;19981:61;20059:18;;8979:65:44;19728:355:95;8979:65:44;9055:49;9084:1;9088:7;9097:6;9055:20;:49::i;:::-;9131:6;9115:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9283:18:44;;;;;;:9;:18;;;;;;;;:28;;;;;;9336:37;5427:25:95;;;9336:37:44;;5400:18:95;9336:37:44;;;;;;;1214:228:87;;:::o;4250:433:92:-;-1:-1:-1;;;;;3843:18:44;;4365:1:92;3843:18:44;;;:9;:18;;;;;;4342:24:92;4334:44;;;;-1:-1:-1;;;4334:44:92;;16817:2:95;4334:44:92;;;16799:21:95;16856:1;16836:18;;;16829:29;-1:-1:-1;;;16874:18:95;;;16867:37;16921:18;;4334:44:92;16615:330:95;4334:44:92;-1:-1:-1;;;;;4414:20:92;;;4388:23;4414:20;;;:9;:20;;;;;;;4444:32;;;-1:-1:-1;;;;;;4444:32:92;;;;;;4414:20;4487:119;4414:20;4467:9;4575:20;4424:9;-1:-1:-1;;;;;3843:18:44;3817:7;3843:18;;;:9;:18;;;;;;;3743:125;4575:20:92;4487:14;:119::i;:::-;4666:9;-1:-1:-1;;;;;4622:54:92;4649:15;-1:-1:-1;;;;;4622:54:92;4638:9;-1:-1:-1;;;;;4622:54:92;;;;;;;;;;;4324:359;4250:433;;:::o;2673:187:36:-;2765:6;;;-1:-1:-1;;;;;2781:17:36;;;-1:-1:-1;;;;;;2781:17:36;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;9759:659:44:-;-1:-1:-1;;;;;9842:21:44;;9834:67;;;;-1:-1:-1;;;9834:67:44;;17492:2:95;9834:67:44;;;17474:21:95;17531:2;17511:18;;;17504:30;17570:34;17550:18;;;17543:62;-1:-1:-1;;;17621:18:95;;;17614:31;17662:19;;9834:67:44;17290:397:95;9834:67:44;9912:49;9933:7;9950:1;9954:6;9912:20;:49::i;:::-;-1:-1:-1;;;;;9997:18:44;;9972:22;9997:18;;;:9;:18;;;;;;10033:24;;;;10025:71;;;;-1:-1:-1;;;10025:71:44;;9378:2:95;10025:71:44;;;9360:21:95;9417:2;9397:18;;;9390:30;9456:34;9436:18;;;9429:62;-1:-1:-1;;;9507:18:95;;;9500:32;9549:19;;10025:71:44;9176:398:95;10025:71:44;-1:-1:-1;;;;;10130:18:44;;;;;;:9;:18;;;;;;;;10151:23;;;10130:44;;10267:12;:22;;;;;;;10315:37;5427:25:95;;;10130:18:44;;;10315:37;;5400:18:95;10315:37:44;;;;;;;2938:974:38;;;:::o;4149:196:93:-;4236:7;4262:76;4295:30;:28;:30::i;:::-;4327:10;8503:57:56;;-1:-1:-1;;;8503:57:56;;;4742:27:95;4785:11;;;4778:27;;;4821:12;;;4814:28;;;8467:7:56;;4858:12:95;;8503:57:56;;;;;;;;;;;;8493:68;;;;;;8486:75;;8374:194;;;;;6718:270;6841:7;6861:17;6880:18;6902:25;6913:4;6919:1;6922;6925;6902:10;:25::i;:::-;6860:67;;;;6937:18;6949:5;6937:11;:18::i;:::-;-1:-1:-1;6972:9:56;6718:270;-1:-1:-1;;;;;6718:270:56:o;3520:214:48:-;-1:-1:-1;;;;;3651:14:48;;3580:15;3651:14;;;:7;:14;;;;;929::53;;1061:1;1043:19;;;;929:14;3710:17:48;3597:137;3520:214;;;:::o;3899:176:57:-;3976:7;4002:66;4035:20;:18;:20::i;1003:95:36:-;5363:13:40;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:40;;;;;;;:::i;:::-;1065:26:36::1;:24;:26::i;1042:67:41:-:0;5363:13:40;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:40;;;;;;;:::i;1994:192:87:-;2135:44;2162:4;2168:2;2172:6;2135:26;:44::i;3017:257:57:-;3193:73;;;;;;6812:25:95;;;6853:18;;;6846:34;;;6896:18;;;6889:34;;;3237:13:57;6939:18:95;;;6932:34;3260:4:57;6982:19:95;;;6975:61;3157:7:57;;6784:19:95;;3193:73:57;;;;;;;;;;;;3183:84;;;;;;3176:91;;3017:257;;;;;:::o;1805:281:38:-;-1:-1:-1;;;;;1476:19:50;;;1878:106:38;;;;-1:-1:-1;;;1878:106:38;;16042:2:95;1878:106:38;;;16024:21:95;16081:2;16061:18;;;16054:30;16120:34;16100:18;;;16093:62;-1:-1:-1;;;16171:18:95;;;16164:43;16224:19;;1878:106:38;15840:409:95;1878:106:38;-1:-1:-1;;;;;;;;;;;1994:85:38;;-1:-1:-1;;;;;;1994:85:38;-1:-1:-1;;;;;1994:85:38;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;4934:1049:92:-;5092:6;-1:-1:-1;;;;;5082:16:92;:6;-1:-1:-1;;;;;5082:16:92;;;:31;;;;-1:-1:-1;5102:11:92;;;5082:31;5078:889;;;-1:-1:-1;;;;;5137:20:92;;;5133:401;;-1:-1:-1;;;;;5201:22:92;;5181:17;5201:22;;;:14;:22;;;;;;;5265:14;:111;;5375:1;5265:111;;;5306:36;5320:6;5340:1;5328:9;:13;5306;:36::i;:::-;:42;;;5265:111;5245:131;-1:-1:-1;5418:18:92;;;5458:57;5475:6;5483:9;5245:131;5418:18;5458:16;:57::i;:::-;5159:375;;;5133:401;-1:-1:-1;;;;;5556:20:92;;;5552:401;;-1:-1:-1;;;;;5620:22:92;;5600:17;5620:22;;;:14;:22;;;;;;;5684:14;:111;;5794:1;5684:111;;;5725:36;5739:6;5759:1;5747:9;:13;5725;:36::i;:::-;:42;;;5684:111;5664:131;-1:-1:-1;5837:18:92;;;5877:57;5894:6;5902:9;5664:131;5837:18;5877:16;:57::i;:::-;5578:375;;;4934:1049;;;:::o;3041:200:93:-;3104:7;3130:104;1739:95;3174:27;4675:23;;;4581:124;3174:27;5041:26;;2930:21:57;:74::i;5091:1494:56:-;5217:7;;6141:66;6128:79;;6124:161;;;-1:-1:-1;6239:1:56;;-1:-1:-1;6243:30:56;6223:51;;6124:161;6396:24;;;6379:14;6396:24;;;;;;;;;7274:25:95;;;7347:4;7335:17;;7315:18;;;7308:45;;;;7369:18;;;7362:34;;;7412:18;;;7405:34;;;6396:24:56;;7246:19:95;;6396:24:56;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6396:24:56;;-1:-1:-1;;6396:24:56;;;-1:-1:-1;;;;;;;6434:20:56;;6430:101;;6486:1;6490:29;6470:50;;;;;;;6430:101;6549:6;-1:-1:-1;6557:20:56;;-1:-1:-1;5091:1494:56;;;;;;;;:::o;592:511::-;669:20;660:5;:29;;;;;;;;:::i;:::-;;656:441;;;592:511;:::o;656:441::-;765:29;756:5;:38;;;;;;;;:::i;:::-;;752:345;;;810:34;;-1:-1:-1;;;810:34:56;;8263:2:95;810:34:56;;;8245:21:95;8302:2;8282:18;;;8275:30;8341:26;8321:18;;;8314:54;8385:18;;810:34:56;8061:348:95;752:345:56;874:35;865:5;:44;;;;;;;;:::i;:::-;;861:236;;;925:41;;-1:-1:-1;;;925:41:56;;9781:2:95;925:41:56;;;9763:21:95;9820:2;9800:18;;;9793:30;9859:33;9839:18;;;9832:61;9910:18;;925:41:56;9579:355:95;861:236:56;996:30;987:5;:39;;;;;;;;:::i;:::-;;983:114;;;1042:44;;-1:-1:-1;;;1042:44:56;;13202:2:95;1042:44:56;;;13184:21:95;13241:2;13221:18;;;13214:30;13280:34;13260:18;;;13253:62;-1:-1:-1;;;13331:18:95;;;13324:32;13373:19;;1042:44:56;13000:398:95;1104:111:36;5363:13:40;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:40;;;;;;;:::i;:::-;1176:32:36::1;929:10:52::0;1176:18:36::1;:32::i;2078:449:92:-:0;-1:-1:-1;;;;;3843:18:44;;3817:7;3843:18;;;:9;:18;;;;;;2352::92;:45;;;;-1:-1:-1;;;;;;2374:18:92;;;;;;:14;:18;;;;;;:23;2352:45;:59;;;;;2410:1;2401:6;:10;2352:59;2348:108;;;-1:-1:-1;;;;;2427:13:92;;;;;;:9;:13;;;;;:18;;-1:-1:-1;;;;;;2427:18:92;;;;;;2348:108;-1:-1:-1;;;;;2481:15:92;;;;;;;:9;:15;;;;;;;2498:13;;;;;;;;2466:54;;2481:15;;;;2498:13;2513:6;2466:14;:54::i;2192:152:38:-;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:38;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:50;;;7195:88:38;;;;-1:-1:-1;;;7195:88:38;;17894:2:95;7195:88:38;;;17876:21:95;17933:2;17913:18;;;17906:30;17972:34;17952:18;;;17945:62;-1:-1:-1;;;18023:18:95;;;18016:36;18069:19;;7195:88:38;17692:402:95;7195:88:38;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:38;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;7088:455;-1:-1:-1;;;;;7088:455:38:o;6306:768:92:-;7254:15;6553:17;;;;;:104;;-1:-1:-1;;;;;;6590:22:92;;;;;;:11;:22;;;;;;;;-1:-1:-1;;6613:16:92;;6590:40;;;;;;;:54;:67;;;;:54;;:67;6553:104;6532:459;;;-1:-1:-1;;;;;6690:22:92;;;;;;:11;:22;;;;;;;;-1:-1:-1;;6713:16:92;;6690:40;;;;;;;6728:1;6690:46;:57;;;6532:459;;;6825:89;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6786:22:92;;-1:-1:-1;6786:22:92;;;:11;:22;;;;;:36;;;;;;;;:128;;;;-1:-1:-1;;6786:128:92;;;;;;;;;;;-1:-1:-1;6786:128:92;;;;6932:25;;:14;:25;;;;;;6960:16;;;6932:44;;6532:459;7016:51;;;20771:25:95;;;20827:2;20812:18;;20805:34;;;-1:-1:-1;;;;;7016:51:92;;;;;20744:18:95;7016:51:92;;;;;;;6455:619;6306:768;;;;:::o;7438:295:50:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:50;7635:17;;7608:119;7683:33;7691:10;7703:12;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:50;;;;;;;;:::i;14:173:95:-;82:20;;-1:-1:-1;;;;;131:31:95;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:156::-;258:20;;318:4;307:16;;297:27;;287:55;;338:1;335;328:12;353:186;412:6;465:2;453:9;444:7;440:23;436:32;433:52;;;481:1;478;471:12;433:52;504:29;523:9;504:29;:::i;544:260::-;612:6;620;673:2;661:9;652:7;648:23;644:32;641:52;;;689:1;686;679:12;641:52;712:29;731:9;712:29;:::i;:::-;702:39;;760:38;794:2;783:9;779:18;760:38;:::i;:::-;750:48;;544:260;;;;;:::o;809:328::-;886:6;894;902;955:2;943:9;934:7;930:23;926:32;923:52;;;971:1;968;961:12;923:52;994:29;1013:9;994:29;:::i;:::-;984:39;;1042:38;1076:2;1065:9;1061:18;1042:38;:::i;:::-;1032:48;;1127:2;1116:9;1112:18;1099:32;1089:42;;809:328;;;;;:::o;1142:606::-;1253:6;1261;1269;1277;1285;1293;1301;1354:3;1342:9;1333:7;1329:23;1325:33;1322:53;;;1371:1;1368;1361:12;1322:53;1394:29;1413:9;1394:29;:::i;:::-;1384:39;;1442:38;1476:2;1465:9;1461:18;1442:38;:::i;:::-;1432:48;;1527:2;1516:9;1512:18;1499:32;1489:42;;1578:2;1567:9;1563:18;1550:32;1540:42;;1601:37;1633:3;1622:9;1618:19;1601:37;:::i;:::-;1591:47;;1685:3;1674:9;1670:19;1657:33;1647:43;;1737:3;1726:9;1722:19;1709:33;1699:43;;1142:606;;;;;;;;;;:::o;1753:995::-;1830:6;1838;1891:2;1879:9;1870:7;1866:23;1862:32;1859:52;;;1907:1;1904;1897:12;1859:52;1930:29;1949:9;1930:29;:::i;:::-;1920:39;;2010:2;1999:9;1995:18;1982:32;2033:18;2074:2;2066:6;2063:14;2060:34;;;2090:1;2087;2080:12;2060:34;2128:6;2117:9;2113:22;2103:32;;2173:7;2166:4;2162:2;2158:13;2154:27;2144:55;;2195:1;2192;2185:12;2144:55;2231:2;2218:16;2253:2;2249;2246:10;2243:36;;;2259:18;;:::i;:::-;2334:2;2328:9;2302:2;2388:13;;-1:-1:-1;;2384:22:95;;;2408:2;2380:31;2376:40;2364:53;;;2432:18;;;2452:22;;;2429:46;2426:72;;;2478:18;;:::i;:::-;2518:10;2514:2;2507:22;2553:2;2545:6;2538:18;2593:7;2588:2;2583;2579;2575:11;2571:20;2568:33;2565:53;;;2614:1;2611;2604:12;2565:53;2670:2;2665;2661;2657:11;2652:2;2644:6;2640:15;2627:46;2715:1;2710:2;2705;2697:6;2693:15;2689:24;2682:35;2736:6;2726:16;;;;;;;1753:995;;;;;:::o;2753:254::-;2821:6;2829;2882:2;2870:9;2861:7;2857:23;2853:32;2850:52;;;2898:1;2895;2888:12;2850:52;2921:29;2940:9;2921:29;:::i;:::-;2911:39;2997:2;2982:18;;;;2969:32;;-1:-1:-1;;;2753:254:95:o;3012:531::-;3114:6;3122;3130;3138;3146;3154;3207:3;3195:9;3186:7;3182:23;3178:33;3175:53;;;3224:1;3221;3214:12;3175:53;3247:29;3266:9;3247:29;:::i;:::-;3237:39;;3323:2;3312:9;3308:18;3295:32;3285:42;;3374:2;3363:9;3359:18;3346:32;3336:42;;3397:36;3429:2;3418:9;3414:18;3397:36;:::i;:::-;3387:46;;3480:3;3469:9;3465:19;3452:33;3442:43;;3532:3;3521:9;3517:19;3504:33;3494:43;;3012:531;;;;;;;;:::o;3548:184::-;3618:6;3671:2;3659:9;3650:7;3646:23;3642:32;3639:52;;;3687:1;3684;3677:12;3639:52;-1:-1:-1;3710:16:95;;3548:184;-1:-1:-1;3548:184:95:o;3737:182::-;3794:6;3847:2;3835:9;3826:7;3822:23;3818:32;3815:52;;;3863:1;3860;3853:12;3815:52;3886:27;3903:9;3886:27;:::i;3924:274::-;4053:3;4091:6;4085:13;4107:53;4153:6;4148:3;4141:4;4133:6;4129:17;4107:53;:::i;:::-;4176:16;;;;;3924:274;-1:-1:-1;;3924:274:95:o;7673:383::-;7822:2;7811:9;7804:21;7785:4;7854:6;7848:13;7897:6;7892:2;7881:9;7877:18;7870:34;7913:66;7972:6;7967:2;7956:9;7952:18;7947:2;7939:6;7935:15;7913:66;:::i;:::-;8040:2;8019:15;-1:-1:-1;;8015:29:95;8000:45;;;;8047:2;7996:54;;7673:383;-1:-1:-1;;7673:383:95:o;11103:408::-;11305:2;11287:21;;;11344:2;11324:18;;;11317:30;11383:34;11378:2;11363:18;;11356:62;-1:-1:-1;;;11449:2:95;11434:18;;11427:42;11501:3;11486:19;;11103:408::o;13403:::-;13605:2;13587:21;;;13644:2;13624:18;;;13617:30;13683:34;13678:2;13663:18;;13656:62;-1:-1:-1;;;13749:2:95;13734:18;;13727:42;13801:3;13786:19;;13403:408::o;18910:407::-;19112:2;19094:21;;;19151:2;19131:18;;;19124:30;19190:34;19185:2;19170:18;;19163:62;-1:-1:-1;;;19256:2:95;19241:18;;19234:41;19307:3;19292:19;;18910:407::o;21307:128::-;21347:3;21378:1;21374:6;21371:1;21368:13;21365:39;;;21384:18;;:::i;:::-;-1:-1:-1;21420:9:95;;21307:128::o;21440:258::-;21512:1;21522:113;21536:6;21533:1;21530:13;21522:113;;;21612:11;;;21606:18;21593:11;;;21586:39;21558:2;21551:10;21522:113;;;21653:6;21650:1;21647:13;21644:48;;;-1:-1:-1;;21688:1:95;21670:16;;21663:27;21440:258::o;21703:380::-;21782:1;21778:12;;;;21825;;;21846:61;;21900:4;21892:6;21888:17;21878:27;;21846:61;21953:2;21945:6;21942:14;21922:18;21919:38;21916:161;;;21999:10;21994:3;21990:20;21987:1;21980:31;22034:4;22031:1;22024:15;22062:4;22059:1;22052:15;22088:135;22127:3;-1:-1:-1;;22148:17:95;;22145:43;;;22168:18;;:::i;:::-;-1:-1:-1;22215:1:95;22204:13;;22088:135::o;22228:127::-;22289:10;22284:3;22280:20;22277:1;22270:31;22320:4;22317:1;22310:15;22344:4;22341:1;22334:15;22492:127;22553:10;22548:3;22544:20;22541:1;22534:31;22584:4;22581:1;22574:15;22608:4;22605:1;22598:15;22624:127;22685:10;22680:3;22676:20;22673:1;22666:31;22716:4;22713:1;22706:15;22740:4;22737:1;22730:15"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "2101400",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "DOMAIN_SEPARATOR()": "infinite",
        "allowance(address,address)": "infinite",
        "approve(address,uint256)": "24696",
        "baal()": "2447",
        "balanceOf(address)": "2616",
        "burn(address,uint256)": "infinite",
        "checkpoints(address,uint256)": "4888",
        "decimals()": "280",
        "decreaseAllowance(address,uint256)": "27017",
        "delegate(address)": "110952",
        "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
        "delegates(address)": "2691",
        "delegationNonces(address)": "2555",
        "getCheckpoint(address,uint256)": "4961",
        "getPastVotes(address,uint256)": "infinite",
        "getVotes(address)": "infinite",
        "increaseAllowance(address,uint256)": "27050",
        "mint(address,uint256)": "infinite",
        "name()": "infinite",
        "nonces(address)": "2605",
        "now()": "247",
        "numCheckpoints(address)": "2576",
        "owner()": "2420",
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
        "proxiableUUID()": "infinite",
        "renounceOwnership()": "infinite",
        "setUp(uint8)": "infinite",
        "symbol()": "infinite",
        "totalSupply()": "2327",
        "transfer(address,uint256)": "infinite",
        "transferFrom(address,address,uint256)": "infinite",
        "transferOwnership(address)": "28468",
        "upgradeTo(address)": "infinite",
        "upgradeToAndCall(address,bytes)": "infinite",
        "version()": "2441"
      },
      "internal": {
        "_authorizeUpgrade(address)": "infinite",
        "_beforeTokenTransfer(address,address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "DOMAIN_SEPARATOR()": "3644e515",
      "allowance(address,address)": "dd62ed3e",
      "approve(address,uint256)": "095ea7b3",
      "baal()": "e5a2a2a5",
      "balanceOf(address)": "70a08231",
      "burn(address,uint256)": "9dc29fac",
      "checkpoints(address,uint256)": "0cdfebfa",
      "decimals()": "313ce567",
      "decreaseAllowance(address,uint256)": "a457c2d7",
      "delegate(address)": "5c19a95c",
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "c3cda520",
      "delegates(address)": "587cde1e",
      "delegationNonces(address)": "03c8a3c6",
      "getCheckpoint(address,uint256)": "47f761f5",
      "getPastVotes(address,uint256)": "3a46b1a8",
      "getVotes(address)": "9ab24eb0",
      "increaseAllowance(address,uint256)": "39509351",
      "mint(address,uint256)": "40c10f19",
      "name()": "06fdde03",
      "nonces(address)": "7ecebe00",
      "now()": "8abe09f2",
      "numCheckpoints(address)": "6fcfff45",
      "owner()": "8da5cb5b",
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
      "proxiableUUID()": "52d1902d",
      "renounceOwnership()": "715018a6",
      "setUp(uint8)": "e258a72e",
      "symbol()": "95d89b41",
      "totalSupply()": "18160ddd",
      "transfer(address,uint256)": "a9059cbb",
      "transferFrom(address,address,uint256)": "23b872dd",
      "transferOwnership(address)": "f2fde38b",
      "upgradeTo(address)": "3659cfe6",
      "upgradeToAndCall(address,bytes)": "4f1ef286",
      "version()": "54fd4d50"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baal\",\"outputs\":[{\"internalType\":\"contract IBaal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromTimePoint\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegationNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nCheckpoints\",\"type\":\"uint256\"}],\"name\":\"getCheckpoint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromTimePoint\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct BaalVotes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timePoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timePoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_version\",\"type\":\"uint8\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"params\":{\"account\":\"Address to lose shares\",\"amount\":\"Amount to burn\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to.\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate 'votes' to.\",\"expiry\":\"The time at which to expire the signature.\",\"nonce\":\"The contract state required to match the signature.\",\"r\":\"The r signature\",\"s\":\"The s signature\",\"v\":\"The v signature\"}},\"getPastVotes(address,uint256)\":{\"params\":{\"account\":\"The user to check `votes` for.\",\"timePoint\":\"The unix time to check `votes` for.\"},\"returns\":{\"votes\":\"Past `votes` delegated to `account`.\"}},\"getVotes(address)\":{\"params\":{\"account\":\"The user to check delegated `votes` for.\"},\"returns\":{\"votes\":\"Current `votes` delegated to `account`.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"params\":{\"amount\":\"Amount to mint\",\"recipient\":\"Address to receive shares\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"now()\":{\"returns\":{\"timePoint\":\"returns unix epoch timestamp\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setUp(uint8)\":{\"params\":{\"_version\":\"new version\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Shares\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"owner-only function to burn shares.\"},\"delegate(address)\":{\"notice\":\"Delegate votes from user to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from `signer` to `delegatee` with EIP-712 signature.\"},\"getPastVotes(address,uint256)\":{\"notice\":\"Returns the prior number of `votes` for `account` as of `timePoint`.\"},\"getVotes(address)\":{\"notice\":\"Returns the current delegated `vote` balance for `account`.\"},\"mint(address,uint256)\":{\"notice\":\"owner-only function to mint shares.\"},\"now()\":{\"notice\":\"Returns the current timepoint.\"},\"setUp(uint8)\":{\"notice\":\"Configure shares - called by Baal on summon\"}},\"notice\":\"Accounting for Baal non voting shares\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/BaalLessToken.sol\":\"BaalLessShares\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IBaal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IBaal {\\n    function lootToken() external view returns (address);\\n    function sharesToken() external view returns (address);\\n    function votingPeriod() external view returns (uint32);\\n    function gracePeriod() external view returns (uint32);\\n    function proposalCount() external view returns (uint32);\\n    function proposalOffering() external view returns (uint256);\\n    function quorumPercent() external view returns (uint256);\\n    function sponsorThreshold() external view returns (uint256);\\n    function minRetentionPercent() external view returns (uint256);\\n    function latestSponsoredProposalId() external view returns (uint32);\\n\\n    function setUp(bytes memory initializationParams) external;\\n    function multisendLibrary() external view returns (address);\\n    // Module\\n    function avatar() external view returns (address);\\n    function target() external view returns (address);\\n    function setAvatar(address avatar) external;\\n    function setTarget(address avatar) external;\\n    // BaseRelayRecipient\\n    function trustedForwarder() external view returns (address);\\n    function setTrustedForwarder(address trustedForwarderAddress) external;\\n\\n    function mintLoot(address[] calldata to, uint256[] calldata amount) external;\\n    function burnLoot(address[] calldata from, uint256[] calldata amount) external;\\n    function mintShares(address[] calldata to, uint256[] calldata amount) external;\\n    function burnShares(address[] calldata from, uint256[] calldata amount) external;\\n    function totalLoot() external view returns (uint256);\\n    function totalShares() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function lootPaused() external view returns (bool);\\n    function sharesPaused() external view returns (bool);\\n    \\n    function shamans(address shaman) external view returns (uint256);\\n    function setShamans(address[] calldata shamans, uint256[] calldata permissions) external;\\n    function isAdmin(address shaman) external view returns (bool);\\n    function isManager(address shaman) external view returns (bool);\\n    function isGovernor(address shaman) external view returns (bool);\\n    function lockAdmin() external;\\n    function lockManager() external;\\n    function lockGovernor() external;\\n    function adminLock() external view returns (bool);\\n    function managerLock() external view returns (bool);\\n    function governorLock() external view returns (bool);\\n    function setAdminConfig(bool pauseShares, bool pauseLoot) external;\\n    function setGovernanceConfig(bytes memory governanceConfig) external;\\n\\n    function submitProposal(\\n        bytes calldata proposalData,\\n        uint32 expiration,\\n        uint256 baalGas,\\n        string calldata details\\n    ) external payable returns (uint256);\\n    function sponsorProposal(uint32 id) external;\\n    function processProposal(uint32 id, bytes calldata proposalData) external;\\n    function cancelProposal(uint32 id) external;\\n    function getProposalStatus(uint32 id) external returns (bool[4] memory);\\n    function submitVote(uint32 id, bool approved) external;\\n    function submitVoteWithSig(\\n        address voter,\\n        uint256 expiry,\\n        uint256 nonce,\\n        uint32 id,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function executeAsBaal(address to, uint256 value, bytes calldata data) external;\\n    function ragequit(address to, uint256 sharesToBurn, uint256 lootToBurn, address[] calldata tokens) external;\\n\\n    function hashOperation(bytes memory transactions) external pure returns (bytes32);\\n    function encodeMultisend(bytes[] memory calls, address target) external pure returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa8e49237a041f30caf45f9999fe28fdaac6a847530f411761a9b493022622948\",\"license\":\"MIT\"},\"contracts/mock/BaalLessToken.sol\":{\"content\":\"pragma solidity 0.8.7;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"../utils/BaalVotes.sol\\\";\\nimport \\\"../interfaces/IBaal.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title Shares\\n/// @notice Accounting for Baal non voting shares\\ncontract BaalLessShares is BaalVotes, OwnableUpgradeable, UUPSUpgradeable {\\n    // Baal Config\\n    IBaal public baal;\\n    uint8 public version;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Configure shares - called by Baal on summon\\n    /// @param _version new version\\n    function setUp(uint8 _version)\\n        external\\n        reinitializer(_version)\\n    {\\n        baal = IBaal(address(0)); /*Configure Baal to setup sender*/\\n        version = _version;\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n\\n    /// @notice owner-only function to mint shares.\\n    /// @param recipient Address to receive shares\\n    /// @param amount Amount to mint\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        unchecked {\\n            if (totalSupply() + amount <= type(uint256).max / 2) {\\n                _mint(recipient, amount);\\n            }\\n        }\\n    }\\n\\n    /// @notice owner-only function to burn shares.\\n    /// @param account Address to lose shares\\n    /// @param amount Amount to burn\\n    function burn(address account, uint256 amount) external onlyOwner {\\n        _burn(account, amount);\\n    }\\n\\n    /// @notice new before transfer\\n    /// @dev Allows transfers if msg.sender is Baal which enables minting and burning\\n    /// @param from The address of the source account.\\n    /// @param to The address of the destination account.\\n    /// @param amount The number of `shares` tokens to transfer.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(BaalVotes) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x943f7ee4131272de5f804c534aa9aefff96e9d6f37c4d8fdc68f59f926e84d45\",\"license\":\"MIT\"},\"contracts/utils/BaalVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"./DelegationEIP712Upgradeable.sol\\\";\\n\\n/**\\n * @dev similar to Openzeplin ERC20Votes\\n *\\n * uses timestamp instead of block.number and auto self delegates.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors  {getPriorVotes}.\\n *\\n */\\nabstract contract BaalVotes is ERC20PermitUpgradeable, DelegationEIP712Upgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n\\n    struct Checkpoint {\\n        /*Baal checkpoint for marking number of delegated votes*/\\n        uint32 fromTimePoint; /*unix time for referencing voting balance*/\\n        uint256 votes; /*votes at given unix time*/\\n    }\\n\\n    // DELEGATE TRACKING\\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints; /*maps record of vote `checkpoints` for each account by index*/\\n    mapping(address => uint256) public numCheckpoints; /*maps number of `checkpoints` for each account*/\\n    mapping(address => address) public delegates; /*maps record of each account's `shares` delegate*/\\n    mapping(address => uint256) public delegationNonces; /*nonces for delegating by signature*/\\n\\n    // SIGNATURE HELPERS\\n    bytes32 constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(string name,address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    ); /*emits when an account changes its voting delegate*/\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    ); /*emits when a delegate account's voting balance changes*/\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        /*If recipient is receiving their first shares, auto-self delegate*/\\n        if (balanceOf(to) == 0 && numCheckpoints[to] == 0 && amount > 0) {\\n            delegates[to] = to;\\n        }\\n\\n        _moveDelegates(delegates[from], delegates[to], amount);\\n    }\\n\\n    /// @notice Delegate votes from user to `delegatee`.\\n    /// @param delegatee The address to delegate votes to.\\n    function delegate(address delegatee) external virtual {\\n        _delegate(msg.sender, delegatee);\\n    }\\n\\n    /// @notice Delegates votes from `signer` to `delegatee` with EIP-712 signature.\\n    /// @param delegatee The address to delegate 'votes' to.\\n    /// @param nonce The contract state required to match the signature.\\n    /// @param expiry The time at which to expire the signature.\\n    /// @param v The v signature\\n    /// @param r The r signature\\n    /// @param s The s signature\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(now() <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4Delegation(\\n                keccak256(\\n                    abi.encode(\\n                        DELEGATION_TYPEHASH,\\n                        keccak256(abi.encodePacked(name())),\\n                        delegatee,\\n                        nonce,\\n                        expiry\\n                    )\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer != address(0), \\\"ERC20Votes: invalid signer (0x0)\\\");\\n        require(nonce == delegationNonces[signer], \\\"ERC20Votes: invalid nonce\\\");\\n\\n        delegationNonces[signer]++;\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /// @notice Delegates Baal voting weight.\\n    /// @param delegator The address to delegate 'votes' from.\\n    /// @param delegatee The address to delegate 'votes' to.\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        require(balanceOf(delegator) > 0, \\\"!shares\\\");\\n        address currentDelegate = delegates[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        _moveDelegates(\\n            currentDelegate,\\n            delegatee,\\n            uint256(balanceOf(delegator))\\n        );\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n    }\\n\\n    /// @notice Elaborates delegate update - cf., 'Compound Governance'.\\n    /// @param srcRep The address to delegate 'votes' from.\\n    /// @param dstRep The address to delegate 'votes' to.\\n    /// @param amount The amount of votes to delegate\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) private {\\n        unchecked {\\n            if (srcRep != dstRep && amount != 0) {\\n                if (srcRep != address(0)) {\\n                    uint256 srcRepNum = numCheckpoints[srcRep];\\n                    uint256 srcRepOld = srcRepNum != 0\\n                        ? getCheckpoint(srcRep, srcRepNum - 1).votes\\n                        : 0;\\n                    uint256 srcRepNew = srcRepOld - amount;\\n                    _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n                }\\n\\n                if (dstRep != address(0)) {\\n                    uint256 dstRepNum = numCheckpoints[dstRep];\\n                    uint256 dstRepOld = dstRepNum != 0\\n                        ? getCheckpoint(dstRep, dstRepNum - 1).votes\\n                        : 0;\\n                    uint256 dstRepNew = dstRepOld + amount;\\n                    _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Elaborates delegate update - cf., 'Compound Governance'.\\n    /// @param delegatee The address to snapshot\\n    /// @param nCheckpoints The number of checkpoints delegatee has\\n    /// @param oldVotes The number of votes the delegatee had\\n    /// @param newVotes The number of votes the delegate has now\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint256 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) private {\\n        uint32 timePoint = uint32(now());\\n\\n        unchecked {\\n            if (\\n                nCheckpoints != 0 &&\\n                checkpoints[delegatee][nCheckpoints - 1].fromTimePoint == timePoint\\n            ) {\\n                checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n            } else {\\n                checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                    timePoint,\\n                    newVotes\\n                );\\n                numCheckpoints[delegatee] = nCheckpoints + 1;\\n            }\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    /// @notice Returns the current timepoint.\\n    /// @return timePoint returns unix epoch timestamp\\n    function now() public view returns (uint256 timePoint) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Returns the prior number of `votes` for `account` as of `timePoint`.\\n    /// @param account The user to check `votes` for.\\n    /// @param timePoint The unix time to check `votes` for.\\n    /// @return votes Past `votes` delegated to `account`.\\n    function getPastVotes(address account, uint256 timePoint)\\n        external\\n        view\\n        virtual\\n        returns (uint256 votes)\\n    {\\n        require(timePoint < now(), \\\"!determined\\\"); /* Prior votes must be in the past*/\\n\\n        uint256 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) return 0;\\n\\n        unchecked {\\n            if (\\n                getCheckpoint(account, nCheckpoints - 1).fromTimePoint <=\\n                timePoint\\n            ) return getCheckpoint(account, nCheckpoints - 1).votes; /* If most recent checkpoint is at or after desired timepoint, return*/\\n            if (getCheckpoint(account, 0).fromTimePoint > timePoint) return 0;\\n            uint256 lower = 0;\\n            uint256 upper = nCheckpoints - 1;\\n            while (upper > lower) {\\n                /* Binary search to look for highest timePoint before desired timePoint*/\\n                uint256 center = upper - (upper - lower) / 2;\\n                Checkpoint memory cp = getCheckpoint(account, center);\\n                if (cp.fromTimePoint == timePoint) return cp.votes;\\n                else if (cp.fromTimePoint < timePoint) lower = center;\\n                else upper = center - 1;\\n            }\\n            votes = getCheckpoint(account, lower).votes;\\n        }\\n    }\\n\\n    /// @notice Returns the current delegated `vote` balance for `account`.\\n    /// @param account The user to check delegated `votes` for.\\n    /// @return votes Current `votes` delegated to `account`.\\n    function getVotes(address account)\\n        external\\n        view\\n        virtual\\n        returns (uint256 votes)\\n    {\\n        uint256 nCheckpoints = numCheckpoints[account]; /*Get most recent checkpoint, or 0 if no checkpoints*/\\n        unchecked {\\n            votes = nCheckpoints != 0\\n                ? getCheckpoint(account, nCheckpoints - 1).votes\\n                : 0;\\n        }\\n    }\\n\\n    function getCheckpoint(address delegatee, uint256 nCheckpoints)\\n        public\\n        view\\n        virtual\\n        returns (Checkpoint memory)\\n    {\\n        return checkpoints[delegatee][nCheckpoints];\\n    }\\n}\\n\",\"keccak256\":\"0x2003d3afd190a6c73b8e29970cdd84f0deb9bc543ed63d058451020293486348\",\"license\":\"MIT\"},\"contracts/utils/DelegationEIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4Delegation}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4Delegation}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract DelegationEIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME_DELEGATION;\\n    bytes32 private _HASHED_VERSION_DELEGATION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init_delegation(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained_delegation(name, version);\\n    }\\n\\n    function __EIP712_init_unchained_delegation(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME_DELEGATION = hashedName;\\n        _HASHED_VERSION_DELEGATION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4Delegation() internal view returns (bytes32) {\\n        return _buildDomainSeparatorDelegation(_TYPE_HASH, _EIP712NameHashDelegation(), _EIP712VersionHashDelegation());\\n    }\\n\\n    function _buildDomainSeparatorDelegation(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4Delegation(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4Delegation(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4Delegation(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHashDelegation() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME_DELEGATION;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHashDelegation() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION_DELEGATION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaaca6373c8a75310ffcbbd63e8d0689ab6e404c96366e3fa4158bd3957924089\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 4454,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 4457,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6723,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4971,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4977,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4979,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 4981,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 4983,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 5563,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 7403,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 7405,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "102",
        "type": "t_bytes32"
      },
      {
        "astId": 7543,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6041,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_nonces",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_struct(Counter)6730_storage)"
      },
      {
        "astId": 6049,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 6205,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16989,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_HASHED_NAME_DELEGATION",
        "offset": 0,
        "slot": "204",
        "type": "t_bytes32"
      },
      {
        "astId": 16991,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_HASHED_VERSION_DELEGATION",
        "offset": 0,
        "slot": "205",
        "type": "t_bytes32"
      },
      {
        "astId": 17129,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16390,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "checkpoints",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)16383_storage))"
      },
      {
        "astId": 16394,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16398,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "delegates",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 16402,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "delegationNonces",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3937,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "_owner",
        "offset": 0,
        "slot": "260",
        "type": "t_address"
      },
      {
        "astId": 4057,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "261",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4436,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "310",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4751,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "__gap",
        "offset": 0,
        "slot": "360",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15331,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "baal",
        "offset": 0,
        "slot": "410",
        "type": "t_contract(IBaal)14873"
      },
      {
        "astId": 15333,
        "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
        "label": "version",
        "offset": 20,
        "slot": "410",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBaal)14873": {
        "encoding": "inplace",
        "label": "contract IBaal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)16383_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BaalVotes.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Checkpoint)16383_storage)"
      },
      "t_mapping(t_address,t_struct(Counter)6730_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)6730_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Checkpoint)16383_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BaalVotes.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)16383_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)16383_storage": {
        "encoding": "inplace",
        "label": "struct BaalVotes.Checkpoint",
        "members": [
          {
            "astId": 16380,
            "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
            "label": "fromTimePoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16382,
            "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)6730_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 6729,
            "contract": "contracts/mock/BaalLessToken.sol:BaalLessShares",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256)": {
        "notice": "owner-only function to burn shares."
      },
      "delegate(address)": {
        "notice": "Delegate votes from user to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from `signer` to `delegatee` with EIP-712 signature."
      },
      "getPastVotes(address,uint256)": {
        "notice": "Returns the prior number of `votes` for `account` as of `timePoint`."
      },
      "getVotes(address)": {
        "notice": "Returns the current delegated `vote` balance for `account`."
      },
      "mint(address,uint256)": {
        "notice": "owner-only function to mint shares."
      },
      "now()": {
        "notice": "Returns the current timepoint."
      },
      "setUp(uint8)": {
        "notice": "Configure shares - called by Baal on summon"
      }
    },
    "notice": "Accounting for Baal non voting shares",
    "version": 1
  }
}