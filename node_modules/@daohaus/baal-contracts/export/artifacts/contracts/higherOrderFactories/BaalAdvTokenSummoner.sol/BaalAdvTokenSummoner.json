{
  "contractName": "BaalAdvTokenSummoner",
  "sourceName": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lootToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sharesToken",
          "type": "address"
        }
      ],
      "name": "DeployBaalTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "summoner",
          "type": "address"
        }
      ],
      "name": "setSummoner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_baalSummoner",
      "outputs": [
        {
          "internalType": "contract IBaalSummoner",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baalSummoner",
          "type": "address"
        }
      ],
      "name": "setSummonerAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forwarderAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_saltNonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "initializationMintParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "initializationTokenParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "postInitializationActions",
          "type": "bytes[]"
        }
      ],
      "name": "summonBaalFromReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c6125de610052600039600081816104ec01528181610538015281816105e10152818161062401526106c001526125de6000f3fe6080604052600436106200009d5760003560e01c8063715018a61162000060578063715018a6146200016b5780638129fc1c14620001835780638da5cb5b146200019b578063bb6decc814620001bb578063f2fde38b14620001e057600080fd5b806314b630f914620000a25780631f1bb0ef14620000e15780633659cfe614620001085780634f1ef286146200012d57806352d1902d1462000144575b600080fd5b348015620000af57600080fd5b5060c954620000c4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015620000ee57600080fd5b50620001066200010036600462001621565b62000205565b005b3480156200011557600080fd5b506200010662000127366004620015e1565b620004e1565b620001066200013e36600462001728565b620005d6565b3480156200015157600080fd5b506200015c620006b3565b604051908152602001620000d8565b3480156200017857600080fd5b506200010662000769565b3480156200019057600080fd5b506200010662000781565b348015620001a857600080fd5b506033546001600160a01b0316620000c4565b348015620001c857600080fd5b5062000106620001da366004620015e1565b620008a5565b348015620001ed57600080fd5b5062000106620001ff366004620015e1565b62000945565b600080620002148686620009c1565b91509150620002268888848462000d1e565b600060c960009054906101000a90046001600160a01b03166001600160a01b031663209f3695836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200028657600080fd5b505afa1580156200029b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002c59190810190620018ab565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620002ff57600080fd5b505afa15801562000314573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200033e9190810190620018ab565b8f8f8888604051602001620003599695949392919062001ba3565b60408051601f198184030181528282019091526012825271222420b23b2a37b5b2b729bab6b6b7b732b960711b602083015290889088908f906200039d9062001d69565b6040518663ffffffff1660e01b8152600401620003bf95949392919062001aa3565b602060405180830381600087803b158015620003da57600080fd5b505af1158015620003ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000415919062001601565b60405163f2fde38b60e01b81526001600160a01b0380831660048301529192509084169063f2fde38b90602401600060405180830381600087803b1580156200045d57600080fd5b505af115801562000472573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0384811660048301528516925063f2fde38b9150602401600060405180830381600087803b158015620004ba57600080fd5b505af1158015620004cf573d6000803e3d6000fd5b50505050505050505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620005365760405162461bcd60e51b81526004016200052d9062001c00565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200058160008051602062002562833981519152546001600160a01b031690565b6001600160a01b031614620005aa5760405162461bcd60e51b81526004016200052d9062001c4c565b620005b58162000f5f565b60408051600080825260208201909252620005d39183919062000f69565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620006225760405162461bcd60e51b81526004016200052d9062001c00565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200066d60008051602062002562833981519152546001600160a01b031690565b6001600160a01b031614620006965760405162461bcd60e51b81526004016200052d9062001c4c565b620006a18262000f5f565b620006af8282600162000f69565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620007555760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016200052d565b506000805160206200256283398151915290565b62000773620010f6565b6200077f600062001152565b565b600054610100900460ff1615808015620007a25750600054600160ff909116105b80620007be5750303b158015620007be575060005460ff166001145b620008235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200052d565b6000805460ff19166001179055801562000847576000805461ff0019166101001790555b62000851620011a4565b6200085b620011d8565b8015620005d3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b620008af620010f6565b6001600160a01b038116620008f65760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016200052d565b60c980546001600160a01b0319166001600160a01b0383169081179091556040519081527ff471c7a7115723e1d5e0a3b924bec97596831b94082a24d73c8c3210c6cb3b06906020016200089a565b6200094f620010f6565b6001600160a01b038116620009b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200052d565b620005d38162001152565b600080808080808080620009d8898b018b62001922565b955095509550955095509550600060c960009054906101000a90046001600160a01b03166001600160a01b031663d9118ce76040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a3557600080fd5b505afa15801562000a4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a70919062001601565b9050600060c960009054906101000a90046001600160a01b03166001600160a01b031663a23466186040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ac357600080fd5b505afa15801562000ad8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000afe919062001601565b90508163562d190d60e01b878760405160240162000b1e92919062001b7a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905162000b5d9062001497565b62000b6a92919062001a75565b604051809103906000f08015801562000b87573d6000803e3d6000fd5b5099508063562d190d60e01b898960405160240162000ba892919062001b7a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905162000be79062001497565b62000bf492919062001a75565b604051809103906000f08015801562000c11573d6000803e3d6000fd5b5098508362000c7057886001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000c5657600080fd5b505af115801562000c6b573d6000803e3d6000fd5b505050505b8262000ccc57896001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000cb257600080fd5b505af115801562000cc7573d6000803e3d6000fd5b505050505b604080516001600160a01b03808d1682528b1660208201527ffb5849d45e916a3192059973d782e08b2b3888fa796f536d99af0c7bd01ca16c910160405180910390a150505050505050509250929050565b6000808062000d308688018862001793565b9250925092508151835114801562000d49575080518351145b62000d875760405162461bcd60e51b815260206004820152600d60248201526c2161727261792070617269747960981b60448201526064016200052d565b60005b835181101562000f5557600082828151811062000dab5762000dab62001dea565b6020026020010151111562000e6a57856001600160a01b03166340c10f1985838151811062000dde5762000dde62001dea565b602002602001015185848151811062000dfb5762000dfb62001dea565b60200260200101516040518363ffffffff1660e01b815260040162000e359291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801562000e5057600080fd5b505af115801562000e65573d6000803e3d6000fd5b505050505b600083828151811062000e815762000e8162001dea565b6020026020010151111562000f4057846001600160a01b03166340c10f1985838151811062000eb45762000eb462001dea565b602002602001015185848151811062000ed15762000ed162001dea565b60200260200101516040518363ffffffff1660e01b815260040162000f0b9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801562000f2657600080fd5b505af115801562000f3b573d6000803e3d6000fd5b505050505b8062000f4c8162001dc0565b91505062000d8a565b5050505050505050565b620005d3620010f6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000fa45762000f9f8362001202565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fde57600080fd5b505afa92505050801562001011575060408051601f3d908101601f191682019092526200100e9181019062001891565b60015b620010765760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016200052d565b600080516020620025628339815191528114620010e85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016200052d565b5062000f9f838383620012a1565b6033546001600160a01b031633146200077f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200052d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16620011ce5760405162461bcd60e51b81526004016200052d9062001c98565b6200077f620012d2565b600054610100900460ff166200077f5760405162461bcd60e51b81526004016200052d9062001c98565b6001600160a01b0381163b620012715760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200052d565b6000805160206200256283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b620012ac8362001307565b600082511180620012ba5750805b1562000f9f57620012cc838362001349565b50505050565b600054610100900460ff16620012fc5760405162461bcd60e51b81526004016200052d9062001c98565b6200077f3362001152565b620013128162001202565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620013b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200052d565b600080846001600160a01b031684604051620013d0919062001a57565b600060405180830381855af49150503d80600081146200140d576040519150601f19603f3d011682016040523d82523d6000602084013e62001412565b606091505b50915091506200143d8282604051806060016040528060278152602001620025826027913962001446565b95945050505050565b606083156200145757508162001463565b6200146383836200146a565b9392505050565b8151156200147b5781518083602001fd5b8060405162461bcd60e51b81526004016200052d919062001b65565b6107358062001e2d83390190565b6000620014bc620014b68462001d3e565b62001ce3565b9050828152838383011115620014d157600080fd5b828260208301376000602084830101529392505050565b600082601f830112620014fa57600080fd5b813560206200150d620014b68362001d17565b80838252828201915082860187848660051b89010111156200152e57600080fd5b60005b858110156200154f5781358452928401929084019060010162001531565b5090979650505050505050565b803580151581146200156d57600080fd5b919050565b60008083601f8401126200158557600080fd5b50813567ffffffffffffffff8111156200159e57600080fd5b602083019150836020828501011115620015b757600080fd5b9250929050565b600082601f830112620015d057600080fd5b6200146383833560208501620014a5565b600060208284031215620015f457600080fd5b8135620014638162001e16565b6000602082840312156200161457600080fd5b8151620014638162001e16565b600080600080600080600080600060c08a8c0312156200164057600080fd5b89356200164d8162001e16565b985060208a01356200165f8162001e16565b975060408a0135965060608a013567ffffffffffffffff808211156200168457600080fd5b620016928d838e0162001572565b909850965060808c0135915080821115620016ac57600080fd5b620016ba8d838e0162001572565b909650945060a08c0135915080821115620016d457600080fd5b818c0191508c601f830112620016e957600080fd5b813581811115620016f957600080fd5b8d60208260051b85010111156200170f57600080fd5b6020830194508093505050509295985092959850929598565b600080604083850312156200173c57600080fd5b8235620017498162001e16565b9150602083013567ffffffffffffffff8111156200176657600080fd5b8301601f810185136200177857600080fd5b6200178985823560208401620014a5565b9150509250929050565b600080600060608486031215620017a957600080fd5b833567ffffffffffffffff80821115620017c257600080fd5b818601915086601f830112620017d757600080fd5b81356020620017ea620014b68362001d17565b8083825282820191508286018b848660051b89010111156200180b57600080fd5b600096505b848710156200183b578035620018268162001e16565b83526001969096019591830191830162001810565b50975050870135925050808211156200185357600080fd5b6200186187838801620014e8565b935060408601359150808211156200187857600080fd5b506200188786828701620014e8565b9150509250925092565b600060208284031215620018a457600080fd5b5051919050565b600060208284031215620018be57600080fd5b815167ffffffffffffffff811115620018d657600080fd5b8201601f81018413620018e857600080fd5b8051620018f9620014b68262001d3e565b8181528560208385010111156200190f57600080fd5b6200143d82602083016020860162001d91565b60008060008060008060c087890312156200193c57600080fd5b863567ffffffffffffffff808211156200195557600080fd5b620019638a838b01620015be565b975060208901359150808211156200197a57600080fd5b620019888a838b01620015be565b965060408901359150808211156200199f57600080fd5b620019ad8a838b01620015be565b95506060890135915080821115620019c457600080fd5b50620019d389828a01620015be565b935050620019e4608088016200155c565b9150620019f460a088016200155c565b90509295509295509295565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845262001a4381602086016020860162001d91565b601f01601f19169290920160200192915050565b6000825162001a6b81846020870162001d91565b9190910192915050565b6001600160a01b038316815260406020820181905260009062001a9b9083018462001a29565b949350505050565b60808152600062001ab8608083018862001a29565b602083820381850152818783528183019050818860051b8401018960005b8a81101562001b4c57858303601f190184528135368d9003601e1901811262001afe57600080fd5b8c01803567ffffffffffffffff81111562001b1857600080fd5b8036038e131562001b2857600080fd5b62001b37858289850162001a00565b95870195945050509084019060010162001ad6565b5050604086019790975250505050606001529392505050565b60208152600062001463602083018462001a29565b60408152600062001b8f604083018562001a29565b82810360208401526200143d818562001a29565b60c08152600062001bb860c083018962001a29565b828103602084015262001bcc818962001a29565b6001600160a01b03978816604085015295871660608401525050918416608083015290921660a09092019190915292915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff8111828210171562001d0f5762001d0f62001e00565b604052919050565b600067ffffffffffffffff82111562001d345762001d3462001e00565b5060051b60200190565b600067ffffffffffffffff82111562001d5b5762001d5b62001e00565b50601f01601f191660200190565b8051602080830151919081101562001d8b576000198160200360031b1b821691505b50919050565b60005b8381101562001dae57818101518382015260200162001d94565b83811115620012cc5750506000910152565b600060001982141562001de357634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620005d357600080fdfe6080604052604051610735380380610735833981016040819052610022916102dc565b61002e82826000610035565b505061043b565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d0838360405180606001604052806027815260200161070e602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103aa565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a0578251610299576001600160a01b0385163b6102995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102aa565b6102aa83836102b2565b949350505050565b8151156102c25781518083602001fd5b8060405162461bcd60e51b815260040161014891906103c6565b600080604083850312156102ef57600080fd5b82516001600160a01b038116811461030657600080fd5b60208401519092506001600160401b038082111561032357600080fd5b818501915085601f83011261033757600080fd5b81518181111561034957610349610425565b604051601f8201601f19908116603f0116810190838211818310171561037157610371610425565b8160405282815288602084870101111561038a57600080fd5b61039b8360208301602088016103f9565b80955050505050509250929050565b600082516103bc8184602087016103f9565b9190910192915050565b60208152600082518060208401526103e58160408501602087016103f9565b601f01601f19169190910160400192915050565b60005b838110156104145781810151838201526020016103fc565b838111156100645750506000910152565b634e487b7160e01b600052604160045260246000fd5b6102c48061044a6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61009f565b565b606061004e8383604051806060016040528060278152602001610268602791396100c3565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100be573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516100e091906101e8565b600060405180830381855af49150503d806000811461011b576040519150601f19603f3d011682016040523d82523d6000602084013e610120565b606091505b50915091506101318683838761013b565b9695505050505050565b606083156101ac5782516101a5576001600160a01b0385163b6101a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b50816101b6565b6101b683836101be565b949350505050565b8151156101ce5781518083602001fd5b8060405162461bcd60e51b815260040161019c9190610204565b600082516101fa818460208701610237565b9190910192915050565b6020815260008251806020840152610223816040850160208701610237565b601f01601f19169190910160400192915050565b60005b8381101561025257818101518382015260200161023a565b83811115610261576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122051cce14dd9337037379bd43ee81331c1b371dbeb3f61c2ba0ccdb3ad0e551a9664736f6c63430008070033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122071f343cb070a5857463d258bcd92362b8772275c9b8c6dd19edcec82baaffd6364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106200009d5760003560e01c8063715018a61162000060578063715018a6146200016b5780638129fc1c14620001835780638da5cb5b146200019b578063bb6decc814620001bb578063f2fde38b14620001e057600080fd5b806314b630f914620000a25780631f1bb0ef14620000e15780633659cfe614620001085780634f1ef286146200012d57806352d1902d1462000144575b600080fd5b348015620000af57600080fd5b5060c954620000c4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015620000ee57600080fd5b50620001066200010036600462001621565b62000205565b005b3480156200011557600080fd5b506200010662000127366004620015e1565b620004e1565b620001066200013e36600462001728565b620005d6565b3480156200015157600080fd5b506200015c620006b3565b604051908152602001620000d8565b3480156200017857600080fd5b506200010662000769565b3480156200019057600080fd5b506200010662000781565b348015620001a857600080fd5b506033546001600160a01b0316620000c4565b348015620001c857600080fd5b5062000106620001da366004620015e1565b620008a5565b348015620001ed57600080fd5b5062000106620001ff366004620015e1565b62000945565b600080620002148686620009c1565b91509150620002268888848462000d1e565b600060c960009054906101000a90046001600160a01b03166001600160a01b031663209f3695836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200028657600080fd5b505afa1580156200029b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002c59190810190620018ab565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620002ff57600080fd5b505afa15801562000314573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200033e9190810190620018ab565b8f8f8888604051602001620003599695949392919062001ba3565b60408051601f198184030181528282019091526012825271222420b23b2a37b5b2b729bab6b6b7b732b960711b602083015290889088908f906200039d9062001d69565b6040518663ffffffff1660e01b8152600401620003bf95949392919062001aa3565b602060405180830381600087803b158015620003da57600080fd5b505af1158015620003ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000415919062001601565b60405163f2fde38b60e01b81526001600160a01b0380831660048301529192509084169063f2fde38b90602401600060405180830381600087803b1580156200045d57600080fd5b505af115801562000472573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0384811660048301528516925063f2fde38b9150602401600060405180830381600087803b158015620004ba57600080fd5b505af1158015620004cf573d6000803e3d6000fd5b50505050505050505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620005365760405162461bcd60e51b81526004016200052d9062001c00565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200058160008051602062002562833981519152546001600160a01b031690565b6001600160a01b031614620005aa5760405162461bcd60e51b81526004016200052d9062001c4c565b620005b58162000f5f565b60408051600080825260208201909252620005d39183919062000f69565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620006225760405162461bcd60e51b81526004016200052d9062001c00565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200066d60008051602062002562833981519152546001600160a01b031690565b6001600160a01b031614620006965760405162461bcd60e51b81526004016200052d9062001c4c565b620006a18262000f5f565b620006af8282600162000f69565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620007555760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016200052d565b506000805160206200256283398151915290565b62000773620010f6565b6200077f600062001152565b565b600054610100900460ff1615808015620007a25750600054600160ff909116105b80620007be5750303b158015620007be575060005460ff166001145b620008235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200052d565b6000805460ff19166001179055801562000847576000805461ff0019166101001790555b62000851620011a4565b6200085b620011d8565b8015620005d3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b620008af620010f6565b6001600160a01b038116620008f65760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016200052d565b60c980546001600160a01b0319166001600160a01b0383169081179091556040519081527ff471c7a7115723e1d5e0a3b924bec97596831b94082a24d73c8c3210c6cb3b06906020016200089a565b6200094f620010f6565b6001600160a01b038116620009b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200052d565b620005d38162001152565b600080808080808080620009d8898b018b62001922565b955095509550955095509550600060c960009054906101000a90046001600160a01b03166001600160a01b031663d9118ce76040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a3557600080fd5b505afa15801562000a4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a70919062001601565b9050600060c960009054906101000a90046001600160a01b03166001600160a01b031663a23466186040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ac357600080fd5b505afa15801562000ad8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000afe919062001601565b90508163562d190d60e01b878760405160240162000b1e92919062001b7a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905162000b5d9062001497565b62000b6a92919062001a75565b604051809103906000f08015801562000b87573d6000803e3d6000fd5b5099508063562d190d60e01b898960405160240162000ba892919062001b7a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905162000be79062001497565b62000bf492919062001a75565b604051809103906000f08015801562000c11573d6000803e3d6000fd5b5098508362000c7057886001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000c5657600080fd5b505af115801562000c6b573d6000803e3d6000fd5b505050505b8262000ccc57896001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000cb257600080fd5b505af115801562000cc7573d6000803e3d6000fd5b505050505b604080516001600160a01b03808d1682528b1660208201527ffb5849d45e916a3192059973d782e08b2b3888fa796f536d99af0c7bd01ca16c910160405180910390a150505050505050509250929050565b6000808062000d308688018862001793565b9250925092508151835114801562000d49575080518351145b62000d875760405162461bcd60e51b815260206004820152600d60248201526c2161727261792070617269747960981b60448201526064016200052d565b60005b835181101562000f5557600082828151811062000dab5762000dab62001dea565b6020026020010151111562000e6a57856001600160a01b03166340c10f1985838151811062000dde5762000dde62001dea565b602002602001015185848151811062000dfb5762000dfb62001dea565b60200260200101516040518363ffffffff1660e01b815260040162000e359291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801562000e5057600080fd5b505af115801562000e65573d6000803e3d6000fd5b505050505b600083828151811062000e815762000e8162001dea565b6020026020010151111562000f4057846001600160a01b03166340c10f1985838151811062000eb45762000eb462001dea565b602002602001015185848151811062000ed15762000ed162001dea565b60200260200101516040518363ffffffff1660e01b815260040162000f0b9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801562000f2657600080fd5b505af115801562000f3b573d6000803e3d6000fd5b505050505b8062000f4c8162001dc0565b91505062000d8a565b5050505050505050565b620005d3620010f6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000fa45762000f9f8362001202565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fde57600080fd5b505afa92505050801562001011575060408051601f3d908101601f191682019092526200100e9181019062001891565b60015b620010765760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016200052d565b600080516020620025628339815191528114620010e85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016200052d565b5062000f9f838383620012a1565b6033546001600160a01b031633146200077f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200052d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16620011ce5760405162461bcd60e51b81526004016200052d9062001c98565b6200077f620012d2565b600054610100900460ff166200077f5760405162461bcd60e51b81526004016200052d9062001c98565b6001600160a01b0381163b620012715760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200052d565b6000805160206200256283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b620012ac8362001307565b600082511180620012ba5750805b1562000f9f57620012cc838362001349565b50505050565b600054610100900460ff16620012fc5760405162461bcd60e51b81526004016200052d9062001c98565b6200077f3362001152565b620013128162001202565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620013b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200052d565b600080846001600160a01b031684604051620013d0919062001a57565b600060405180830381855af49150503d80600081146200140d576040519150601f19603f3d011682016040523d82523d6000602084013e62001412565b606091505b50915091506200143d8282604051806060016040528060278152602001620025826027913962001446565b95945050505050565b606083156200145757508162001463565b6200146383836200146a565b9392505050565b8151156200147b5781518083602001fd5b8060405162461bcd60e51b81526004016200052d919062001b65565b6107358062001e2d83390190565b6000620014bc620014b68462001d3e565b62001ce3565b9050828152838383011115620014d157600080fd5b828260208301376000602084830101529392505050565b600082601f830112620014fa57600080fd5b813560206200150d620014b68362001d17565b80838252828201915082860187848660051b89010111156200152e57600080fd5b60005b858110156200154f5781358452928401929084019060010162001531565b5090979650505050505050565b803580151581146200156d57600080fd5b919050565b60008083601f8401126200158557600080fd5b50813567ffffffffffffffff8111156200159e57600080fd5b602083019150836020828501011115620015b757600080fd5b9250929050565b600082601f830112620015d057600080fd5b6200146383833560208501620014a5565b600060208284031215620015f457600080fd5b8135620014638162001e16565b6000602082840312156200161457600080fd5b8151620014638162001e16565b600080600080600080600080600060c08a8c0312156200164057600080fd5b89356200164d8162001e16565b985060208a01356200165f8162001e16565b975060408a0135965060608a013567ffffffffffffffff808211156200168457600080fd5b620016928d838e0162001572565b909850965060808c0135915080821115620016ac57600080fd5b620016ba8d838e0162001572565b909650945060a08c0135915080821115620016d457600080fd5b818c0191508c601f830112620016e957600080fd5b813581811115620016f957600080fd5b8d60208260051b85010111156200170f57600080fd5b6020830194508093505050509295985092959850929598565b600080604083850312156200173c57600080fd5b8235620017498162001e16565b9150602083013567ffffffffffffffff8111156200176657600080fd5b8301601f810185136200177857600080fd5b6200178985823560208401620014a5565b9150509250929050565b600080600060608486031215620017a957600080fd5b833567ffffffffffffffff80821115620017c257600080fd5b818601915086601f830112620017d757600080fd5b81356020620017ea620014b68362001d17565b8083825282820191508286018b848660051b89010111156200180b57600080fd5b600096505b848710156200183b578035620018268162001e16565b83526001969096019591830191830162001810565b50975050870135925050808211156200185357600080fd5b6200186187838801620014e8565b935060408601359150808211156200187857600080fd5b506200188786828701620014e8565b9150509250925092565b600060208284031215620018a457600080fd5b5051919050565b600060208284031215620018be57600080fd5b815167ffffffffffffffff811115620018d657600080fd5b8201601f81018413620018e857600080fd5b8051620018f9620014b68262001d3e565b8181528560208385010111156200190f57600080fd5b6200143d82602083016020860162001d91565b60008060008060008060c087890312156200193c57600080fd5b863567ffffffffffffffff808211156200195557600080fd5b620019638a838b01620015be565b975060208901359150808211156200197a57600080fd5b620019888a838b01620015be565b965060408901359150808211156200199f57600080fd5b620019ad8a838b01620015be565b95506060890135915080821115620019c457600080fd5b50620019d389828a01620015be565b935050620019e4608088016200155c565b9150620019f460a088016200155c565b90509295509295509295565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845262001a4381602086016020860162001d91565b601f01601f19169290920160200192915050565b6000825162001a6b81846020870162001d91565b9190910192915050565b6001600160a01b038316815260406020820181905260009062001a9b9083018462001a29565b949350505050565b60808152600062001ab8608083018862001a29565b602083820381850152818783528183019050818860051b8401018960005b8a81101562001b4c57858303601f190184528135368d9003601e1901811262001afe57600080fd5b8c01803567ffffffffffffffff81111562001b1857600080fd5b8036038e131562001b2857600080fd5b62001b37858289850162001a00565b95870195945050509084019060010162001ad6565b5050604086019790975250505050606001529392505050565b60208152600062001463602083018462001a29565b60408152600062001b8f604083018562001a29565b82810360208401526200143d818562001a29565b60c08152600062001bb860c083018962001a29565b828103602084015262001bcc818962001a29565b6001600160a01b03978816604085015295871660608401525050918416608083015290921660a09092019190915292915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff8111828210171562001d0f5762001d0f62001e00565b604052919050565b600067ffffffffffffffff82111562001d345762001d3462001e00565b5060051b60200190565b600067ffffffffffffffff82111562001d5b5762001d5b62001e00565b50601f01601f191660200190565b8051602080830151919081101562001d8b576000198160200360031b1b821691505b50919050565b60005b8381101562001dae57818101518382015260200162001d94565b83811115620012cc5750506000910152565b600060001982141562001de357634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620005d357600080fdfe6080604052604051610735380380610735833981016040819052610022916102dc565b61002e82826000610035565b505061043b565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d0838360405180606001604052806027815260200161070e602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103aa565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a0578251610299576001600160a01b0385163b6102995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102aa565b6102aa83836102b2565b949350505050565b8151156102c25781518083602001fd5b8060405162461bcd60e51b815260040161014891906103c6565b600080604083850312156102ef57600080fd5b82516001600160a01b038116811461030657600080fd5b60208401519092506001600160401b038082111561032357600080fd5b818501915085601f83011261033757600080fd5b81518181111561034957610349610425565b604051601f8201601f19908116603f0116810190838211818310171561037157610371610425565b8160405282815288602084870101111561038a57600080fd5b61039b8360208301602088016103f9565b80955050505050509250929050565b600082516103bc8184602087016103f9565b9190910192915050565b60208152600082518060208401526103e58160408501602087016103f9565b601f01601f19169190910160400192915050565b60005b838110156104145781810151838201526020016103fc565b838111156100645750506000910152565b634e487b7160e01b600052604160045260246000fd5b6102c48061044a6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61009f565b565b606061004e8383604051806060016040528060278152602001610268602791396100c3565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100be573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516100e091906101e8565b600060405180830381855af49150503d806000811461011b576040519150601f19603f3d011682016040523d82523d6000602084013e610120565b606091505b50915091506101318683838761013b565b9695505050505050565b606083156101ac5782516101a5576001600160a01b0385163b6101a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b50816101b6565b6101b683836101be565b949350505050565b8151156101ce5781518083602001fd5b8060405162461bcd60e51b815260040161019c9190610204565b600082516101fa818460208701610237565b9190910192915050565b6020815260008251806020840152610223816040850160208701610237565b601f01601f19169190910160400192915050565b60005b8381101561025257818101518382015260200161023a565b83811115610261576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122051cce14dd9337037379bd43ee81331c1b371dbeb3f61c2ba0ccdb3ad0e551a9664736f6c63430008070033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122071f343cb070a5857463d258bcd92362b8772275c9b8c6dd19edcec82baaffd6364736f6c63430008070033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSummonerAddr(address)": {
        "details": "Sets the address of the BaalSummoner contract",
        "params": {
          "baalSummoner": "The address of the BaalSummoner contract"
        }
      },
      "summonBaalFromReferrer(address,address,uint256,bytes,bytes,bytes[])": {
        "details": "Summon a new Baal contract with a new set of tokens",
        "params": {
          "_forwarderAddr": "The address of the forwarder to be used, 0x0 if not set",
          "_safeAddr": "The address of the Gnosis Safe to be used as the treausry, 0x0 if new Safe",
          "_saltNonce": "The salt nonce to be used for the Safe contract",
          "initializationMintParams": "The parameters for minting the tokens",
          "initializationTokenParams": "The parameters for deploying the tokens",
          "postInitializationActions": "The actions to be performed after the initialization"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x25DE PUSH2 0x52 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x4EC ADD MSTORE DUP2 DUP2 PUSH2 0x538 ADD MSTORE DUP2 DUP2 PUSH2 0x5E1 ADD MSTORE DUP2 DUP2 PUSH2 0x624 ADD MSTORE PUSH2 0x6C0 ADD MSTORE PUSH2 0x25DE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH3 0x60 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH3 0x16B JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH3 0x183 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x19B JUMPI DUP1 PUSH4 0xBB6DECC8 EQ PUSH3 0x1BB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x14B630F9 EQ PUSH3 0xA2 JUMPI DUP1 PUSH4 0x1F1BB0EF EQ PUSH3 0xE1 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH3 0x108 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH3 0x12D JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH3 0x144 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD PUSH3 0xC4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x100 CALLDATASIZE PUSH1 0x4 PUSH3 0x1621 JUMP JUMPDEST PUSH3 0x205 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x127 CALLDATASIZE PUSH1 0x4 PUSH3 0x15E1 JUMP JUMPDEST PUSH3 0x4E1 JUMP JUMPDEST PUSH3 0x106 PUSH3 0x13E CALLDATASIZE PUSH1 0x4 PUSH3 0x1728 JUMP JUMPDEST PUSH3 0x5D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x15C PUSH3 0x6B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xD8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x769 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x781 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0xC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x1DA CALLDATASIZE PUSH1 0x4 PUSH3 0x15E1 JUMP JUMPDEST PUSH3 0x8A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x1FF CALLDATASIZE PUSH1 0x4 PUSH3 0x15E1 JUMP JUMPDEST PUSH3 0x945 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x214 DUP7 DUP7 PUSH3 0x9C1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH3 0x226 DUP9 DUP9 DUP5 DUP5 PUSH3 0xD1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x209F3695 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6FDDE03 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x29B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x2C5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x18AB JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95D89B41 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x314 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x33E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x18AB JUMP JUMPDEST DUP16 DUP16 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x359 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1BA3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP3 MSTORE PUSH18 0x222420B23B2A37B5B2B729BAB6B6B7B732B9 PUSH1 0x71 SHL PUSH1 0x20 DUP4 ADD MSTORE SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP16 SWAP1 PUSH3 0x39D SWAP1 PUSH3 0x1D69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3BF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1AA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x3EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x415 SWAP2 SWAP1 PUSH3 0x1601 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP5 AND SWAP1 PUSH4 0xF2FDE38B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x472 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND SWAP3 POP PUSH4 0xF2FDE38B SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x4CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH3 0x536 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x581 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x5AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C4C JUMP JUMPDEST PUSH3 0x5B5 DUP2 PUSH3 0xF5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x5D3 SWAP2 DUP4 SWAP2 SWAP1 PUSH3 0xF69 JUMP JUMPDEST POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH3 0x622 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C00 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x66D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x696 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C4C JUMP JUMPDEST PUSH3 0x6A1 DUP3 PUSH3 0xF5F JUMP JUMPDEST PUSH3 0x6AF DUP3 DUP3 PUSH1 0x1 PUSH3 0xF69 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH3 0x755 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH3 0x773 PUSH3 0x10F6 JUMP JUMPDEST PUSH3 0x77F PUSH1 0x0 PUSH3 0x1152 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH3 0x7A2 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH3 0x7BE JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x7BE JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH3 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH3 0x847 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH3 0x851 PUSH3 0x11A4 JUMP JUMPDEST PUSH3 0x85B PUSH3 0x11D8 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x5D3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH3 0x8AF PUSH3 0x10F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x7A65726F2061646472657373 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0xC9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xF471C7A7115723E1D5E0A3B924BEC97596831B94082A24D73C8C3210C6CB3B06 SWAP1 PUSH1 0x20 ADD PUSH3 0x89A JUMP JUMPDEST PUSH3 0x94F PUSH3 0x10F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH3 0x5D3 DUP2 PUSH3 0x1152 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH3 0x9D8 DUP10 DUP12 ADD DUP12 PUSH3 0x1922 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9118CE7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xA35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA70 SWAP2 SWAP1 PUSH3 0x1601 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2346618 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xAC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xAD8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAFE SWAP2 SWAP1 PUSH3 0x1601 JUMP JUMPDEST SWAP1 POP DUP2 PUSH4 0x562D190D PUSH1 0xE0 SHL DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xB1E SWAP3 SWAP2 SWAP1 PUSH3 0x1B7A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH3 0xB5D SWAP1 PUSH3 0x1497 JUMP JUMPDEST PUSH3 0xB6A SWAP3 SWAP2 SWAP1 PUSH3 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xB87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP10 POP DUP1 PUSH4 0x562D190D PUSH1 0xE0 SHL DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xBA8 SWAP3 SWAP2 SWAP1 PUSH3 0x1B7A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH3 0xBE7 SWAP1 PUSH3 0x1497 JUMP JUMPDEST PUSH3 0xBF4 SWAP3 SWAP2 SWAP1 PUSH3 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xC11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP9 POP DUP4 PUSH3 0xC70 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8456CB59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xC56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xC6B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH3 0xCCC JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8456CB59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xCB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xCC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xFB5849D45E916A3192059973D782E08B2B3888FA796F536D99AF0C7BD01CA16C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH3 0xD30 DUP7 DUP9 ADD DUP9 PUSH3 0x1793 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH3 0xD49 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH3 0xD87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x21617272617920706172697479 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH3 0xF55 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xDAB JUMPI PUSH3 0xDAB PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH3 0xE6A JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xDDE JUMPI PUSH3 0xDDE PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xDFB JUMPI PUSH3 0xDFB PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE35 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xE50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xE65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xE81 JUMPI PUSH3 0xE81 PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH3 0xF40 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xEB4 JUMPI PUSH3 0xEB4 PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xED1 JUMPI PUSH3 0xED1 PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xF0B SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xF26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xF3B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 PUSH3 0xF4C DUP2 PUSH3 0x1DC0 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xD8A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x5D3 PUSH3 0x10F6 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0xFA4 JUMPI PUSH3 0xF9F DUP4 PUSH3 0x1202 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xFDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1011 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x100E SWAP2 DUP2 ADD SWAP1 PUSH3 0x1891 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1076 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH3 0x10E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST POP PUSH3 0xF9F DUP4 DUP4 DUP4 PUSH3 0x12A1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x77F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x11CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C98 JUMP JUMPDEST PUSH3 0x77F PUSH3 0x12D2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x77F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH3 0x1271 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x12AC DUP4 PUSH3 0x1307 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH3 0x12BA JUMPI POP DUP1 JUMPDEST ISZERO PUSH3 0xF9F JUMPI PUSH3 0x12CC DUP4 DUP4 PUSH3 0x1349 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x12FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C98 JUMP JUMPDEST PUSH3 0x77F CALLER PUSH3 0x1152 JUMP JUMPDEST PUSH3 0x1312 DUP2 PUSH3 0x1202 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH3 0x13B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH3 0x13D0 SWAP2 SWAP1 PUSH3 0x1A57 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x140D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1412 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH3 0x143D DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2582 PUSH1 0x27 SWAP2 CODECOPY PUSH3 0x1446 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH3 0x1457 JUMPI POP DUP2 PUSH3 0x1463 JUMP JUMPDEST PUSH3 0x1463 DUP4 DUP4 PUSH3 0x146A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH3 0x147B JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP2 SWAP1 PUSH3 0x1B65 JUMP JUMPDEST PUSH2 0x735 DUP1 PUSH3 0x1E2D DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14BC PUSH3 0x14B6 DUP5 PUSH3 0x1D3E JUMP JUMPDEST PUSH3 0x1CE3 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH3 0x14D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x14FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH3 0x150D PUSH3 0x14B6 DUP4 PUSH3 0x1D17 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE DUP3 DUP3 ADD SWAP2 POP DUP3 DUP7 ADD DUP8 DUP5 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD GT ISZERO PUSH3 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x154F JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1531 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH3 0x1585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x159E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x15B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x15D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1463 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH3 0x14A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x15F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1463 DUP2 PUSH3 0x1E16 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1614 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1463 DUP2 PUSH3 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP11 DUP13 SUB SLT ISZERO PUSH3 0x1640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH3 0x164D DUP2 PUSH3 0x1E16 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD PUSH3 0x165F DUP2 PUSH3 0x1E16 JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1692 DUP14 DUP4 DUP15 ADD PUSH3 0x1572 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x16AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x16BA DUP14 DUP4 DUP15 ADD PUSH3 0x1572 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x16D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP13 ADD SWAP2 POP DUP13 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x16E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x16F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP14 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH3 0x170F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x173C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH3 0x1749 DUP2 PUSH3 0x1E16 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH3 0x1778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1789 DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH3 0x14A5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x17A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x17C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x17D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH3 0x17EA PUSH3 0x14B6 DUP4 PUSH3 0x1D17 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE DUP3 DUP3 ADD SWAP2 POP DUP3 DUP7 ADD DUP12 DUP5 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD GT ISZERO PUSH3 0x180B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH3 0x183B JUMPI DUP1 CALLDATALOAD PUSH3 0x1826 DUP2 PUSH3 0x1E16 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH3 0x1810 JUMP JUMPDEST POP SWAP8 POP POP DUP8 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH3 0x1853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1861 DUP8 DUP4 DUP9 ADD PUSH3 0x14E8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x1878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1887 DUP7 DUP3 DUP8 ADD PUSH3 0x14E8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x18D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH3 0x18E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH3 0x18F9 PUSH3 0x14B6 DUP3 PUSH3 0x1D3E JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH3 0x190F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x143D DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x1D91 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x193C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1963 DUP11 DUP4 DUP12 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x197A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1988 DUP11 DUP4 DUP12 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x199F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x19AD DUP11 DUP4 DUP12 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x19C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x19D3 DUP10 DUP3 DUP11 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP4 POP POP PUSH3 0x19E4 PUSH1 0x80 DUP9 ADD PUSH3 0x155C JUMP JUMPDEST SWAP2 POP PUSH3 0x19F4 PUSH1 0xA0 DUP9 ADD PUSH3 0x155C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x1A43 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x1D91 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x1A6B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1D91 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x1A9B SWAP1 DUP4 ADD DUP5 PUSH3 0x1A29 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1AB8 PUSH1 0x80 DUP4 ADD DUP9 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 DUP4 MSTORE DUP2 DUP4 ADD SWAP1 POP DUP2 DUP9 PUSH1 0x5 SHL DUP5 ADD ADD DUP10 PUSH1 0x0 JUMPDEST DUP11 DUP2 LT ISZERO PUSH3 0x1B4C JUMPI DUP6 DUP4 SUB PUSH1 0x1F NOT ADD DUP5 MSTORE DUP2 CALLDATALOAD CALLDATASIZE DUP14 SWAP1 SUB PUSH1 0x1E NOT ADD DUP2 SLT PUSH3 0x1AFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP13 ADD DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1B18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP15 SGT ISZERO PUSH3 0x1B28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1B37 DUP6 DUP3 DUP10 DUP6 ADD PUSH3 0x1A00 JUMP JUMPDEST SWAP6 DUP8 ADD SWAP6 SWAP5 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1AD6 JUMP JUMPDEST POP POP PUSH1 0x40 DUP7 ADD SWAP8 SWAP1 SWAP8 MSTORE POP POP POP POP PUSH1 0x60 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1463 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1B8F PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x1A29 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x143D DUP2 DUP6 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1BB8 PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x1A29 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1BCC DUP2 DUP10 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND PUSH1 0x40 DUP6 ADD MSTORE SWAP6 DUP8 AND PUSH1 0x60 DUP5 ADD MSTORE POP POP SWAP2 DUP5 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP3 AND PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1D0F JUMPI PUSH3 0x1D0F PUSH3 0x1E00 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1D34 JUMPI PUSH3 0x1D34 PUSH3 0x1E00 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1D5B JUMPI PUSH3 0x1D5B PUSH3 0x1E00 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0x1D8B JUMPI PUSH1 0x0 NOT DUP2 PUSH1 0x20 SUB PUSH1 0x3 SHL SHL DUP3 AND SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1DAE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1D94 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x12CC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x1DE3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x735 CODESIZE SUB DUP1 PUSH2 0x735 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x2DC JUMP JUMPDEST PUSH2 0x2E DUP3 DUP3 PUSH1 0x0 PUSH2 0x35 JUMP JUMPDEST POP POP PUSH2 0x43B JUMP JUMPDEST PUSH2 0x3E DUP4 PUSH2 0x6B JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x4B JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x66 JUMPI PUSH2 0x64 DUP4 DUP4 PUSH2 0xAB PUSH1 0x20 SHL PUSH2 0x29 OR PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x74 DUP2 PUSH2 0xD7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD0 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x70E PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xEA DUP2 PUSH2 0x222 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x151 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x188 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x231 PUSH1 0x20 SHL PUSH2 0x64 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1C6 SWAP2 SWAP1 PUSH2 0x3AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x201 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x206 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x218 DUP7 DUP4 DUP4 DUP8 PUSH2 0x234 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2A0 JUMPI DUP3 MLOAD PUSH2 0x299 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x299 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x148 JUMP JUMPDEST POP DUP2 PUSH2 0x2AA JUMP JUMPDEST PUSH2 0x2AA DUP4 DUP4 PUSH2 0x2B2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x2C2 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x349 JUMPI PUSH2 0x349 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x371 JUMPI PUSH2 0x371 PUSH2 0x425 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39B DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3BC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3F9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3E5 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x414 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3FC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x64 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2C4 DUP1 PUSH2 0x44A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11 JUMPDEST PUSH2 0x27 PUSH2 0x22 PUSH2 0x67 JUMP JUMPDEST PUSH2 0x9F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x268 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0xC3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0xBE JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0xE0 SWAP2 SWAP1 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x120 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x131 DUP7 DUP4 DUP4 DUP8 PUSH2 0x13B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1AC JUMPI DUP3 MLOAD PUSH2 0x1A5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1B6 DUP4 DUP4 PUSH2 0x1BE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1CE JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1FA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x237 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x223 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x237 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x252 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x23A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122051CCE1 0x4D 0xD9 CALLER PUSH17 0x37379BD43EE81331C1B371DBEB3F61C2BA 0xC 0xCD 0xB3 0xAD 0xE SSTORE BYTE SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C65643608 SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A264697066735822122071 RETURN NUMBER 0xCB SMOD EXP PC JUMPI CHAINID RETURNDATASIZE 0x25 DUP12 0xCD SWAP3 CALLDATASIZE 0x2B DUP8 PUSH19 0x275C9B8C6DD19EDCEC82BAAFFD6364736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
      "sourceMap": "567:5994:78:-:0;;;1332:4:41;1289:48;;;;567:5994:78;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@__Ownable_init_3953": {
          "entryPoint": 4516,
          "id": 3953,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@__Ownable_init_unchained_3964": {
          "entryPoint": 4818,
          "id": 3964,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@__UUPSUpgradeable_init_4634": {
          "entryPoint": 4568,
          "id": 4634,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_authorizeUpgrade_14198": {
          "entryPoint": 3935,
          "id": 14198,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_baalSummoner_13831": {
          "entryPoint": null,
          "id": 13831,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_checkOwner_3995": {
          "entryPoint": 4342,
          "id": 3995,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_functionDelegateCall_4431": {
          "entryPoint": 4937,
          "id": 4431,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getImplementation_4115": {
          "entryPoint": null,
          "id": 4115,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_msgSender_6709": {
          "entryPoint": null,
          "id": 6709,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_revert_6525": {
          "entryPoint": 5226,
          "id": 6525,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_setImplementation_4139": {
          "entryPoint": 4610,
          "id": 4139,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_transferOwnership_4052": {
          "entryPoint": 4434,
          "id": 4052,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_upgradeToAndCallUUPS_4235": {
          "entryPoint": 3945,
          "id": 4235,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_upgradeToAndCall_4182": {
          "entryPoint": 4769,
          "id": 4182,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_upgradeTo_4154": {
          "entryPoint": 4871,
          "id": 4154,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@deployTokens_14189": {
          "entryPoint": 2497,
          "id": 14189,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "@getAddressSlot_6824": {
          "entryPoint": null,
          "id": 6824,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getBooleanSlot_6835": {
          "entryPoint": null,
          "id": 6835,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@initialize_13853": {
          "entryPoint": 1921,
          "id": 13853,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@isContract_6260": {
          "entryPoint": null,
          "id": 6260,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@mintTokens_14069": {
          "entryPoint": 3358,
          "id": 14069,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@owner_3981": {
          "entryPoint": null,
          "id": 3981,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@proxiableUUID_4697": {
          "entryPoint": 1715,
          "id": 4697,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@renounceOwnership_4009": {
          "entryPoint": 1897,
          "id": 4009,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@setSummonerAddr_13882": {
          "entryPoint": 2213,
          "id": 13882,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@summonBaalFromReferrer_13966": {
          "entryPoint": 517,
          "id": 13966,
          "parameterSlots": 9,
          "returnSlots": 0
        },
        "@transferOwnership_4032": {
          "entryPoint": 2373,
          "id": 4032,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@upgradeToAndCall_4740": {
          "entryPoint": 1494,
          "id": 4740,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@upgradeTo_4719": {
          "entryPoint": 1249,
          "id": 4719,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@verifyCallResult_6505": {
          "entryPoint": 5190,
          "id": 6505,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_decode_array_uint256_dyn": {
          "entryPoint": 5352,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_available_length_bytes": {
          "entryPoint": 5285,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_decode_bool": {
          "entryPoint": 5468,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_bytes_calldata": {
          "entryPoint": 5490,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_string": {
          "entryPoint": 5566,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 5601,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address_fromMemory": {
          "entryPoint": 5633,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr": {
          "entryPoint": 5665,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 9
        },
        "abi_decode_tuple_t_addresst_bytes_memory_ptr": {
          "entryPoint": 5928,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr": {
          "entryPoint": 6035,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_bytes32_fromMemory": {
          "entryPoint": 6289,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_string_memory_ptr_fromMemory": {
          "entryPoint": 6315,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_boolt_bool": {
          "entryPoint": 6434,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 6
        },
        "abi_encode_bytes": {
          "entryPoint": 6697,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_bytes_calldata": {
          "entryPoint": 6656,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 6743,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 6773,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes_memory_ptr_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_t_uint256_t_bytes32__to_t_bytes_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed": {
          "entryPoint": 6819,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_IBaalSummoner_$15077__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 7013,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 7034,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_address_t_address_t_address_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_address_t_address_t_address_t_address__fromStack_reversed": {
          "entryPoint": 7075,
          "id": null,
          "parameterSlots": 7,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 7168,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 7244,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_5342e7867ff27d05722d3541def69e5945710e227c7de50b846ee0662966dda0__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 7320,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "allocate_memory": {
          "entryPoint": 7395,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_allocation_size_array_address_dyn": {
          "entryPoint": 7447,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_allocation_size_bytes": {
          "entryPoint": 7486,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
          "entryPoint": 7529,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "copy_memory_to_memory": {
          "entryPoint": 7569,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "increment_t_uint256": {
          "entryPoint": 7616,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "panic_error_0x32": {
          "entryPoint": 7658,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 7680,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_address": {
          "entryPoint": 7702,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:20189:95",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:95",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "88:262:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "98:61:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "151:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "123:27:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "123:35:95"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "107:15:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "107:52:95"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "98:5:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "175:5:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "182:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "168:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "168:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "168:21:95"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "227:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "236:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "239:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "229:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "229:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "229:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "208:3:95"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "213:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "204:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "204:16:95"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "222:3:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "201:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "201:25:95"
                      },
                      "nodeType": "YulIf",
                      "src": "198:45:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "269:5:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "276:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "265:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "265:16:95"
                          },
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "283:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "288:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "252:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "252:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "252:43:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "319:5:95"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "326:6:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "315:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "315:18:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "335:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "311:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "311:29:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "342:1:95",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "304:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "304:40:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "304:40:95"
                    }
                  ]
                },
                "name": "abi_decode_available_length_bytes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "57:3:95",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "62:6:95",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "70:3:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "78:5:95",
                    "type": ""
                  }
                ],
                "src": "14:336:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "419:609:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "468:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "477:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "480:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "470:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "470:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "470:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "447:6:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "455:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "443:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "443:17:95"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "462:3:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "439:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "439:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "432:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "432:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "429:55:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "493:30:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "516:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "503:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "503:20:95"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "497:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "532:14:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "542:4:95",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "536:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "555:71:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "622:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "582:39:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "582:43:95"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "566:15:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "566:60:95"
                      },
                      "variables": [
                        {
                          "name": "dst",
                          "nodeType": "YulTypedName",
                          "src": "559:3:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "635:16:95",
                      "value": {
                        "name": "dst",
                        "nodeType": "YulIdentifier",
                        "src": "648:3:95"
                      },
                      "variables": [
                        {
                          "name": "dst_1",
                          "nodeType": "YulTypedName",
                          "src": "639:5:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "667:3:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "672:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "660:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "660:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "660:15:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "684:19:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "695:3:95"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "700:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "691:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "691:12:95"
                      },
                      "variableNames": [
                        {
                          "name": "dst",
                          "nodeType": "YulIdentifier",
                          "src": "684:3:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "712:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "727:6:95"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "735:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "723:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "723:15:95"
                      },
                      "variables": [
                        {
                          "name": "src",
                          "nodeType": "YulTypedName",
                          "src": "716:3:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "792:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "801:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "804:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "794:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "794:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "794:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "761:6:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "773:1:95",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "776:2:95"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "769:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "769:10:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "757:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "757:23:95"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "782:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "753:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "753:32:95"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "787:3:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "750:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "750:41:95"
                      },
                      "nodeType": "YulIf",
                      "src": "747:61:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "817:10:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "826:1:95",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "821:1:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "881:118:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "902:3:95"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "920:3:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "907:12:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "907:17:95"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "895:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "895:30:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "895:30:95"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "938:19:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "949:3:95"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "954:2:95"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "945:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "945:12:95"
                            },
                            "variableNames": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "938:3:95"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "970:19:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "981:3:95"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "986:2:95"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "977:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "977:12:95"
                            },
                            "variableNames": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "970:3:95"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "847:1:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "850:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "844:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "844:9:95"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "854:18:95",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "856:14:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "865:1:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "868:1:95",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "861:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "861:9:95"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "856:1:95"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "840:3:95",
                        "statements": []
                      },
                      "src": "836:163:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1008:14:95",
                      "value": {
                        "name": "dst_1",
                        "nodeType": "YulIdentifier",
                        "src": "1017:5:95"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "1008:5:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_array_uint256_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "393:6:95",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "401:3:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "409:5:95",
                    "type": ""
                  }
                ],
                "src": "355:673:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1079:114:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1089:29:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1111:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1098:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1098:20:95"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "1089:5:95"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1171:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1180:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1183:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1173:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1173:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1173:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1140:5:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1161:5:95"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1154:6:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1154:13:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1147:6:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1147:21:95"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "1137:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1137:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1130:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1130:40:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1127:60:95"
                    }
                  ]
                },
                "name": "abi_decode_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "1058:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "1069:5:95",
                    "type": ""
                  }
                ],
                "src": "1033:160:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1270:275:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1319:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1328:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1331:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1321:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1321:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1321:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1298:6:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1306:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1294:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1294:17:95"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1313:3:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1290:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1290:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1283:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1283:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1280:55:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1344:30:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1367:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1354:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1354:20:95"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "1344:6:95"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1417:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1426:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1429:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1419:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1419:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1419:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1389:6:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1397:18:95",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1386:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1386:30:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1383:50:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1442:29:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1458:6:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1466:4:95",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1454:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1454:17:95"
                      },
                      "variableNames": [
                        {
                          "name": "arrayPos",
                          "nodeType": "YulIdentifier",
                          "src": "1442:8:95"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1523:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1532:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1535:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1525:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1525:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1525:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1494:6:95"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1502:6:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1490:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1490:19:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1511:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1486:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1486:30:95"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "1518:3:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1483:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1483:39:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1480:59:95"
                    }
                  ]
                },
                "name": "abi_decode_bytes_calldata",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "1233:6:95",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "1241:3:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "arrayPos",
                    "nodeType": "YulTypedName",
                    "src": "1249:8:95",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "1259:6:95",
                    "type": ""
                  }
                ],
                "src": "1198:347:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1603:168:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1652:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1661:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1664:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1654:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1654:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1654:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1631:6:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1639:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1627:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1627:17:95"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1646:3:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1623:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1623:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1616:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1616:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1613:55:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1677:88:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1724:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1732:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1720:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1720:17:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1752:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1739:12:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1739:20:95"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "1761:3:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_available_length_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "1686:33:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1686:79:95"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "1677:5:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_string",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "1577:6:95",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "1585:3:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "1593:5:95",
                    "type": ""
                  }
                ],
                "src": "1550:221:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1846:177:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1892:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1901:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1904:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1894:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1894:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1894:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1867:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1876:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1863:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1863:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1888:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1859:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1859:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "1856:52:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1917:36:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1943:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1930:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1930:23:95"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "1921:5:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1987:5:95"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "1962:24:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1962:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1962:31:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2002:15:95",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2012:5:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2002:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1812:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1823:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1835:6:95",
                    "type": ""
                  }
                ],
                "src": "1776:247:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2109:170:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2155:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2164:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2167:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2157:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2157:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2157:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2130:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2139:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2126:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2126:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2151:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2122:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2122:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2119:52:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2180:29:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2199:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2193:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2193:16:95"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "2184:5:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2243:5:95"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "2218:24:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2218:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2218:31:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2258:15:95",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2268:5:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2258:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2075:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2086:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2098:6:95",
                    "type": ""
                  }
                ],
                "src": "2028:251:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2523:1308:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2570:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2579:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2582:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2572:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2572:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2572:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2544:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2553:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2540:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2540:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2565:3:95",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2536:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2536:33:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2533:53:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2595:36:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2621:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2608:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2608:23:95"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "2599:5:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2665:5:95"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "2640:24:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2640:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2640:31:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2680:15:95",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2690:5:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2680:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2704:47:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2736:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2747:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2732:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2732:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2719:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2719:32:95"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "2708:7:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "2785:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "2760:24:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2760:33:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2760:33:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2802:17:95",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "2812:7:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2802:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2828:42:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2855:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2866:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2851:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2851:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2838:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2838:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "2828:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2879:46:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2910:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2921:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2906:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2906:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2893:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2893:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "2883:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2934:28:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2944:18:95",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "2938:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2989:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2998:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3001:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2991:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2991:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2991:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2977:6:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2985:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2974:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2974:14:95"
                      },
                      "nodeType": "YulIf",
                      "src": "2971:34:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3014:84:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3070:9:95"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3081:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3066:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3066:22:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "3090:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "3040:25:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3040:58:95"
                      },
                      "variables": [
                        {
                          "name": "value3_1",
                          "nodeType": "YulTypedName",
                          "src": "3018:8:95",
                          "type": ""
                        },
                        {
                          "name": "value4_1",
                          "nodeType": "YulTypedName",
                          "src": "3028:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3107:18:95",
                      "value": {
                        "name": "value3_1",
                        "nodeType": "YulIdentifier",
                        "src": "3117:8:95"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "3107:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3134:18:95",
                      "value": {
                        "name": "value4_1",
                        "nodeType": "YulIdentifier",
                        "src": "3144:8:95"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "3134:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3161:49:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3194:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3205:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3190:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3190:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3177:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3177:33:95"
                      },
                      "variables": [
                        {
                          "name": "offset_1",
                          "nodeType": "YulTypedName",
                          "src": "3165:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3239:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3248:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3251:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3241:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3241:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3241:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_1",
                            "nodeType": "YulIdentifier",
                            "src": "3225:8:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3235:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3222:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3222:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3219:36:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3264:86:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3320:9:95"
                              },
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "3331:8:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3316:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3316:24:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "3342:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "3290:25:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3290:60:95"
                      },
                      "variables": [
                        {
                          "name": "value5_1",
                          "nodeType": "YulTypedName",
                          "src": "3268:8:95",
                          "type": ""
                        },
                        {
                          "name": "value6_1",
                          "nodeType": "YulTypedName",
                          "src": "3278:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3359:18:95",
                      "value": {
                        "name": "value5_1",
                        "nodeType": "YulIdentifier",
                        "src": "3369:8:95"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "3359:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3386:18:95",
                      "value": {
                        "name": "value6_1",
                        "nodeType": "YulIdentifier",
                        "src": "3396:8:95"
                      },
                      "variableNames": [
                        {
                          "name": "value6",
                          "nodeType": "YulIdentifier",
                          "src": "3386:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3413:49:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3446:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3457:3:95",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3442:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3442:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3429:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3429:33:95"
                      },
                      "variables": [
                        {
                          "name": "offset_2",
                          "nodeType": "YulTypedName",
                          "src": "3417:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3491:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3500:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3503:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3493:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3493:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3493:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_2",
                            "nodeType": "YulIdentifier",
                            "src": "3477:8:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3487:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3474:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3474:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3471:36:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3516:34:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3530:9:95"
                          },
                          {
                            "name": "offset_2",
                            "nodeType": "YulIdentifier",
                            "src": "3541:8:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3526:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3526:24:95"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "3520:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3598:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3607:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3610:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3600:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3600:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3600:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3577:2:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3581:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3573:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3573:13:95"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3588:7:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3569:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3569:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3562:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3562:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3559:55:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3623:30:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "3650:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3637:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3637:16:95"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "3627:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3680:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3689:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3692:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3682:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3682:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3682:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3668:6:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3676:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3665:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3665:14:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3662:34:95"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3754:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3763:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3766:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3756:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3756:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3756:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3719:2:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3727:1:95",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "3730:6:95"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3723:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3723:14:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3715:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3715:23:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3740:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3711:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3711:32:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "3745:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3708:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3708:45:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3705:65:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3779:21:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "3793:2:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3797:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3789:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3789:11:95"
                      },
                      "variableNames": [
                        {
                          "name": "value7",
                          "nodeType": "YulIdentifier",
                          "src": "3779:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3809:16:95",
                      "value": {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "3819:6:95"
                      },
                      "variableNames": [
                        {
                          "name": "value8",
                          "nodeType": "YulIdentifier",
                          "src": "3809:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2425:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2436:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2448:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2456:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2464:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "2472:6:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "2480:6:95",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "2488:6:95",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "2496:6:95",
                    "type": ""
                  },
                  {
                    "name": "value7",
                    "nodeType": "YulTypedName",
                    "src": "2504:6:95",
                    "type": ""
                  },
                  {
                    "name": "value8",
                    "nodeType": "YulTypedName",
                    "src": "2512:6:95",
                    "type": ""
                  }
                ],
                "src": "2284:1547:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3932:488:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3978:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3987:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3990:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3980:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3980:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3980:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3953:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3962:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3949:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3949:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3974:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3945:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3945:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "3942:52:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4003:36:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4029:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4016:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4016:23:95"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "4007:5:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4073:5:95"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "4048:24:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4048:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4048:31:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4088:15:95",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "4098:5:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4088:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4112:46:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4143:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4154:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4139:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4139:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4126:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4126:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "4116:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4201:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4210:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4213:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4203:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4203:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4203:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "4173:6:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4181:18:95",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "4170:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4170:30:95"
                      },
                      "nodeType": "YulIf",
                      "src": "4167:50:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4226:32:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4240:9:95"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "4251:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4236:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4236:22:95"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "4230:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4306:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4315:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4318:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4308:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4308:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4308:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4285:2:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4289:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4281:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4281:13:95"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4296:7:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4277:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4277:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4270:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4270:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "4267:55:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4331:83:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4379:2:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4383:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4375:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4375:11:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4401:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4388:12:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4388:16:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "4406:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_available_length_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "4341:33:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4341:73:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4331:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3890:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3901:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3913:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3921:6:95",
                    "type": ""
                  }
                ],
                "src": "3836:584:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4604:1273:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4650:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4659:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4662:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4652:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4652:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4652:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4625:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4634:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4621:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4621:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4646:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4617:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4617:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "4614:52:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4675:37:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4702:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4689:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4689:23:95"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "4679:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4721:28:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4731:18:95",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "4725:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4776:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4785:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4788:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4778:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4778:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4778:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "4764:6:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "4772:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "4761:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4761:14:95"
                      },
                      "nodeType": "YulIf",
                      "src": "4758:34:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4801:32:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4815:9:95"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "4826:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4811:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4811:22:95"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "4805:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4881:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4890:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4893:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4883:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4883:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4883:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4860:2:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4864:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4856:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4856:13:95"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4871:7:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4852:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4852:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4845:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4845:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "4842:55:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4906:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "4929:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4916:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4916:16:95"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "4910:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4941:14:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4951:4:95",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_4",
                          "nodeType": "YulTypedName",
                          "src": "4945:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4964:71:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "5031:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "4991:39:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4991:43:95"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "4975:15:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4975:60:95"
                      },
                      "variables": [
                        {
                          "name": "dst",
                          "nodeType": "YulTypedName",
                          "src": "4968:3:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5044:16:95",
                      "value": {
                        "name": "dst",
                        "nodeType": "YulIdentifier",
                        "src": "5057:3:95"
                      },
                      "variables": [
                        {
                          "name": "dst_1",
                          "nodeType": "YulTypedName",
                          "src": "5048:5:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "5076:3:95"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "5081:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5069:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5069:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5069:15:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5093:19:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "5104:3:95"
                          },
                          {
                            "name": "_4",
                            "nodeType": "YulIdentifier",
                            "src": "5109:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5100:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5100:12:95"
                      },
                      "variableNames": [
                        {
                          "name": "dst",
                          "nodeType": "YulIdentifier",
                          "src": "5093:3:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5121:22:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "5136:2:95"
                          },
                          {
                            "name": "_4",
                            "nodeType": "YulIdentifier",
                            "src": "5140:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5132:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5132:11:95"
                      },
                      "variables": [
                        {
                          "name": "src",
                          "nodeType": "YulTypedName",
                          "src": "5125:3:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5197:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5206:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5209:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5199:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5199:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5199:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "5166:2:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5174:1:95",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "5177:2:95"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "5170:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5170:10:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5162:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5162:19:95"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "5183:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5158:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5158:28:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "5188:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5155:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5155:41:95"
                      },
                      "nodeType": "YulIf",
                      "src": "5152:61:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5222:10:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5231:1:95",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "5226:1:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5286:193:95",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "5300:30:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "5326:3:95"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nodeType": "YulIdentifier",
                                "src": "5313:12:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5313:17:95"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nodeType": "YulTypedName",
                                "src": "5304:5:95",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "5368:5:95"
                                }
                              ],
                              "functionName": {
                                "name": "validator_revert_address",
                                "nodeType": "YulIdentifier",
                                "src": "5343:24:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5343:31:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5343:31:95"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "5394:3:95"
                                },
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "5399:5:95"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "5387:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5387:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5387:18:95"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "5418:19:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "5429:3:95"
                                },
                                {
                                  "name": "_4",
                                  "nodeType": "YulIdentifier",
                                  "src": "5434:2:95"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5425:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5425:12:95"
                            },
                            "variableNames": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "5418:3:95"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "5450:19:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "5461:3:95"
                                },
                                {
                                  "name": "_4",
                                  "nodeType": "YulIdentifier",
                                  "src": "5466:2:95"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5457:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5457:12:95"
                            },
                            "variableNames": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "5450:3:95"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "5252:1:95"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "5255:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "5249:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5249:9:95"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "5259:18:95",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "5261:14:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "5270:1:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5273:1:95",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5266:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5266:9:95"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5261:1:95"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "5245:3:95",
                        "statements": []
                      },
                      "src": "5241:238:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5488:15:95",
                      "value": {
                        "name": "dst_1",
                        "nodeType": "YulIdentifier",
                        "src": "5498:5:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5488:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5512:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5545:9:95"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "5556:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5541:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5541:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5528:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5528:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset_1",
                          "nodeType": "YulTypedName",
                          "src": "5516:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5589:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5598:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5601:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5591:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5591:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5591:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_1",
                            "nodeType": "YulIdentifier",
                            "src": "5575:8:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "5585:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5572:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5572:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "5569:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5614:73:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5657:9:95"
                              },
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "5668:8:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5653:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5653:24:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "5679:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "5624:28:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5624:63:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "5614:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5696:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5729:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5740:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5725:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5725:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5712:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5712:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset_2",
                          "nodeType": "YulTypedName",
                          "src": "5700:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5773:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5782:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5785:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5775:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5775:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5775:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_2",
                            "nodeType": "YulIdentifier",
                            "src": "5759:8:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "5769:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5756:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5756:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "5753:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5798:73:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5841:9:95"
                              },
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "5852:8:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5837:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5837:24:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "5863:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_uint256_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "5808:28:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5808:63:95"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "5798:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4554:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4565:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4577:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4585:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4593:6:95",
                    "type": ""
                  }
                ],
                "src": "4425:1452:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5963:103:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6009:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6018:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6021:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6011:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6011:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6011:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5984:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5993:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5980:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5980:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6005:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5976:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5976:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "5973:52:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6034:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6050:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "6044:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6044:16:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6034:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5929:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5940:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5952:6:95",
                    "type": ""
                  }
                ],
                "src": "5882:184:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6162:544:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6208:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6217:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6220:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6210:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6210:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6210:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6183:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6192:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6179:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6179:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6204:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6175:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6175:32:95"
                      },
                      "nodeType": "YulIf",
                      "src": "6172:52:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6233:30:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6253:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "6247:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6247:16:95"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "6237:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6306:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6315:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6318:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6308:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6308:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6308:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "6278:6:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6286:18:95",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "6275:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6275:30:95"
                      },
                      "nodeType": "YulIf",
                      "src": "6272:50:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6331:32:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6345:9:95"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "6356:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6341:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6341:22:95"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "6335:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6411:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6420:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6423:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6413:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6413:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6413:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6390:2:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6394:4:95",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6386:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6386:13:95"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6401:7:95"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6382:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6382:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6375:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6375:35:95"
                      },
                      "nodeType": "YulIf",
                      "src": "6372:55:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6436:19:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "6452:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "6446:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6446:9:95"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "6440:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6464:61:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6521:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "6493:27:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6493:31:95"
                          }
                        ],
                        "functionName": {
                          "name": "allocate_memory",
                          "nodeType": "YulIdentifier",
                          "src": "6477:15:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6477:48:95"
                      },
                      "variables": [
                        {
                          "name": "array",
                          "nodeType": "YulTypedName",
                          "src": "6468:5:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "6541:5:95"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "6548:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6534:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6534:17:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6534:17:95"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6597:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6606:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6609:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6599:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6599:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6599:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6574:2:95"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "6578:2:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6570:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6570:11:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6583:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6566:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6566:20:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "6588:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "6563:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6563:33:95"
                      },
                      "nodeType": "YulIf",
                      "src": "6560:53:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6648:2:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6652:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6644:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6644:11:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "6661:5:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6668:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6657:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6657:14:95"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "6673:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "6622:21:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6622:54:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6622:54:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6685:15:95",
                      "value": {
                        "name": "array",
                        "nodeType": "YulIdentifier",
                        "src": "6695:5:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6685:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6128:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6139:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6151:6:95",
                    "type": ""
                  }
                ],
                "src": "6071:635:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6900:893:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6947:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6956:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6959:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6949:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6949:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6949:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6921:7:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6930:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6917:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6917:23:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6942:3:95",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6913:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6913:33:95"
                      },
                      "nodeType": "YulIf",
                      "src": "6910:53:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6972:37:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6999:9:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6986:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6986:23:95"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "6976:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7018:28:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7028:18:95",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "7022:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7073:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7082:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7085:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7075:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7075:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7075:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "7061:6:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7069:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7058:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7058:14:95"
                      },
                      "nodeType": "YulIf",
                      "src": "7055:34:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7098:60:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7130:9:95"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7141:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7126:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7126:22:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7150:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string",
                          "nodeType": "YulIdentifier",
                          "src": "7108:17:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7108:50:95"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7098:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7167:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7200:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7211:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7196:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7196:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7183:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7183:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset_1",
                          "nodeType": "YulTypedName",
                          "src": "7171:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7244:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7253:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7256:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7246:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7246:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7246:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_1",
                            "nodeType": "YulIdentifier",
                            "src": "7230:8:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7240:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7227:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7227:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "7224:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7269:62:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7301:9:95"
                              },
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "7312:8:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7297:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7297:24:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7323:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string",
                          "nodeType": "YulIdentifier",
                          "src": "7279:17:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7279:52:95"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "7269:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7340:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7373:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7384:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7369:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7369:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7356:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7356:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset_2",
                          "nodeType": "YulTypedName",
                          "src": "7344:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7417:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7426:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7429:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7419:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7419:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7419:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_2",
                            "nodeType": "YulIdentifier",
                            "src": "7403:8:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7413:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7400:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7400:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "7397:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7442:62:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7474:9:95"
                              },
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "7485:8:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7470:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7470:24:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7496:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string",
                          "nodeType": "YulIdentifier",
                          "src": "7452:17:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7452:52:95"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "7442:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7513:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7546:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7557:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7542:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7542:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7529:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7529:32:95"
                      },
                      "variables": [
                        {
                          "name": "offset_3",
                          "nodeType": "YulTypedName",
                          "src": "7517:8:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7590:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7599:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7602:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7592:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7592:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7592:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset_3",
                            "nodeType": "YulIdentifier",
                            "src": "7576:8:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7586:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7573:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7573:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "7570:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7615:62:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7647:9:95"
                              },
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "7658:8:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7643:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7643:24:95"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7669:7:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string",
                          "nodeType": "YulIdentifier",
                          "src": "7625:17:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7625:52:95"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "7615:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7686:46:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7716:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7727:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7712:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7712:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bool",
                          "nodeType": "YulIdentifier",
                          "src": "7696:15:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7696:36:95"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "7686:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7741:46:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7771:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7782:3:95",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7767:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7767:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bool",
                          "nodeType": "YulIdentifier",
                          "src": "7751:15:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7751:36:95"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "7741:6:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_boolt_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6826:9:95",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6837:7:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6849:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6857:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "6865:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "6873:6:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "6881:6:95",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "6889:6:95",
                    "type": ""
                  }
                ],
                "src": "6711:1082:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7864:200:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "7881:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "7886:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7874:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7874:19:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7874:19:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7919:3:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7924:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7915:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7915:14:95"
                          },
                          {
                            "name": "start",
                            "nodeType": "YulIdentifier",
                            "src": "7931:5:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "7938:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "7902:12:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7902:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7902:43:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7969:3:95"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7974:6:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7965:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7965:16:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7983:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7961:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7961:27:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7990:1:95",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7954:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7954:38:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7954:38:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8001:57:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8016:3:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "8029:6:95"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8037:2:95",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8025:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8025:15:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8046:2:95",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8042:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8042:7:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8021:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8021:29:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8012:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8012:39:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8053:4:95",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8008:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8008:50:95"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "8001:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_bytes_calldata",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "start",
                    "nodeType": "YulTypedName",
                    "src": "7833:5:95",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "7840:6:95",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "7848:3:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "7856:3:95",
                    "type": ""
                  }
                ],
                "src": "7798:266:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8118:208:95",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8128:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8148:5:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "8142:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8142:12:95"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "8132:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "8170:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8175:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8163:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8163:19:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8163:19:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8217:5:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8224:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8213:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8213:16:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8235:3:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8240:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8231:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8231:14:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8247:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "8191:21:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8191:63:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8191:63:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8263:57:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8278:3:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "8291:6:95"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8299:2:95",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8287:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8287:15:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8308:2:95",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8304:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8304:7:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8283:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8283:29:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8274:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8274:39:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8315:4:95",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8270:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8270:50:95"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "8263:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_bytes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "8095:5:95",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "8102:3:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "8110:3:95",
                    "type": ""
                  }
                ],
                "src": "8069:257:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8468:137:95",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8478:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "8498:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "8492:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8492:13:95"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "8482:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8540:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8548:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8536:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8536:17:95"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "8555:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8560:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "8514:21:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8514:53:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8514:53:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8576:23:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "8587:3:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8592:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8583:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8583:16:95"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "8576:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "8444:3:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8449:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "8460:3:95",
                    "type": ""
                  }
                ],
                "src": "8331:274:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8711:102:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8721:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8733:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8744:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8729:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8729:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8721:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8763:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8778:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8794:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8799:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "8790:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8790:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8803:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8786:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8786:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "8774:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8774:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8756:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8756:51:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8756:51:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8680:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8691:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8702:4:95",
                    "type": ""
                  }
                ],
                "src": "8610:203:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8947:175:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8957:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8969:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8980:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8965:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8965:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8957:4:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8992:29:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9010:3:95",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9015:1:95",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "9006:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9006:11:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9019:1:95",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "9002:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9002:19:95"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "8996:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9037:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9052:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9060:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9048:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9048:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9030:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9030:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9030:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9084:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9095:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9080:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9080:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9104:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9112:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9100:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9100:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9073:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9073:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9073:43:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8908:9:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "8919:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8927:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8938:4:95",
                    "type": ""
                  }
                ],
                "src": "8818:304:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9274:167:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9291:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9306:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9322:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9327:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "9318:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9318:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9331:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9314:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9314:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9302:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9302:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9284:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9284:51:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9284:51:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9355:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9366:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9351:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9351:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9371:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9344:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9344:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9344:30:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9383:52:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "9408:6:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9420:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9431:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9416:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9416:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "9391:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9391:44:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9383:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9235:9:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9246:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9254:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9265:4:95",
                    "type": ""
                  }
                ],
                "src": "9127:314:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9575:145:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "9585:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9597:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9608:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9593:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9593:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9585:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9627:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9642:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9658:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9663:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "9654:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9654:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9667:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9650:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9650:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9638:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9638:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9620:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9620:51:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9620:51:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9691:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9702:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9687:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9687:18:95"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "9707:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9680:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9680:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9680:34:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9536:9:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9547:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9555:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9566:4:95",
                    "type": ""
                  }
                ],
                "src": "9446:274:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9826:76:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "9836:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9848:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9859:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9844:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9844:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9836:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9878:9:95"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "9889:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9871:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9871:25:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9871:25:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9795:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9806:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9817:4:95",
                    "type": ""
                  }
                ],
                "src": "9725:177:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10190:1173:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10207:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10218:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10200:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10200:22:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10200:22:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10231:59:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "10262:6:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10274:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10285:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10270:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10270:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "10245:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10245:45:95"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "10235:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10299:12:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10309:2:95",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "10303:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10331:9:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10342:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10327:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10327:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "10351:6:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10359:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10347:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10347:22:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10320:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10320:50:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10320:50:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10379:17:95",
                      "value": {
                        "name": "tail_1",
                        "nodeType": "YulIdentifier",
                        "src": "10390:6:95"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "10383:3:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "10412:6:95"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "10420:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10405:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10405:22:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10405:22:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10436:22:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "10447:6:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "10455:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10443:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10443:15:95"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "10436:3:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10467:50:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "10489:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10501:1:95",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "10504:6:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "10497:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10497:14:95"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10485:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10485:27:95"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "10514:2:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10481:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10481:36:95"
                      },
                      "variables": [
                        {
                          "name": "tail_2",
                          "nodeType": "YulTypedName",
                          "src": "10471:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10526:20:95",
                      "value": {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "10540:6:95"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "10530:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10555:10:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10564:1:95",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "10559:1:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10623:625:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "10644:3:95"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "10657:6:95"
                                        },
                                        {
                                          "name": "tail_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "10665:6:95"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "10653:3:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10653:19:95"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10678:2:95",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "10674:3:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10674:7:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "10649:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10649:33:95"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "10637:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10637:46:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10637:46:95"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "10696:46:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "10735:6:95"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nodeType": "YulIdentifier",
                                "src": "10722:12:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10722:20:95"
                            },
                            "variables": [
                              {
                                "name": "rel_offset_of_tail",
                                "nodeType": "YulTypedName",
                                "src": "10700:18:95",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "10833:16:95",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10842:1:95",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10845:1:95",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nodeType": "YulIdentifier",
                                      "src": "10835:6:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10835:12:95"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "10835:12:95"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "rel_offset_of_tail",
                                      "nodeType": "YulIdentifier",
                                      "src": "10769:18:95"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [],
                                              "functionName": {
                                                "name": "calldatasize",
                                                "nodeType": "YulIdentifier",
                                                "src": "10797:12:95"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "10797:14:95"
                                            },
                                            {
                                              "name": "value1",
                                              "nodeType": "YulIdentifier",
                                              "src": "10813:6:95"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "10793:3:95"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "10793:27:95"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "10826:2:95",
                                              "type": "",
                                              "value": "30"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "10822:3:95"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "10822:7:95"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "10789:3:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10789:41:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "slt",
                                    "nodeType": "YulIdentifier",
                                    "src": "10765:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10765:66:95"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nodeType": "YulIdentifier",
                                "src": "10758:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10758:74:95"
                            },
                            "nodeType": "YulIf",
                            "src": "10755:94:95"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "10862:44:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "rel_offset_of_tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10879:18:95"
                                },
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "10899:6:95"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "10875:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10875:31:95"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nodeType": "YulTypedName",
                                "src": "10866:5:95",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "10919:33:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "10946:5:95"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nodeType": "YulIdentifier",
                                "src": "10933:12:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10933:19:95"
                            },
                            "variables": [
                              {
                                "name": "length",
                                "nodeType": "YulTypedName",
                                "src": "10923:6:95",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "10999:16:95",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11008:1:95",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11011:1:95",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nodeType": "YulIdentifier",
                                      "src": "11001:6:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11001:12:95"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "11001:12:95"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "10971:6:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10979:18:95",
                                  "type": "",
                                  "value": "0xffffffffffffffff"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "10968:2:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10968:30:95"
                            },
                            "nodeType": "YulIf",
                            "src": "10965:50:95"
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "11072:16:95",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11081:1:95",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11084:1:95",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nodeType": "YulIdentifier",
                                      "src": "11074:6:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11074:12:95"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "11074:12:95"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "11035:6:95"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "calldatasize",
                                        "nodeType": "YulIdentifier",
                                        "src": "11047:12:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11047:14:95"
                                    },
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "11063:6:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nodeType": "YulIdentifier",
                                    "src": "11043:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11043:27:95"
                                }
                              ],
                              "functionName": {
                                "name": "sgt",
                                "nodeType": "YulIdentifier",
                                "src": "11031:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11031:40:95"
                            },
                            "nodeType": "YulIf",
                            "src": "11028:60:95"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "11101:67:95",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "11141:5:95"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "11148:2:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "11137:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11137:14:95"
                                },
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "11153:6:95"
                                },
                                {
                                  "name": "tail_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "11161:6:95"
                                }
                              ],
                              "functionName": {
                                "name": "abi_encode_bytes_calldata",
                                "nodeType": "YulIdentifier",
                                "src": "11111:25:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11111:57:95"
                            },
                            "variableNames": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "11101:6:95"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "11181:25:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "11195:6:95"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "11203:2:95"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "11191:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11191:15:95"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "11181:6:95"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "11219:19:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "11230:3:95"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "11235:2:95"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "11226:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11226:12:95"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11219:3:95"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "10585:1:95"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "10588:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "10582:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10582:13:95"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "10596:18:95",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "10598:14:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "10607:1:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10610:1:95",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "10603:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10603:9:95"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "10598:1:95"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "10578:3:95",
                        "statements": []
                      },
                      "src": "10574:674:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11257:14:95",
                      "value": {
                        "name": "tail_2",
                        "nodeType": "YulIdentifier",
                        "src": "11265:6:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11257:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11291:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11302:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11287:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11287:18:95"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "11307:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11280:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11280:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11280:34:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11334:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11345:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11330:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11330:18:95"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "11350:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11323:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11323:34:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11323:34:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes_memory_ptr_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_t_uint256_t_bytes32__to_t_bytes_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10127:9:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "10138:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "10146:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "10154:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "10162:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "10170:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10181:4:95",
                    "type": ""
                  }
                ],
                "src": "9907:1456:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11492:102:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "11502:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11514:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11525:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11510:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11510:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11502:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11544:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11559:6:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11575:3:95",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11580:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "11571:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11571:11:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11584:1:95",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11567:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11567:19:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11555:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11555:32:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11537:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11537:51:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11537:51:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_IBaalSummoner_$15077__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11461:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11472:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11483:4:95",
                    "type": ""
                  }
                ],
                "src": "11368:226:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11706:87:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "11716:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11728:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11739:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11724:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11724:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11716:4:95"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11758:9:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11773:6:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11781:4:95",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11769:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11769:17:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11751:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11751:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11751:36:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11675:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11686:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11697:4:95",
                    "type": ""
                  }
                ],
                "src": "11599:194:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11919:98:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11936:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11947:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11929:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11929:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11929:21:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11959:52:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "11984:6:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11996:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12007:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11992:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11992:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "11967:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11967:44:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11959:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11888:9:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11899:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11910:4:95",
                    "type": ""
                  }
                ],
                "src": "11798:219:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12191:212:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12208:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12219:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12201:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12201:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12201:21:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12231:58:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "12262:6:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12274:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12285:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12270:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12270:18:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "12245:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12245:44:95"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "12235:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12309:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12320:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12305:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12305:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "12329:6:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12337:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12325:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12325:22:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12298:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12298:50:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12298:50:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12357:40:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "12382:6:95"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "12390:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "12365:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12365:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12357:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12152:9:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "12163:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "12171:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12182:4:95",
                    "type": ""
                  }
                ],
                "src": "12022:381:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12689:462:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12706:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12717:3:95",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12699:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12699:22:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12699:22:95"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12730:59:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "12761:6:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12773:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12784:3:95",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12769:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12769:19:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "12744:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12744:45:95"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "12734:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12809:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12820:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12805:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12805:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "12829:6:95"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12837:9:95"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12825:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12825:22:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12798:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12798:50:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12798:50:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12857:40:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "12882:6:95"
                          },
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "12890:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "12865:16:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12865:32:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12857:4:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12906:29:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12924:3:95",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12929:1:95",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "12920:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12920:11:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12933:1:95",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "12916:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12916:19:95"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "12910:2:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12955:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12966:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12951:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12951:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "12975:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12983:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12971:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12971:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12944:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12944:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12944:43:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13007:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13018:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13003:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13003:18:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "13027:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13035:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13023:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13023:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12996:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12996:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12996:43:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13059:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13070:3:95",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13055:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13055:19:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "13080:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13088:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13076:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13076:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13048:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13048:44:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13048:44:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13112:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13123:3:95",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13108:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13108:19:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "13133:6:95"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13141:2:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13129:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13129:15:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13101:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13101:44:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13101:44:95"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_address_t_address_t_address_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_address_t_address_t_address_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12618:9:95",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "12629:6:95",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "12637:6:95",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "12645:6:95",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "12653:6:95",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "12661:6:95",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "12669:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12680:4:95",
                    "type": ""
                  }
                ],
                "src": "12408:743:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13330:228:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13347:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13358:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13340:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13340:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13340:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13381:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13392:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13377:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13377:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13397:2:95",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13370:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13370:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13370:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13420:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13431:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13416:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13416:18:95"
                          },
                          {
                            "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13436:34:95",
                            "type": "",
                            "value": "Ownable: new owner is the zero a"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13409:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13409:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13409:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13491:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13502:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13487:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13487:18:95"
                          },
                          {
                            "hexValue": "646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13507:8:95",
                            "type": "",
                            "value": "ddress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13480:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13480:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13480:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13525:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13537:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13548:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13533:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13533:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13525:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13307:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13321:4:95",
                    "type": ""
                  }
                ],
                "src": "13156:402:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13737:234:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13754:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13765:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13747:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13747:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13747:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13788:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13799:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13784:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13784:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13804:2:95",
                            "type": "",
                            "value": "44"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13777:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13777:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13777:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13827:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13838:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13823:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13823:18:95"
                          },
                          {
                            "hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13843:34:95",
                            "type": "",
                            "value": "Function must be called through "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13816:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13816:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13816:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13898:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13909:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13894:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13894:18:95"
                          },
                          {
                            "hexValue": "64656c656761746563616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13914:14:95",
                            "type": "",
                            "value": "delegatecall"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13887:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13887:42:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13887:42:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13938:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13950:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13961:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13946:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13946:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13938:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13714:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13728:4:95",
                    "type": ""
                  }
                ],
                "src": "13563:408:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14150:234:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14167:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14178:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14160:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14160:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14160:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14201:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14212:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14197:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14197:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14217:2:95",
                            "type": "",
                            "value": "44"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14190:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14190:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14190:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14240:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14251:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14236:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14236:18:95"
                          },
                          {
                            "hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14256:34:95",
                            "type": "",
                            "value": "Function must be called through "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14229:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14229:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14229:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14311:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14322:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14307:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14307:18:95"
                          },
                          {
                            "hexValue": "6163746976652070726f7879",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14327:14:95",
                            "type": "",
                            "value": "active proxy"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14300:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14300:42:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14300:42:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14351:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14363:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14374:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14359:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14359:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14351:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14127:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14141:4:95",
                    "type": ""
                  }
                ],
                "src": "13976:408:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14563:163:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14580:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14591:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14573:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14573:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14573:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14614:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14625:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14610:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14610:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14630:2:95",
                            "type": "",
                            "value": "13"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14603:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14603:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14603:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14653:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14664:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14649:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14649:18:95"
                          },
                          {
                            "hexValue": "21617272617920706172697479",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14669:15:95",
                            "type": "",
                            "value": "!array parity"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14642:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14642:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14642:43:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14694:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14706:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14717:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14702:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14702:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14694:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_5342e7867ff27d05722d3541def69e5945710e227c7de50b846ee0662966dda0__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14540:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14554:4:95",
                    "type": ""
                  }
                ],
                "src": "14389:337:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14905:246:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14922:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14933:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14915:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14915:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14915:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14956:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14967:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14952:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14952:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14972:2:95",
                            "type": "",
                            "value": "56"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14945:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14945:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14945:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14995:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15006:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14991:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14991:18:95"
                          },
                          {
                            "hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15011:34:95",
                            "type": "",
                            "value": "UUPSUpgradeable: must not be cal"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14984:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14984:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14984:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15066:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15077:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15062:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15062:18:95"
                          },
                          {
                            "hexValue": "6c6564207468726f7567682064656c656761746563616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15082:26:95",
                            "type": "",
                            "value": "led through delegatecall"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15055:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15055:54:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15055:54:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15118:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15130:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15141:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15126:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15126:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15118:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14882:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14896:4:95",
                    "type": ""
                  }
                ],
                "src": "14731:420:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15330:231:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15347:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15358:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15340:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15340:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15340:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15381:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15392:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15377:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15377:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15397:2:95",
                            "type": "",
                            "value": "41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15370:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15370:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15370:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15420:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15431:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15416:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15416:18:95"
                          },
                          {
                            "hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f78",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15436:34:95",
                            "type": "",
                            "value": "ERC1967Upgrade: unsupported prox"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15409:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15409:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15409:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15491:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15502:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15487:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15487:18:95"
                          },
                          {
                            "hexValue": "6961626c6555554944",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15507:11:95",
                            "type": "",
                            "value": "iableUUID"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15480:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15480:39:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15480:39:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15528:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15540:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15551:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15536:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15536:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15528:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15307:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15321:4:95",
                    "type": ""
                  }
                ],
                "src": "15156:405:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15740:236:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15757:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15768:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15750:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15750:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15750:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15791:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15802:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15787:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15787:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15807:2:95",
                            "type": "",
                            "value": "46"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15780:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15780:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15780:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15830:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15841:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15826:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15826:18:95"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15846:34:95",
                            "type": "",
                            "value": "Initializable: contract is alrea"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15819:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15819:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15819:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15901:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15912:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15897:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15897:18:95"
                          },
                          {
                            "hexValue": "647920696e697469616c697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15917:16:95",
                            "type": "",
                            "value": "dy initialized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15890:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15890:44:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15890:44:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15943:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15955:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15966:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15951:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15951:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15943:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15717:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15731:4:95",
                    "type": ""
                  }
                ],
                "src": "15566:410:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16155:236:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16172:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16183:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16165:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16165:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16165:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16206:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16217:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16202:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16202:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16222:2:95",
                            "type": "",
                            "value": "46"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16195:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16195:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16195:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16245:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16256:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16241:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16241:18:95"
                          },
                          {
                            "hexValue": "45524331393637557067726164653a206e657720696d706c656d656e74617469",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16261:34:95",
                            "type": "",
                            "value": "ERC1967Upgrade: new implementati"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16234:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16234:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16234:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16316:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16327:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16312:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16312:18:95"
                          },
                          {
                            "hexValue": "6f6e206973206e6f742055555053",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16332:16:95",
                            "type": "",
                            "value": "on is not UUPS"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16305:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16305:44:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16305:44:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16358:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16370:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16381:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16366:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16366:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16358:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16132:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16146:4:95",
                    "type": ""
                  }
                ],
                "src": "15981:410:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16570:235:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16587:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16598:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16580:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16580:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16580:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16621:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16632:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16617:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16617:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16637:2:95",
                            "type": "",
                            "value": "45"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16610:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16610:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16610:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16660:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16671:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16656:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16656:18:95"
                          },
                          {
                            "hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16676:34:95",
                            "type": "",
                            "value": "ERC1967: new implementation is n"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16649:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16649:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16649:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16731:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16742:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16727:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16727:18:95"
                          },
                          {
                            "hexValue": "6f74206120636f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16747:15:95",
                            "type": "",
                            "value": "ot a contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16720:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16720:43:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16720:43:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16772:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16784:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16795:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16780:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16780:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16772:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16547:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16561:4:95",
                    "type": ""
                  }
                ],
                "src": "16396:409:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16984:182:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17001:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17012:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16994:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16994:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16994:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17035:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17046:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17031:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17031:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17051:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17024:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17024:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17024:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17074:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17085:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17070:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17070:18:95"
                          },
                          {
                            "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17090:34:95",
                            "type": "",
                            "value": "Ownable: caller is not the owner"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17063:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17063:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17063:62:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17134:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17146:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17157:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17142:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17142:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17134:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16961:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16975:4:95",
                    "type": ""
                  }
                ],
                "src": "16810:356:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17345:162:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17362:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17373:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17355:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17355:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17355:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17396:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17407:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17392:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17392:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17412:2:95",
                            "type": "",
                            "value": "12"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17385:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17385:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17385:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17435:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17446:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17431:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17431:18:95"
                          },
                          {
                            "hexValue": "7a65726f2061646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17451:14:95",
                            "type": "",
                            "value": "zero address"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17424:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17424:42:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17424:42:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17475:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17487:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17498:2:95",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17483:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17483:18:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17475:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17322:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17336:4:95",
                    "type": ""
                  }
                ],
                "src": "17171:336:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17686:228:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17703:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17714:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17696:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17696:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17696:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17737:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17748:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17733:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17733:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17753:2:95",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17726:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17726:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17726:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17776:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17787:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17772:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17772:18:95"
                          },
                          {
                            "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17792:34:95",
                            "type": "",
                            "value": "Address: delegate call to non-co"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17765:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17765:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17765:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17847:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17858:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17843:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17843:18:95"
                          },
                          {
                            "hexValue": "6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17863:8:95",
                            "type": "",
                            "value": "ntract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17836:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17836:36:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17836:36:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17881:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17893:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17904:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17889:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17889:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17881:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17663:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17677:4:95",
                    "type": ""
                  }
                ],
                "src": "17512:402:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18093:233:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18110:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18121:2:95",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18103:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18103:21:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18103:21:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18144:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18155:2:95",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18140:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18140:18:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18160:2:95",
                            "type": "",
                            "value": "43"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18133:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18133:30:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18133:30:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18183:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18194:2:95",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18179:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18179:18:95"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18199:34:95",
                            "type": "",
                            "value": "Initializable: contract is not i"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18172:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18172:62:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18172:62:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18254:9:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18265:2:95",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18250:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18250:18:95"
                          },
                          {
                            "hexValue": "6e697469616c697a696e67",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18270:13:95",
                            "type": "",
                            "value": "nitializing"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18243:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18243:41:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18243:41:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18293:27:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18305:9:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18316:3:95",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18301:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18301:19:95"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18293:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18070:9:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18084:4:95",
                    "type": ""
                  }
                ],
                "src": "17919:407:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18376:230:95",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "18386:19:95",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18402:2:95",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "18396:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18396:9:95"
                      },
                      "variableNames": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulIdentifier",
                          "src": "18386:6:95"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18414:58:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "18436:6:95"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "18452:4:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18458:2:95",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18448:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18448:13:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18467:2:95",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "18463:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18463:7:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18444:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18444:27:95"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18432:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18432:40:95"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "18418:10:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "18547:22:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "18549:16:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18549:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18549:18:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "18490:10:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18502:18:95",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18487:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18487:34:95"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "18526:10:95"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "18538:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "18523:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18523:22:95"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "18484:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18484:62:95"
                      },
                      "nodeType": "YulIf",
                      "src": "18481:88:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18585:2:95",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "18589:10:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18578:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18578:22:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18578:22:95"
                    }
                  ]
                },
                "name": "allocate_memory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "size",
                    "nodeType": "YulTypedName",
                    "src": "18356:4:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "memPtr",
                    "nodeType": "YulTypedName",
                    "src": "18365:6:95",
                    "type": ""
                  }
                ],
                "src": "18331:275:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18680:114:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "18724:22:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "18726:16:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18726:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18726:18:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18696:6:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18704:18:95",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "18693:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18693:30:95"
                      },
                      "nodeType": "YulIf",
                      "src": "18690:56:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18755:33:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18771:1:95",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18774:6:95"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "18767:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18767:14:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18783:4:95",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18763:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18763:25:95"
                      },
                      "variableNames": [
                        {
                          "name": "size",
                          "nodeType": "YulIdentifier",
                          "src": "18755:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_allocation_size_array_address_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "18660:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "size",
                    "nodeType": "YulTypedName",
                    "src": "18671:4:95",
                    "type": ""
                  }
                ],
                "src": "18611:183:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18856:129:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "18900:22:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "18902:16:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18902:18:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18902:18:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18872:6:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18880:18:95",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "18869:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18869:30:95"
                      },
                      "nodeType": "YulIf",
                      "src": "18866:56:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18931:48:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "18951:6:95"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18959:2:95",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18947:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18947:15:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18968:2:95",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "18964:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18964:7:95"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18943:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18943:29:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18974:4:95",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18939:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18939:40:95"
                      },
                      "variableNames": [
                        {
                          "name": "size",
                          "nodeType": "YulIdentifier",
                          "src": "18931:4:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_allocation_size_bytes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "18836:6:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "size",
                    "nodeType": "YulTypedName",
                    "src": "18847:4:95",
                    "type": ""
                  }
                ],
                "src": "18799:186:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19084:203:95",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "19094:26:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "19114:5:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "19108:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19108:12:95"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "19098:6:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19129:32:95",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "19148:5:95"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19155:4:95",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19144:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19144:16:95"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "19138:5:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19138:23:95"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "19129:5:95"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "19198:83:95",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "19212:59:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "19225:5:95"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "19240:1:95",
                                          "type": "",
                                          "value": "3"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "19247:4:95",
                                              "type": "",
                                              "value": "0x20"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "19253:6:95"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "19243:3:95"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "19243:17:95"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "19236:3:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19236:25:95"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "19267:1:95",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "19263:3:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19263:6:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "19232:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19232:38:95"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "19221:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19221:50:95"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19212:5:95"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "19176:6:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19184:4:95",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "19173:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19173:16:95"
                      },
                      "nodeType": "YulIf",
                      "src": "19170:111:95"
                    }
                  ]
                },
                "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "19064:5:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "19074:5:95",
                    "type": ""
                  }
                ],
                "src": "18990:297:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19345:205:95",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "19355:10:95",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "19364:1:95",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "19359:1:95",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "19424:63:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "19449:3:95"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "19454:1:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19445:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19445:11:95"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "19468:3:95"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "19473:1:95"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "19464:3:95"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19464:11:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "19458:5:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19458:18:95"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "19438:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19438:39:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19438:39:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "19385:1:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "19388:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "19382:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19382:13:95"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "19396:19:95",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "19398:15:95",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "19407:1:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19410:2:95",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "19403:3:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19403:10:95"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "19398:1:95"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "19378:3:95",
                        "statements": []
                      },
                      "src": "19374:113:95"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "19513:31:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "19526:3:95"
                                    },
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "19531:6:95"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19522:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19522:16:95"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19540:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "19515:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19515:27:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19515:27:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "19502:1:95"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "19505:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "19499:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19499:13:95"
                      },
                      "nodeType": "YulIf",
                      "src": "19496:48:95"
                    }
                  ]
                },
                "name": "copy_memory_to_memory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "19323:3:95",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "19328:3:95",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "19333:6:95",
                    "type": ""
                  }
                ],
                "src": "19292:258:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19602:185:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "19641:111:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19662:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19669:3:95",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19674:10:95",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "19665:3:95"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19665:20:95"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "19655:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19655:31:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19655:31:95"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19706:1:95",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19709:4:95",
                                  "type": "",
                                  "value": "0x11"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "19699:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19699:15:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19699:15:95"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19734:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19737:4:95",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "19727:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19727:15:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19727:15:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "19618:5:95"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19629:1:95",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "19625:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19625:6:95"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "19615:2:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19615:17:95"
                      },
                      "nodeType": "YulIf",
                      "src": "19612:140:95"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19761:20:95",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "19772:5:95"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19779:1:95",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19768:3:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19768:13:95"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "19761:3:95"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "19584:5:95",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "19594:3:95",
                    "type": ""
                  }
                ],
                "src": "19555:232:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19824:95:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19841:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19848:3:95",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19853:10:95",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "19844:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19844:20:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19834:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19834:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19834:31:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19881:1:95",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19884:4:95",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19874:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19874:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19874:15:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19905:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19908:4:95",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "19898:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19898:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19898:15:95"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "19792:127:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19956:95:95",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19973:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19980:3:95",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19985:10:95",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "19976:3:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19976:20:95"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19966:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19966:31:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19966:31:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20013:1:95",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20016:4:95",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20006:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20006:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20006:15:95"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20037:1:95",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20040:4:95",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "20030:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20030:15:95"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20030:15:95"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "19924:127:95"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20101:86:95",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "20165:16:95",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "20174:1:95",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "20177:1:95",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "20167:6:95"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "20167:12:95"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "20167:12:95"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20124:5:95"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "20135:5:95"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20150:3:95",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20155:1:95",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "20146:3:95"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "20146:11:95"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20159:1:95",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "20142:3:95"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20142:19:95"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20131:3:95"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20131:31:95"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "20121:2:95"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20121:42:95"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "20114:6:95"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20114:50:95"
                      },
                      "nodeType": "YulIf",
                      "src": "20111:70:95"
                    }
                  ]
                },
                "name": "validator_revert_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "20090:5:95",
                    "type": ""
                  }
                ],
                "src": "20056:131:95"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_available_length_bytes(src, length, end) -> array\n    {\n        array := allocate_memory(array_allocation_size_bytes(length))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let src := add(offset, _2)\n        if gt(add(add(offset, shl(5, _1)), _2), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_bytes(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n        let offset_1 := calldataload(add(headStart, 128))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value5_1, value6_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value5 := value5_1\n        value6 := value6_1\n        let offset_2 := calldataload(add(headStart, 160))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset_2)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value7 := add(_2, 32)\n        value8 := length\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value1 := abi_decode_available_length_bytes(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _4)\n        let src := add(_2, _4)\n        if gt(add(add(_2, shl(5, _3)), _4), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _3) { i := add(i, 1) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _4)\n            src := add(src, _4)\n        }\n        value0 := dst_1\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_boolt_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value3 := abi_decode_string(add(headStart, offset_3), dataEnd)\n        value4 := abi_decode_bool(add(headStart, 128))\n        value5 := abi_decode_bool(add(headStart, 160))\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_t_uint256_t_bytes32__to_t_bytes_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 128))\n        let _1 := 32\n        mstore(add(headStart, _1), sub(tail_1, headStart))\n        let pos := tail_1\n        mstore(tail_1, value2)\n        pos := add(tail_1, _1)\n        let tail_2 := add(add(tail_1, shl(5, value2)), _1)\n        let srcPtr := value1\n        let i := 0\n        for { } lt(i, value2) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, tail_1), not(31)))\n            let rel_offset_of_tail := calldataload(srcPtr)\n            if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), value1), not(30)))) { revert(0, 0) }\n            let value := add(rel_offset_of_tail, value1)\n            let length := calldataload(value)\n            if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n            if sgt(value1, sub(calldatasize(), length)) { revert(0, 0) }\n            tail_2 := abi_encode_bytes_calldata(add(value, _1), length, tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n        mstore(add(headStart, 64), value3)\n        mstore(add(headStart, 96), value4)\n    }\n    function abi_encode_tuple_t_contract$_IBaalSummoner_$15077__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value1, tail_1)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_address_t_address_t_address_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_address_t_address_t_address_t_address__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value1, tail_1)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, _1))\n        mstore(add(headStart, 160), and(value5, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5342e7867ff27d05722d3541def69e5945710e227c7de50b846ee0662966dda0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"!array parity\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
          "id": 95,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "4647": [
          {
            "length": 32,
            "start": 1260
          },
          {
            "length": 32,
            "start": 1336
          },
          {
            "length": 32,
            "start": 1505
          },
          {
            "length": 32,
            "start": 1572
          },
          {
            "length": 32,
            "start": 1728
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH3 0x60 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH3 0x16B JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH3 0x183 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x19B JUMPI DUP1 PUSH4 0xBB6DECC8 EQ PUSH3 0x1BB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x14B630F9 EQ PUSH3 0xA2 JUMPI DUP1 PUSH4 0x1F1BB0EF EQ PUSH3 0xE1 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH3 0x108 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH3 0x12D JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH3 0x144 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD PUSH3 0xC4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x100 CALLDATASIZE PUSH1 0x4 PUSH3 0x1621 JUMP JUMPDEST PUSH3 0x205 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x127 CALLDATASIZE PUSH1 0x4 PUSH3 0x15E1 JUMP JUMPDEST PUSH3 0x4E1 JUMP JUMPDEST PUSH3 0x106 PUSH3 0x13E CALLDATASIZE PUSH1 0x4 PUSH3 0x1728 JUMP JUMPDEST PUSH3 0x5D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x15C PUSH3 0x6B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xD8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x769 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x781 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0xC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x1DA CALLDATASIZE PUSH1 0x4 PUSH3 0x15E1 JUMP JUMPDEST PUSH3 0x8A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x106 PUSH3 0x1FF CALLDATASIZE PUSH1 0x4 PUSH3 0x15E1 JUMP JUMPDEST PUSH3 0x945 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x214 DUP7 DUP7 PUSH3 0x9C1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH3 0x226 DUP9 DUP9 DUP5 DUP5 PUSH3 0xD1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x209F3695 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6FDDE03 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x29B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x2C5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x18AB JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95D89B41 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x314 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x33E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x18AB JUMP JUMPDEST DUP16 DUP16 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x359 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1BA3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP3 MSTORE PUSH18 0x222420B23B2A37B5B2B729BAB6B6B7B732B9 PUSH1 0x71 SHL PUSH1 0x20 DUP4 ADD MSTORE SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP16 SWAP1 PUSH3 0x39D SWAP1 PUSH3 0x1D69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3BF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1AA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x3EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x415 SWAP2 SWAP1 PUSH3 0x1601 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP5 AND SWAP1 PUSH4 0xF2FDE38B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x472 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND SWAP3 POP PUSH4 0xF2FDE38B SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x4CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH3 0x536 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x581 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x5AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C4C JUMP JUMPDEST PUSH3 0x5B5 DUP2 PUSH3 0xF5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x5D3 SWAP2 DUP4 SWAP2 SWAP1 PUSH3 0xF69 JUMP JUMPDEST POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH3 0x622 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C00 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x66D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x696 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C4C JUMP JUMPDEST PUSH3 0x6A1 DUP3 PUSH3 0xF5F JUMP JUMPDEST PUSH3 0x6AF DUP3 DUP3 PUSH1 0x1 PUSH3 0xF69 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH3 0x755 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH3 0x773 PUSH3 0x10F6 JUMP JUMPDEST PUSH3 0x77F PUSH1 0x0 PUSH3 0x1152 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH3 0x7A2 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH3 0x7BE JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x7BE JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH3 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH3 0x847 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH3 0x851 PUSH3 0x11A4 JUMP JUMPDEST PUSH3 0x85B PUSH3 0x11D8 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x5D3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH3 0x8AF PUSH3 0x10F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x7A65726F2061646472657373 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0xC9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xF471C7A7115723E1D5E0A3B924BEC97596831B94082A24D73C8C3210C6CB3B06 SWAP1 PUSH1 0x20 ADD PUSH3 0x89A JUMP JUMPDEST PUSH3 0x94F PUSH3 0x10F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH3 0x5D3 DUP2 PUSH3 0x1152 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH3 0x9D8 DUP10 DUP12 ADD DUP12 PUSH3 0x1922 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9118CE7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xA35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA70 SWAP2 SWAP1 PUSH3 0x1601 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2346618 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xAC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xAD8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAFE SWAP2 SWAP1 PUSH3 0x1601 JUMP JUMPDEST SWAP1 POP DUP2 PUSH4 0x562D190D PUSH1 0xE0 SHL DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xB1E SWAP3 SWAP2 SWAP1 PUSH3 0x1B7A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH3 0xB5D SWAP1 PUSH3 0x1497 JUMP JUMPDEST PUSH3 0xB6A SWAP3 SWAP2 SWAP1 PUSH3 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xB87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP10 POP DUP1 PUSH4 0x562D190D PUSH1 0xE0 SHL DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xBA8 SWAP3 SWAP2 SWAP1 PUSH3 0x1B7A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH3 0xBE7 SWAP1 PUSH3 0x1497 JUMP JUMPDEST PUSH3 0xBF4 SWAP3 SWAP2 SWAP1 PUSH3 0x1A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xC11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP9 POP DUP4 PUSH3 0xC70 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8456CB59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xC56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xC6B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH3 0xCCC JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8456CB59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xCB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xCC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xFB5849D45E916A3192059973D782E08B2B3888FA796F536D99AF0C7BD01CA16C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH3 0xD30 DUP7 DUP9 ADD DUP9 PUSH3 0x1793 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH3 0xD49 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH3 0xD87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x21617272617920706172697479 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH3 0xF55 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xDAB JUMPI PUSH3 0xDAB PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH3 0xE6A JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xDDE JUMPI PUSH3 0xDDE PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xDFB JUMPI PUSH3 0xDFB PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE35 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xE50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xE65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xE81 JUMPI PUSH3 0xE81 PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH3 0xF40 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xEB4 JUMPI PUSH3 0xEB4 PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xED1 JUMPI PUSH3 0xED1 PUSH3 0x1DEA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xF0B SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xF26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xF3B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 PUSH3 0xF4C DUP2 PUSH3 0x1DC0 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xD8A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x5D3 PUSH3 0x10F6 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0xFA4 JUMPI PUSH3 0xF9F DUP4 PUSH3 0x1202 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xFDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1011 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x100E SWAP2 DUP2 ADD SWAP1 PUSH3 0x1891 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1076 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH3 0x10E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST POP PUSH3 0xF9F DUP4 DUP4 DUP4 PUSH3 0x12A1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x77F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x11CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C98 JUMP JUMPDEST PUSH3 0x77F PUSH3 0x12D2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x77F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH3 0x1271 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x2562 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x12AC DUP4 PUSH3 0x1307 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH3 0x12BA JUMPI POP DUP1 JUMPDEST ISZERO PUSH3 0xF9F JUMPI PUSH3 0x12CC DUP4 DUP4 PUSH3 0x1349 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x12FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP1 PUSH3 0x1C98 JUMP JUMPDEST PUSH3 0x77F CALLER PUSH3 0x1152 JUMP JUMPDEST PUSH3 0x1312 DUP2 PUSH3 0x1202 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH3 0x13B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x52D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH3 0x13D0 SWAP2 SWAP1 PUSH3 0x1A57 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x140D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1412 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH3 0x143D DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2582 PUSH1 0x27 SWAP2 CODECOPY PUSH3 0x1446 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH3 0x1457 JUMPI POP DUP2 PUSH3 0x1463 JUMP JUMPDEST PUSH3 0x1463 DUP4 DUP4 PUSH3 0x146A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH3 0x147B JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x52D SWAP2 SWAP1 PUSH3 0x1B65 JUMP JUMPDEST PUSH2 0x735 DUP1 PUSH3 0x1E2D DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14BC PUSH3 0x14B6 DUP5 PUSH3 0x1D3E JUMP JUMPDEST PUSH3 0x1CE3 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH3 0x14D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x14FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH3 0x150D PUSH3 0x14B6 DUP4 PUSH3 0x1D17 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE DUP3 DUP3 ADD SWAP2 POP DUP3 DUP7 ADD DUP8 DUP5 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD GT ISZERO PUSH3 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x154F JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1531 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH3 0x1585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x159E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x15B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x15D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1463 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH3 0x14A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x15F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1463 DUP2 PUSH3 0x1E16 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1614 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1463 DUP2 PUSH3 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP11 DUP13 SUB SLT ISZERO PUSH3 0x1640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH3 0x164D DUP2 PUSH3 0x1E16 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD PUSH3 0x165F DUP2 PUSH3 0x1E16 JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1692 DUP14 DUP4 DUP15 ADD PUSH3 0x1572 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x16AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x16BA DUP14 DUP4 DUP15 ADD PUSH3 0x1572 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x16D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP13 ADD SWAP2 POP DUP13 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x16E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x16F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP14 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH3 0x170F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x173C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH3 0x1749 DUP2 PUSH3 0x1E16 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH3 0x1778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1789 DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH3 0x14A5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x17A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x17C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x17D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH3 0x17EA PUSH3 0x14B6 DUP4 PUSH3 0x1D17 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE DUP3 DUP3 ADD SWAP2 POP DUP3 DUP7 ADD DUP12 DUP5 DUP7 PUSH1 0x5 SHL DUP10 ADD ADD GT ISZERO PUSH3 0x180B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH3 0x183B JUMPI DUP1 CALLDATALOAD PUSH3 0x1826 DUP2 PUSH3 0x1E16 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH3 0x1810 JUMP JUMPDEST POP SWAP8 POP POP DUP8 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH3 0x1853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1861 DUP8 DUP4 DUP9 ADD PUSH3 0x14E8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x1878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1887 DUP7 DUP3 DUP8 ADD PUSH3 0x14E8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x18D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH3 0x18E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH3 0x18F9 PUSH3 0x14B6 DUP3 PUSH3 0x1D3E JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH3 0x190F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x143D DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x1D91 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x193C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1963 DUP11 DUP4 DUP12 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x197A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1988 DUP11 DUP4 DUP12 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x199F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x19AD DUP11 DUP4 DUP12 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x19C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x19D3 DUP10 DUP3 DUP11 ADD PUSH3 0x15BE JUMP JUMPDEST SWAP4 POP POP PUSH3 0x19E4 PUSH1 0x80 DUP9 ADD PUSH3 0x155C JUMP JUMPDEST SWAP2 POP PUSH3 0x19F4 PUSH1 0xA0 DUP9 ADD PUSH3 0x155C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x1A43 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x1D91 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x1A6B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1D91 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x1A9B SWAP1 DUP4 ADD DUP5 PUSH3 0x1A29 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1AB8 PUSH1 0x80 DUP4 ADD DUP9 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 DUP4 MSTORE DUP2 DUP4 ADD SWAP1 POP DUP2 DUP9 PUSH1 0x5 SHL DUP5 ADD ADD DUP10 PUSH1 0x0 JUMPDEST DUP11 DUP2 LT ISZERO PUSH3 0x1B4C JUMPI DUP6 DUP4 SUB PUSH1 0x1F NOT ADD DUP5 MSTORE DUP2 CALLDATALOAD CALLDATASIZE DUP14 SWAP1 SUB PUSH1 0x1E NOT ADD DUP2 SLT PUSH3 0x1AFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP13 ADD DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1B18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP15 SGT ISZERO PUSH3 0x1B28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1B37 DUP6 DUP3 DUP10 DUP6 ADD PUSH3 0x1A00 JUMP JUMPDEST SWAP6 DUP8 ADD SWAP6 SWAP5 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1AD6 JUMP JUMPDEST POP POP PUSH1 0x40 DUP7 ADD SWAP8 SWAP1 SWAP8 MSTORE POP POP POP POP PUSH1 0x60 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1463 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1B8F PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x1A29 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x143D DUP2 DUP6 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1BB8 PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x1A29 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1BCC DUP2 DUP10 PUSH3 0x1A29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND PUSH1 0x40 DUP6 ADD MSTORE SWAP6 DUP8 AND PUSH1 0x60 DUP5 ADD MSTORE POP POP SWAP2 DUP5 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP3 AND PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1D0F JUMPI PUSH3 0x1D0F PUSH3 0x1E00 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1D34 JUMPI PUSH3 0x1D34 PUSH3 0x1E00 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1D5B JUMPI PUSH3 0x1D5B PUSH3 0x1E00 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0x1D8B JUMPI PUSH1 0x0 NOT DUP2 PUSH1 0x20 SUB PUSH1 0x3 SHL SHL DUP3 AND SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1DAE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1D94 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x12CC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x1DE3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x735 CODESIZE SUB DUP1 PUSH2 0x735 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x2DC JUMP JUMPDEST PUSH2 0x2E DUP3 DUP3 PUSH1 0x0 PUSH2 0x35 JUMP JUMPDEST POP POP PUSH2 0x43B JUMP JUMPDEST PUSH2 0x3E DUP4 PUSH2 0x6B JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x4B JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x66 JUMPI PUSH2 0x64 DUP4 DUP4 PUSH2 0xAB PUSH1 0x20 SHL PUSH2 0x29 OR PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x74 DUP2 PUSH2 0xD7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD0 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x70E PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xEA DUP2 PUSH2 0x222 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x151 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x188 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x231 PUSH1 0x20 SHL PUSH2 0x64 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1C6 SWAP2 SWAP1 PUSH2 0x3AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x201 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x206 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x218 DUP7 DUP4 DUP4 DUP8 PUSH2 0x234 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2A0 JUMPI DUP3 MLOAD PUSH2 0x299 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x299 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x148 JUMP JUMPDEST POP DUP2 PUSH2 0x2AA JUMP JUMPDEST PUSH2 0x2AA DUP4 DUP4 PUSH2 0x2B2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x2C2 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x349 JUMPI PUSH2 0x349 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x371 JUMPI PUSH2 0x371 PUSH2 0x425 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39B DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3BC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3F9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3E5 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x414 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3FC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x64 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2C4 DUP1 PUSH2 0x44A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11 JUMPDEST PUSH2 0x27 PUSH2 0x22 PUSH2 0x67 JUMP JUMPDEST PUSH2 0x9F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x268 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0xC3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0xBE JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0xE0 SWAP2 SWAP1 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x120 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x131 DUP7 DUP4 DUP4 DUP8 PUSH2 0x13B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1AC JUMPI DUP3 MLOAD PUSH2 0x1A5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x1B6 DUP4 DUP4 PUSH2 0x1BE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1CE JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1FA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x237 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x223 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x237 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x252 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x23A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122051CCE1 0x4D 0xD9 CALLER PUSH17 0x37379BD43EE81331C1B371DBEB3F61C2BA 0xC 0xCD 0xB3 0xAD 0xE SSTORE BYTE SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C65643608 SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A264697066735822122071 RETURN NUMBER 0xCB SMOD EXP PC JUMPI CHAINID RETURNDATASIZE 0x25 DUP12 0xCD SWAP3 CALLDATASIZE 0x2B DUP8 PUSH19 0x275C9B8C6DD19EDCEC82BAAFFD6364736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
      "sourceMap": "567:5994:78:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;669:34;;;;;;;;;;-1:-1:-1;669:34:78;;;;-1:-1:-1;;;;;669:34:78;;;;;;-1:-1:-1;;;;;8774:32:95;;;8756:51;;8744:2;8729:18;669:34:78;;;;;;;;1895:1211;;;;;;;;;;-1:-1:-1;1895:1211:78;;;;;:::i;:::-;;:::i;:::-;;3317:197:41;;;;;;;;;;-1:-1:-1;3317:197:41;;;;;:::i;:::-;;:::i;3763:222::-;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;:::-;;;9871:25:95;;;9859:2;9844:18;3006:131:41;9725:177:95;2071:101:36;;;;;;;;;;;;;:::i;821:108:78:-;;;;;;;;;;;;;:::i;1441:85:36:-;;;;;;;;;;-1:-1:-1;1513:6:36;;-1:-1:-1;;;;;1513:6:36;1441:85;;1077:225:78;;;;;;;;;;-1:-1:-1;1077:225:78;;;;;:::i;:::-;;:::i;2321:198:36:-;;;;;;;;;;-1:-1:-1;2321:198:36;;;;;:::i;:::-;;:::i;1895:1211:78:-;2216:18;2236:20;2260:61;2286:25;;2260:12;:61::i;:::-;2215:106;;;;2367:62;2378:24;;2404:10;2416:12;2367:10;:62::i;:::-;2479:13;2495;;;;;;;;;-1:-1:-1;;;;;2495:13:78;-1:-1:-1;;;;;2495:36:78;;2584:12;-1:-1:-1;;;;;2573:29:78;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2573:31:78;;;;;;;;;;;;:::i;:::-;2634:12;-1:-1:-1;;;;;2623:31:78;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2623:33:78;;;;;;;;;;;;:::i;:::-;2674:9;2701:14;2733:10;2761:12;2545:242;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2545:242:78;;;;;;2872:27;;;;;;;;;-1:-1:-1;;;2545:242:78;2872:27;;;2545:242;2801:25;;;;2840:10;;2864:36;;;:::i;:::-;2495:427;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2975:56;;-1:-1:-1;;;2975:56:78;;-1:-1:-1;;;;;8774:32:95;;;2975:56:78;;;8756:51:95;2479:443:78;;-1:-1:-1;2975:40:78;;;;;;8729:18:95;;2975:56:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3041:58:78;;-1:-1:-1;;;3041:58:78;;-1:-1:-1;;;;;8774:32:95;;;3041:58:78;;;8756:51:95;3041:42:78;;;-1:-1:-1;3041:42:78;;-1:-1:-1;8729:18:95;;3041:58:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2180:926;;;1895:1211;;;;;;;;;:::o;3317:197:41:-;1889:4;-1:-1:-1;;;;;1898:6:41;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:41;;;;;;;:::i;:::-;;;;;;;;;1995:6;-1:-1:-1;;;;;1971:30:41;:20;-1:-1:-1;;;;;;;;;;;1642:65:38;-1:-1:-1;;;;;1642:65:38;;1563:151;1971:20:41;-1:-1:-1;;;;;1971:30:41;;1963:87;;;;-1:-1:-1;;;1963:87:41;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;3763:222::-;1889:4;-1:-1:-1;;;;;1898:6:41;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:41;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:41;:20;-1:-1:-1;;;;;;;;;;;1642:65:38;-1:-1:-1;;;;;1642:65:38;;1563:151;1971:20:41;-1:-1:-1;;;;;1971:30:41;;1963:87;;;;-1:-1:-1;;;1963:87:41;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;3006:131::-;3084:7;2324:4;-1:-1:-1;;;;;2333:6:41;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:41;;14933:2:95;2308:92:41;;;14915:21:95;14972:2;14952:18;;;14945:30;15011:34;14991:18;;;14984:62;15082:26;15062:18;;;15055:54;15126:19;;2308:92:41;14731:420:95;2308:92:41;-1:-1:-1;;;;;;;;;;;;3006:131:41;:::o;2071:101:36:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;821:108:78:-;3268:19:40;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:40;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:40;1476:19:50;:23;;;3376:66:40;;-1:-1:-1;3425:12:40;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:40;;15768:2:95;3314:201:40;;;15750:21:95;15807:2;15787:18;;;15780:30;15846:34;15826:18;;;15819:62;-1:-1:-1;;;15897:18:95;;;15890:44;15951:19;;3314:201:40;15566:410:95;3314:201:40;3525:12;:16;;-1:-1:-1;;3525:16:40;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:40;;;;;3551:65;872:16:78::1;:14;:16::i;:::-;898:24;:22;:24::i;:::-;3640:14:40::0;3636:99;;;3686:5;3670:21;;-1:-1:-1;;3670:21:40;;;3710:14;;-1:-1:-1;11751:36:95;;3710:14:40;;11739:2:95;11724:18;3710:14:40;;;;;;;;3258:483;821:108:78:o;1077:225::-;1334:13:36;:11;:13::i;:::-;-1:-1:-1;;;;;1159:26:78;::::1;1151:51;;;::::0;-1:-1:-1;;;1151:51:78;;17373:2:95;1151:51:78::1;::::0;::::1;17355:21:95::0;17412:2;17392:18;;;17385:30;-1:-1:-1;;;17431:18:95;;;17424:42;17483:18;;1151:51:78::1;17171:336:95::0;1151:51:78::1;1212:13;:43:::0;;-1:-1:-1;;;;;;1212:43:78::1;-1:-1:-1::0;;;;;1212:43:78;::::1;::::0;;::::1;::::0;;;1270:25:::1;::::0;8756:51:95;;;1270:25:78::1;::::0;8744:2:95;8729:18;1270:25:78::1;8610:203:95::0;2321:198:36;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2409:22:36;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:36;;13358:2:95;2401:73:36::1;::::0;::::1;13340:21:95::0;13397:2;13377:18;;;13370:30;13436:34;13416:18;;;13409:62;-1:-1:-1;;;13487:18:95;;;13480:36;13533:19;;2401:73:36::1;13156:402:95::0;2401:73:36::1;2484:28;2503:8;2484:18;:28::i;4627:1828:78:-:0;4718:17;;;;;;;;5363:124;;;;5391:20;5363:124;:::i;:::-;4768:719;;;;;;;;;;;;5498:21;5522:13;;;;;;;;;-1:-1:-1;;;;;5522:13:78;-1:-1:-1;;;;;5522:27:78;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5498:53;;5561:23;5587:13;;;;;;;;;-1:-1:-1;;;;;5587:13:78;-1:-1:-1;;;;;5587:29:78;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5561:57;;5696:13;5771:40;;;5833:9;5864:11;5727:166;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5727:166:78;;;;;;;;;;;;;;-1:-1:-1;;;;;5727:166:78;-1:-1:-1;;;;;;5727:166:78;;;;;;;;;;5662:245;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;5629:288;;5997:15;6074:42;;;6138:5;6165:7;6030:160;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6030:160:78;;;;;;;;;;;;;;-1:-1:-1;;;;;6030:160:78;-1:-1:-1;;;;;;6030:160:78;;;;;;;;;;5963:241;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;5928:286;;6229:19;6224:82;;6275:11;-1:-1:-1;;;;;6264:29:78;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6224:82;6320:17;6315:78;;6364:9;-1:-1:-1;;;;;6353:27:78;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6315:78;6408:40;;;-1:-1:-1;;;;;9048:15:95;;;9030:34;;9100:15;;9095:2;9080:18;;9073:43;6408:40:78;;8965:18:95;6408:40:78;;;;;;;4758:1697;;;;;;;;4627:1828;;;;;:::o;3324:1181::-;3486:26;;;3716:67;;;;3727:20;3716:67;:::i;:::-;3472:311;;;;;;3835:14;:21;3815:9;:16;:41;:100;;;;;3896:12;:19;3876:9;:16;:39;3815:100;3794:160;;;;-1:-1:-1;;;3794:160:78;;14591:2:95;3794:160:78;;;14573:21:95;14630:2;14610:18;;;14603:30;-1:-1:-1;;;14649:18:95;;;14642:43;14702:18;;3794:160:78;14389:337:95;3794:160:78;4000:9;3995:504;4019:9;:16;4015:1;:20;3995:504;;;4078:1;4060:12;4073:1;4060:15;;;;;;;;:::i;:::-;;;;;;;:19;4056:207;;;4110:10;-1:-1:-1;;;;;4099:27:78;;4148:9;4158:1;4148:12;;;;;;;;:::i;:::-;;;;;;;4182:14;4197:1;4182:17;;;;;;;;:::i;:::-;;;;;;;4099:118;;;;;;;;;;;;;;;-1:-1:-1;;;;;9638:32:95;;;;9620:51;;9702:2;9687:18;;9680:34;9608:2;9593:18;;9446:274;4099:118:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4056:207;4300:1;4280:14;4295:1;4280:17;;;;;;;;:::i;:::-;;;;;;;:21;4276:213;;;4332:12;-1:-1:-1;;;;;4321:29:78;;4372:9;4382:1;4372:12;;;;;;;;:::i;:::-;;;;;;;4406:14;4421:1;4406:17;;;;;;;;:::i;:::-;;;;;;;4321:120;;;;;;;;;;;;;;;-1:-1:-1;;;;;9638:32:95;;;;9620:51;;9702:2;9687:18;;9680:34;9608:2;9593:18;;9446:274;4321:120:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4276:213;4037:3;;;;:::i;:::-;;;;3995:504;;;;3462:1043;;;3324:1181;;;;:::o;6461:98::-;1334:13:36;:11;:13::i;2938:974:38:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;2938:974;;;:::o;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:38;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:38;;;;;;;;-1:-1:-1;;3531:63:38;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:38;;16183:2:95;3758:56:38;;;16165:21:95;16222:2;16202:18;;;16195:30;16261:34;16241:18;;;16234:62;-1:-1:-1;;;16312:18:95;;;16305:44;16366:19;;3758:56:38;15981:410:95;3527:302:38;-1:-1:-1;;;;;;;;;;;3644:28:38;;3636:82;;;;-1:-1:-1;;;3636:82:38;;15358:2:95;3636:82:38;;;15340:21:95;15397:2;15377:18;;;15370:30;15436:34;15416:18;;;15409:62;-1:-1:-1;;;15487:18:95;;;15480:39;15536:19;;3636:82:38;15156:405:95;3636:82:38;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;1599:130:36:-;1513:6;;-1:-1:-1;;;;;1513:6:36;929:10:52;1662:23:36;1654:68;;;;-1:-1:-1;;;1654:68:36;;17012:2:95;1654:68:36;;;16994:21:95;;;17031:18;;;17024:30;17090:34;17070:18;;;17063:62;17142:18;;1654:68:36;16810:356:95;2673:187:36;2765:6;;;-1:-1:-1;;;;;2781:17:36;;;-1:-1:-1;;;;;;2781:17:36;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;1003:95::-;5363:13:40;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:40;;;;;;;:::i;:::-;1065:26:36::1;:24;:26::i;1042:67:41:-:0;5363:13:40;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:40;;;;;;;:::i;1805:281:38:-;-1:-1:-1;;;;;1476:19:50;;;1878:106:38;;;;-1:-1:-1;;;1878:106:38;;16598:2:95;1878:106:38;;;16580:21:95;16637:2;16617:18;;;16610:30;16676:34;16656:18;;;16649:62;-1:-1:-1;;;16727:18:95;;;16720:43;16780:19;;1878:106:38;16396:409:95;1878:106:38;-1:-1:-1;;;;;;;;;;;1994:85:38;;-1:-1:-1;;;;;;1994:85:38;-1:-1:-1;;;;;1994:85:38;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2478:288;;;:::o;1104:111:36:-;5363:13:40;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:40;;;;;;;:::i;:::-;1176:32:36::1;929:10:52::0;1176:18:36::1;:32::i;2192:152:38:-:0;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:38;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:50;;;7195:88:38;;;;-1:-1:-1;;;7195:88:38;;17714:2:95;7195:88:38;;;17696:21:95;17753:2;17733:18;;;17726:30;17792:34;17772:18;;;17765:62;-1:-1:-1;;;17843:18:95;;;17836:36;17889:19;;7195:88:38;17512:402:95;7195:88:38;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:38;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;7088:455;-1:-1:-1;;;;;7088:455:38:o;7438:295:50:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:50;7635:17;;7608:119;7683:33;7691:10;7703:12;7683:7;:33::i;:::-;7438:295;;;;;:::o;7739:540::-;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:50;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;:::o;14:336:95:-;78:5;107:52;123:35;151:6;123:35;:::i;:::-;107:52;:::i;:::-;98:61;;182:6;175:5;168:21;222:3;213:6;208:3;204:16;201:25;198:45;;;239:1;236;229:12;198:45;288:6;283:3;276:4;269:5;265:16;252:43;342:1;335:4;326:6;319:5;315:18;311:29;304:40;14:336;;;;;:::o;355:673::-;409:5;462:3;455:4;447:6;443:17;439:27;429:55;;480:1;477;470:12;429:55;516:6;503:20;542:4;566:60;582:43;622:2;582:43;:::i;566:60::-;648:3;672:2;667:3;660:15;700:2;695:3;691:12;684:19;;735:2;727:6;723:15;787:3;782:2;776;773:1;769:10;761:6;757:23;753:32;750:41;747:61;;;804:1;801;794:12;747:61;826:1;836:163;850:2;847:1;844:9;836:163;;;907:17;;895:30;;945:12;;;;977;;;;868:1;861:9;836:163;;;-1:-1:-1;1017:5:95;;355:673;-1:-1:-1;;;;;;;355:673:95:o;1033:160::-;1098:20;;1154:13;;1147:21;1137:32;;1127:60;;1183:1;1180;1173:12;1127:60;1033:160;;;:::o;1198:347::-;1249:8;1259:6;1313:3;1306:4;1298:6;1294:17;1290:27;1280:55;;1331:1;1328;1321:12;1280:55;-1:-1:-1;1354:20:95;;1397:18;1386:30;;1383:50;;;1429:1;1426;1419:12;1383:50;1466:4;1458:6;1454:17;1442:29;;1518:3;1511:4;1502:6;1494;1490:19;1486:30;1483:39;1480:59;;;1535:1;1532;1525:12;1480:59;1198:347;;;;;:::o;1550:221::-;1593:5;1646:3;1639:4;1631:6;1627:17;1623:27;1613:55;;1664:1;1661;1654:12;1613:55;1686:79;1761:3;1752:6;1739:20;1732:4;1724:6;1720:17;1686:79;:::i;1776:247::-;1835:6;1888:2;1876:9;1867:7;1863:23;1859:32;1856:52;;;1904:1;1901;1894:12;1856:52;1943:9;1930:23;1962:31;1987:5;1962:31;:::i;2028:251::-;2098:6;2151:2;2139:9;2130:7;2126:23;2122:32;2119:52;;;2167:1;2164;2157:12;2119:52;2199:9;2193:16;2218:31;2243:5;2218:31;:::i;2284:1547::-;2448:6;2456;2464;2472;2480;2488;2496;2504;2512;2565:3;2553:9;2544:7;2540:23;2536:33;2533:53;;;2582:1;2579;2572:12;2533:53;2621:9;2608:23;2640:31;2665:5;2640:31;:::i;:::-;2690:5;-1:-1:-1;2747:2:95;2732:18;;2719:32;2760:33;2719:32;2760:33;:::i;:::-;2812:7;-1:-1:-1;2866:2:95;2851:18;;2838:32;;-1:-1:-1;2921:2:95;2906:18;;2893:32;2944:18;2974:14;;;2971:34;;;3001:1;2998;2991:12;2971:34;3040:58;3090:7;3081:6;3070:9;3066:22;3040:58;:::i;:::-;3117:8;;-1:-1:-1;3014:84:95;-1:-1:-1;3205:3:95;3190:19;;3177:33;;-1:-1:-1;3222:16:95;;;3219:36;;;3251:1;3248;3241:12;3219:36;3290:60;3342:7;3331:8;3320:9;3316:24;3290:60;:::i;:::-;3369:8;;-1:-1:-1;3264:86:95;-1:-1:-1;3457:3:95;3442:19;;3429:33;;-1:-1:-1;3474:16:95;;;3471:36;;;3503:1;3500;3493:12;3471:36;3541:8;3530:9;3526:24;3516:34;;3588:7;3581:4;3577:2;3573:13;3569:27;3559:55;;3610:1;3607;3600:12;3559:55;3650:2;3637:16;3676:2;3668:6;3665:14;3662:34;;;3692:1;3689;3682:12;3662:34;3745:7;3740:2;3730:6;3727:1;3723:14;3719:2;3715:23;3711:32;3708:45;3705:65;;;3766:1;3763;3756:12;3705:65;3797:2;3793;3789:11;3779:21;;3819:6;3809:16;;;;;2284:1547;;;;;;;;;;;:::o;3836:584::-;3913:6;3921;3974:2;3962:9;3953:7;3949:23;3945:32;3942:52;;;3990:1;3987;3980:12;3942:52;4029:9;4016:23;4048:31;4073:5;4048:31;:::i;:::-;4098:5;-1:-1:-1;4154:2:95;4139:18;;4126:32;4181:18;4170:30;;4167:50;;;4213:1;4210;4203:12;4167:50;4236:22;;4289:4;4281:13;;4277:27;-1:-1:-1;4267:55:95;;4318:1;4315;4308:12;4267:55;4341:73;4406:7;4401:2;4388:16;4383:2;4379;4375:11;4341:73;:::i;:::-;4331:83;;;3836:584;;;;;:::o;4425:1452::-;4577:6;4585;4593;4646:2;4634:9;4625:7;4621:23;4617:32;4614:52;;;4662:1;4659;4652:12;4614:52;4702:9;4689:23;4731:18;4772:2;4764:6;4761:14;4758:34;;;4788:1;4785;4778:12;4758:34;4826:6;4815:9;4811:22;4801:32;;4871:7;4864:4;4860:2;4856:13;4852:27;4842:55;;4893:1;4890;4883:12;4842:55;4929:2;4916:16;4951:4;4975:60;4991:43;5031:2;4991:43;:::i;4975:60::-;5057:3;5081:2;5076:3;5069:15;5109:2;5104:3;5100:12;5093:19;;5140:2;5136;5132:11;5188:7;5183:2;5177;5174:1;5170:10;5166:2;5162:19;5158:28;5155:41;5152:61;;;5209:1;5206;5199:12;5152:61;5231:1;5222:10;;5241:238;5255:2;5252:1;5249:9;5241:238;;;5326:3;5313:17;5343:31;5368:5;5343:31;:::i;:::-;5387:18;;5273:1;5266:9;;;;;5425:12;;;;5457;;5241:238;;;-1:-1:-1;5498:5:95;-1:-1:-1;;5541:18:95;;5528:32;;-1:-1:-1;;5572:16:95;;;5569:36;;;5601:1;5598;5591:12;5569:36;5624:63;5679:7;5668:8;5657:9;5653:24;5624:63;:::i;:::-;5614:73;;5740:2;5729:9;5725:18;5712:32;5696:48;;5769:2;5759:8;5756:16;5753:36;;;5785:1;5782;5775:12;5753:36;;5808:63;5863:7;5852:8;5841:9;5837:24;5808:63;:::i;:::-;5798:73;;;4425:1452;;;;;:::o;5882:184::-;5952:6;6005:2;5993:9;5984:7;5980:23;5976:32;5973:52;;;6021:1;6018;6011:12;5973:52;-1:-1:-1;6044:16:95;;5882:184;-1:-1:-1;5882:184:95:o;6071:635::-;6151:6;6204:2;6192:9;6183:7;6179:23;6175:32;6172:52;;;6220:1;6217;6210:12;6172:52;6253:9;6247:16;6286:18;6278:6;6275:30;6272:50;;;6318:1;6315;6308:12;6272:50;6341:22;;6394:4;6386:13;;6382:27;-1:-1:-1;6372:55:95;;6423:1;6420;6413:12;6372:55;6452:2;6446:9;6477:48;6493:31;6521:2;6493:31;:::i;6477:48::-;6548:2;6541:5;6534:17;6588:7;6583:2;6578;6574;6570:11;6566:20;6563:33;6560:53;;;6609:1;6606;6599:12;6560:53;6622:54;6673:2;6668;6661:5;6657:14;6652:2;6648;6644:11;6622:54;:::i;6711:1082::-;6849:6;6857;6865;6873;6881;6889;6942:3;6930:9;6921:7;6917:23;6913:33;6910:53;;;6959:1;6956;6949:12;6910:53;6999:9;6986:23;7028:18;7069:2;7061:6;7058:14;7055:34;;;7085:1;7082;7075:12;7055:34;7108:50;7150:7;7141:6;7130:9;7126:22;7108:50;:::i;:::-;7098:60;;7211:2;7200:9;7196:18;7183:32;7167:48;;7240:2;7230:8;7227:16;7224:36;;;7256:1;7253;7246:12;7224:36;7279:52;7323:7;7312:8;7301:9;7297:24;7279:52;:::i;:::-;7269:62;;7384:2;7373:9;7369:18;7356:32;7340:48;;7413:2;7403:8;7400:16;7397:36;;;7429:1;7426;7419:12;7397:36;7452:52;7496:7;7485:8;7474:9;7470:24;7452:52;:::i;:::-;7442:62;;7557:2;7546:9;7542:18;7529:32;7513:48;;7586:2;7576:8;7573:16;7570:36;;;7602:1;7599;7592:12;7570:36;;7625:52;7669:7;7658:8;7647:9;7643:24;7625:52;:::i;:::-;7615:62;;;7696:36;7727:3;7716:9;7712:19;7696:36;:::i;:::-;7686:46;;7751:36;7782:3;7771:9;7767:19;7751:36;:::i;:::-;7741:46;;6711:1082;;;;;;;;:::o;7798:266::-;7886:6;7881:3;7874:19;7938:6;7931:5;7924:4;7919:3;7915:14;7902:43;-1:-1:-1;7990:1:95;7965:16;;;7983:4;7961:27;;;7954:38;;;;8046:2;8025:15;;;-1:-1:-1;;8021:29:95;8012:39;;;8008:50;;7798:266::o;8069:257::-;8110:3;8148:5;8142:12;8175:6;8170:3;8163:19;8191:63;8247:6;8240:4;8235:3;8231:14;8224:4;8217:5;8213:16;8191:63;:::i;:::-;8308:2;8287:15;-1:-1:-1;;8283:29:95;8274:39;;;;8315:4;8270:50;;8069:257;-1:-1:-1;;8069:257:95:o;8331:274::-;8460:3;8498:6;8492:13;8514:53;8560:6;8555:3;8548:4;8540:6;8536:17;8514:53;:::i;:::-;8583:16;;;;;8331:274;-1:-1:-1;;8331:274:95:o;9127:314::-;-1:-1:-1;;;;;9302:32:95;;9284:51;;9371:2;9366;9351:18;;9344:30;;;-1:-1:-1;;9391:44:95;;9416:18;;9408:6;9391:44;:::i;:::-;9383:52;9127:314;-1:-1:-1;;;;9127:314:95:o;9907:1456::-;10218:3;10207:9;10200:22;10181:4;10245:45;10285:3;10274:9;10270:19;10262:6;10245:45;:::i;:::-;10309:2;10359:9;10351:6;10347:22;10342:2;10331:9;10327:18;10320:50;10390:6;10420;10412;10405:22;10455:2;10447:6;10443:15;10436:22;;10514:2;10504:6;10501:1;10497:14;10489:6;10485:27;10481:36;10540:6;10564:1;10574:674;10588:6;10585:1;10582:13;10574:674;;;10653:19;;;-1:-1:-1;;10649:33:95;10637:46;;10722:20;;10797:14;10793:27;;;-1:-1:-1;;10789:41:95;10765:66;;10755:94;;10845:1;10842;10835:12;10755:94;10875:31;;10933:19;;10979:18;10968:30;;10965:50;;;11011:1;11008;11001:12;10965:50;11063:6;11047:14;11043:27;11035:6;11031:40;11028:60;;;11084:1;11081;11074:12;11028:60;11111:57;11161:6;11153;11148:2;11141:5;11137:14;11111:57;:::i;:::-;11226:12;;;;11101:67;-1:-1:-1;;;11191:15:95;;;;10610:1;10603:9;10574:674;;;-1:-1:-1;;11302:2:95;11287:18;;11280:34;;;;-1:-1:-1;;;;11345:2:95;11330:18;11323:34;11265:6;9907:1456;-1:-1:-1;;;9907:1456:95:o;11798:219::-;11947:2;11936:9;11929:21;11910:4;11967:44;12007:2;11996:9;11992:18;11984:6;11967:44;:::i;12022:381::-;12219:2;12208:9;12201:21;12182:4;12245:44;12285:2;12274:9;12270:18;12262:6;12245:44;:::i;:::-;12337:9;12329:6;12325:22;12320:2;12309:9;12305:18;12298:50;12365:32;12390:6;12382;12365:32;:::i;12408:743::-;12717:3;12706:9;12699:22;12680:4;12744:45;12784:3;12773:9;12769:19;12761:6;12744:45;:::i;:::-;12837:9;12829:6;12825:22;12820:2;12809:9;12805:18;12798:50;12865:32;12890:6;12882;12865:32;:::i;:::-;-1:-1:-1;;;;;12971:15:95;;;12966:2;12951:18;;12944:43;13023:15;;;13018:2;13003:18;;12996:43;-1:-1:-1;;13076:15:95;;;13070:3;13055:19;;13048:44;13129:15;;;12924:3;13108:19;;;13101:44;;;;13023:15;12857:40;-1:-1:-1;;12408:743:95:o;13563:408::-;13765:2;13747:21;;;13804:2;13784:18;;;13777:30;13843:34;13838:2;13823:18;;13816:62;-1:-1:-1;;;13909:2:95;13894:18;;13887:42;13961:3;13946:19;;13563:408::o;13976:::-;14178:2;14160:21;;;14217:2;14197:18;;;14190:30;14256:34;14251:2;14236:18;;14229:62;-1:-1:-1;;;14322:2:95;14307:18;;14300:42;14374:3;14359:19;;13976:408::o;17919:407::-;18121:2;18103:21;;;18160:2;18140:18;;;18133:30;18199:34;18194:2;18179:18;;18172:62;-1:-1:-1;;;18265:2:95;18250:18;;18243:41;18316:3;18301:19;;17919:407::o;18331:275::-;18402:2;18396:9;18467:2;18448:13;;-1:-1:-1;;18444:27:95;18432:40;;18502:18;18487:34;;18523:22;;;18484:62;18481:88;;;18549:18;;:::i;:::-;18585:2;18578:22;18331:275;;-1:-1:-1;18331:275:95:o;18611:183::-;18671:4;18704:18;18696:6;18693:30;18690:56;;;18726:18;;:::i;:::-;-1:-1:-1;18771:1:95;18767:14;18783:4;18763:25;;18611:183::o;18799:186::-;18847:4;18880:18;18872:6;18869:30;18866:56;;;18902:18;;:::i;:::-;-1:-1:-1;18968:2:95;18947:15;-1:-1:-1;;18943:29:95;18974:4;18939:40;;18799:186::o;18990:297::-;19108:12;;19155:4;19144:16;;;19138:23;;19108:12;19173:16;;19170:111;;;19267:1;19263:6;19253;19247:4;19243:17;19240:1;19236:25;19232:38;19225:5;19221:50;19212:59;;19170:111;;18990:297;;;:::o;19292:258::-;19364:1;19374:113;19388:6;19385:1;19382:13;19374:113;;;19464:11;;;19458:18;19445:11;;;19438:39;19410:2;19403:10;19374:113;;;19505:6;19502:1;19499:13;19496:48;;;-1:-1:-1;;19540:1:95;19522:16;;19515:27;19292:258::o;19555:232::-;19594:3;-1:-1:-1;;19615:17:95;;19612:140;;;19674:10;19669:3;19665:20;19662:1;19655:31;19709:4;19706:1;19699:15;19737:4;19734:1;19727:15;19612:140;-1:-1:-1;19779:1:95;19768:13;;19555:232::o;19792:127::-;19853:10;19848:3;19844:20;19841:1;19834:31;19884:4;19881:1;19874:15;19908:4;19905:1;19898:15;19924:127;19985:10;19980:3;19976:20;19973:1;19966:31;20016:4;20013:1;20006:15;20040:4;20037:1;20030:15;20056:131;-1:-1:-1;;;;;20131:31:95;;20121:42;;20111:70;;20177:1;20174;20167:12"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1938800",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "_baalSummoner()": "2327",
        "initialize()": "infinite",
        "owner()": "2364",
        "proxiableUUID()": "infinite",
        "renounceOwnership()": "infinite",
        "setSummonerAddr(address)": "27895",
        "summonBaalFromReferrer(address,address,uint256,bytes,bytes,bytes[])": "infinite",
        "transferOwnership(address)": "infinite",
        "upgradeTo(address)": "infinite",
        "upgradeToAndCall(address,bytes)": "infinite"
      },
      "internal": {
        "_authorizeUpgrade(address)": "infinite",
        "deployTokens(bytes calldata)": "infinite",
        "mintTokens(bytes calldata,address,address)": "infinite"
      }
    },
    "methodIdentifiers": {
      "_baalSummoner()": "14b630f9",
      "initialize()": "8129fc1c",
      "owner()": "8da5cb5b",
      "proxiableUUID()": "52d1902d",
      "renounceOwnership()": "715018a6",
      "setSummonerAddr(address)": "bb6decc8",
      "summonBaalFromReferrer(address,address,uint256,bytes,bytes,bytes[])": "1f1bb0ef",
      "transferOwnership(address)": "f2fde38b",
      "upgradeTo(address)": "3659cfe6",
      "upgradeToAndCall(address,bytes)": "4f1ef286"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lootToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sharesToken\",\"type\":\"address\"}],\"name\":\"DeployBaalTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"summoner\",\"type\":\"address\"}],\"name\":\"setSummoner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_baalSummoner\",\"outputs\":[{\"internalType\":\"contract IBaalSummoner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baalSummoner\",\"type\":\"address\"}],\"name\":\"setSummonerAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarderAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_saltNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initializationMintParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"initializationTokenParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"postInitializationActions\",\"type\":\"bytes[]\"}],\"name\":\"summonBaalFromReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSummonerAddr(address)\":{\"details\":\"Sets the address of the BaalSummoner contract\",\"params\":{\"baalSummoner\":\"The address of the BaalSummoner contract\"}},\"summonBaalFromReferrer(address,address,uint256,bytes,bytes,bytes[])\":{\"details\":\"Summon a new Baal contract with a new set of tokens\",\"params\":{\"_forwarderAddr\":\"The address of the forwarder to be used, 0x0 if not set\",\"_safeAddr\":\"The address of the Gnosis Safe to be used as the treausry, 0x0 if new Safe\",\"_saltNonce\":\"The salt nonce to be used for the Safe contract\",\"initializationMintParams\":\"The parameters for minting the tokens\",\"initializationTokenParams\":\"The parameters for deploying the tokens\",\"postInitializationActions\":\"The actions to be performed after the initialization\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/higherOrderFactories/BaalAdvTokenSummoner.sol\":\"BaalAdvTokenSummoner\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/OwnerManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/EtherPaymentFallback.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/SignatureDecoder.sol\\\";\\nimport \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport \\\"./common/StorageAccessible.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/GnosisSafeMath.sol\\\";\\n\\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract GnosisSafe is\\n    EtherPaymentFallback,\\n    Singleton,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    GuardManager\\n{\\n    using GnosisSafeMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\\n\\n    uint256 public nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\\n    constructor() {\\n        // By setting the threshold it is not possible to call setup anymore,\\n        // so we create a Safe with 0 owners and threshold 1.\\n        // This is an unusable Safe, perfect for the singleton\\n        threshold = 1;\\n    }\\n\\n    /// @dev Setup function sets initial storage of contract.\\n    /// @param _owners List of Safe owners.\\n    /// @param _threshold Number of required confirmations for a Safe transaction.\\n    /// @param to Contract address for optional delegate call.\\n    /// @param data Data payload for optional delegate call.\\n    /// @param fallbackHandler Handler for fallback calls to this contract\\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\\n    /// @param payment Value that should be paid\\n    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\\n    ///      Note: The fees are always transferred, even if the user transaction fails.\\n    /// @param to Destination address of Safe transaction.\\n    /// @param value Ether value of Safe transaction.\\n    /// @param data Data payload of Safe transaction.\\n    /// @param operation Operation type of Safe transaction.\\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n    /// @param gasPrice Gas price that should be used for the payment calculation.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData =\\n                encodeTransactionData(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    nonce\\n                );\\n            // Increase nonce and execute transaction.\\n            nonce++;\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, txHashData, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            require(success || safeTxGas != 0 || gasPrice != 0, \\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            require(receiver.send(payment), \\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            require(transferToken(gasToken, receiver, payment), \\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(\\n        bytes32 dataHash,\\n        bytes memory data,\\n        bytes memory signatures\\n    ) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, data, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(\\n        bytes32 dataHash,\\n        bytes memory data,\\n        bytes memory signatures,\\n        uint256 requiredSignatures\\n    ) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \\\"GS024\\\");\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    /// @dev Allows to estimate a Safe transaction.\\n    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\\n    /// @param to Destination address of Safe transaction.\\n    /// @param value Ether value of Safe transaction.\\n    /// @param data Data payload of Safe transaction.\\n    /// @param operation Operation type of Safe transaction.\\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\\n    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\\n    function requiredTxGas(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (uint256) {\\n        uint256 startGas = gasleft();\\n        // We don't provide an error message here, as we use it to return the estimate\\n        require(execute(to, value, data, operation, gasleft()));\\n        uint256 requiredGas = startGas - gasleft();\\n        // Convert response to string and return via error message\\n        revert(string(abi.encodePacked(requiredGas)));\\n    }\\n\\n    /**\\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\\n     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external {\\n        require(owners[msg.sender] != address(0), \\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    /// @dev Returns the chain id used by this contract.\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n\\n    /// @dev Returns the bytes that are hashed to be signed by owners.\\n    /// @param to Destination address.\\n    /// @param value Ether value.\\n    /// @param data Data payload.\\n    /// @param operation Operation type.\\n    /// @param safeTxGas Gas that should be used for the safe transaction.\\n    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param _nonce Transaction nonce.\\n    /// @return Transaction hash bytes.\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 safeTxHash =\\n            keccak256(\\n                abi.encode(\\n                    SAFE_TX_TYPEHASH,\\n                    to,\\n                    value,\\n                    keccak256(data),\\n                    operation,\\n                    safeTxGas,\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    _nonce\\n                )\\n            );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    /// @dev Returns hash to be signed by owners.\\n    /// @param to Destination address.\\n    /// @param value Ether value.\\n    /// @param data Data payload.\\n    /// @param operation Operation type.\\n    /// @param safeTxGas Fas that should be used for the safe transaction.\\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param _nonce Transaction nonce.\\n    /// @return Transaction hash.\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\",\"keccak256\":\"0x2ca9e3e053c969b9364f62c50c2c25b92525db7fd0bad3ae1fb0c20dd575367c\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/// @title Executor - A contract that can execute transactions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Executor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d3a900673473466bc27413fdbb11aae60b5580b792c49411f01544e0b24fe08\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    function internalSetFallbackHandler(address handler) internal {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /// @dev Allows to add a contract to handle fallback calls.\\n    ///      Only fallback calls without value and with data will be forwarded.\\n    ///      This can only be done via a Safe transaction.\\n    /// @param handler contract to handle fallbacks calls.\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1be9f0f3e80a78134c2e3a026c6a14759785bd35d135e87a4a025aeb6742791f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\ninterface Guard {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address guard);\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address guard) external authorized {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53a532a31f9632d5a73ad0df56f05bd2b66a2f781f571eb48d00367d370707f9\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0))\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \\\"GS000\\\");\\n    }\\n\\n    /// @dev Allows to add a module to the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Enables the module `module` for the Safe.\\n    /// @param module Module to be whitelisted.\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /// @dev Allows to remove a module from the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Disables the module `module` for the Safe.\\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, gasleft());\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        address currentModule = modules[start];\\n        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = currentModule;\\n            currentModule = modules[currentModule];\\n            moduleCount++;\\n        }\\n        next = currentModule;\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5512760a0328309f82a71cbe2ac14e0942501b9d44d5fb417bd02174546672e5\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address owner);\\n    event RemovedOwner(address owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /// @dev Setup function sets initial storage of contract.\\n    /// @param _owners List of Safe owners.\\n    /// @param _threshold Number of required confirmations for a Safe transaction.\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n    /// @param owner New owner address.\\n    /// @param _threshold New threshold.\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n    /// @param owner Owner address to be removed.\\n    /// @param _threshold New threshold.\\n    function removeOwner(\\n        address prevOwner,\\n        address owner,\\n        uint256 _threshold\\n    ) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n    /// @param oldOwner Owner address to be replaced.\\n    /// @param newOwner New owner address.\\n    function swapOwner(\\n        address prevOwner,\\n        address oldOwner,\\n        address newOwner\\n    ) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /// @dev Allows to update the number of required confirmations by Safe owners.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Changes the threshold of the Safe to `_threshold`.\\n    /// @param _threshold New threshold.\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x01a3d64cc0967f42ae63802409f5404d18352516ea2a6335005003d919ffcf12\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract EtherPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /// @dev Fallback function accepts Ether transactions.\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1a7928d29877da84a3d0df846d5cd933d48ee095c1bde0aa044e249b12e27a72\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SecuredTokenTransfer - Secure token transfer\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SecuredTokenTransfer {\\n    /// @dev Transfers a token and returns if it was a success\\n    /// @param token Token that should be transferred\\n    /// @param receiver Receiver to whom the token should be transferred\\n    /// @param amount The amount of tokens that should be transferred\\n    function transferToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n                case 0 {\\n                    transferred := success\\n                }\\n                case 0x20 {\\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\\n                }\\n                default {\\n                    transferred := 0\\n                }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x178682d8477da42936c7e8e24d39094c4ac08ecd8623794b9535d77001b665f1\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x59d36efca578b75541a776f62a0d0ef03712fc27b6647c3915c14b572106d7bc\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SignatureDecoder {\\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\\n    /// @notice Make sure to peform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\\n    /// @param signatures concatenated rsv signatures\\n    function signatureSplit(bytes memory signatures, uint256 pos)\\n        internal\\n        pure\\n        returns (\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        )\\n    {\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            // Here we are loading the last 32 bytes, including 31 bytes\\n            // of 's'. There is no 'mload8' to do this.\\n            //\\n            // 'byte' is not working due to the Solidity parser, so lets\\n            // use the second best option, 'and'\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d37be182472ccfee62a33e9939f9b3d509be4c32e9fdebc2c1746c573655987\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\\n///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract Singleton {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0x6e02c18998de8834dd7d69890cb6ede996b6f635d2337081a596d91e35e2c648\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\\n/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\ncontract StorageAccessible {\\n    /**\\n     * @dev Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36853adb266c2ab7d3c612aca799441a86bd15d9e1d24fc6c70d63f5c2df3aaf\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title GnosisSafeMath\\n * @dev Math operations with safety checks that revert on error\\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\\n * TODO: remove once open zeppelin update to solc 0.5.0\\n */\\nlibrary GnosisSafeMath {\\n    /**\\n     * @dev Multiplies two numbers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x2a2b4d74f5834a9437be0cd3254d7a676698fc78aa47941c2009470196998d98\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5b6e9bf17f28738ce88e751f420b0559f5151ba7bec2ff3c7bb31e42673d6801\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\\n/// @author Richard Meissner - <richard@gnosis.io>\\ninterface IProxy {\\n    function masterCopy() external view returns (address);\\n}\\n\\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract GnosisSafeProxy {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\\n    address internal singleton;\\n\\n    /// @dev Constructor function sets address of singleton contract.\\n    /// @param _singleton Singleton address.\\n    constructor(address _singleton) {\\n        require(_singleton != address(0), \\\"Invalid singleton address provided\\\");\\n        singleton = _singleton;\\n    }\\n\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\n    fallback() external payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\\n            // 0xa619486e == keccak(\\\"masterCopy()\\\"). The value is right padded to 32-bytes with 0s\\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\\n                mstore(0, _singleton)\\n                return(0, 0x20)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if eq(success, 0) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3bfdd453d9f896f7029d15bcafd11886957b320ad1764309d9f74fa059715249\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./GnosisSafeProxy.sol\\\";\\nimport \\\"./IProxyCreationCallback.sol\\\";\\n\\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n/// @author Stefan George - <stefan@gnosis.pm>\\ncontract GnosisSafeProxyFactory {\\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\\n\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\\n        proxy = new GnosisSafeProxy(singleton);\\n        if (data.length > 0)\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\\n                    revert(0, 0)\\n                }\\n            }\\n        emit ProxyCreation(proxy, singleton);\\n    }\\n\\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\\n    function proxyRuntimeCode() public pure returns (bytes memory) {\\n        return type(GnosisSafeProxy).runtimeCode;\\n    }\\n\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\n    function proxyCreationCode() public pure returns (bytes memory) {\\n        return type(GnosisSafeProxy).creationCode;\\n    }\\n\\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\\n    ///      This method is only meant as an utility to be called from other methods\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function deployProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) internal returns (GnosisSafeProxy proxy) {\\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n    }\\n\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function createProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) public returns (GnosisSafeProxy proxy) {\\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\\n        if (initializer.length > 0)\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\\n                    revert(0, 0)\\n                }\\n            }\\n        emit ProxyCreation(proxy, _singleton);\\n    }\\n\\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\\n    function createProxyWithCallback(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce,\\n        IProxyCreationCallback callback\\n    ) public returns (GnosisSafeProxy proxy) {\\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\\n    }\\n\\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function calculateCreateProxyWithNonceAddress(\\n        address _singleton,\\n        bytes calldata initializer,\\n        uint256 saltNonce\\n    ) external returns (GnosisSafeProxy proxy) {\\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\\n        revert(string(abi.encodePacked(proxy)));\\n    }\\n}\\n\",\"keccak256\":\"0x187c6f84c71b432da6721c1b81cebfbb9c37c0cc15ebd8de5a14ff7ec6db2d9e\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"./GnosisSafeProxy.sol\\\";\\n\\ninterface IProxyCreationCallback {\\n    function proxyCreated(\\n        GnosisSafeProxy proxy,\\n        address _singleton,\\n        bytes calldata initializer,\\n        uint256 saltNonce\\n    ) external;\\n}\\n\",\"keccak256\":\"0x51a9ce914a6a943651c803541e44218a7ed0a2f98a94d55df66b173b5a11e365\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/core/Module.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Module Interface - A contract that can pass messages to a Module Manager contract if enabled by that contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../interfaces/IAvatar.sol\\\";\\nimport \\\"../factory/FactoryFriendly.sol\\\";\\nimport \\\"../guard/Guardable.sol\\\";\\n\\nabstract contract Module is FactoryFriendly, Guardable {\\n    /// @dev Address that will ultimately execute function calls.\\n    address public avatar;\\n    /// @dev Address that this module will pass transactions to.\\n    address public target;\\n\\n    /// @dev Emitted each time the avatar is set.\\n    event AvatarSet(address indexed previousAvatar, address indexed newAvatar);\\n    /// @dev Emitted each time the Target is set.\\n    event TargetSet(address indexed previousTarget, address indexed newTarget);\\n\\n    /// @dev Sets the avatar to a new avatar (`newAvatar`).\\n    /// @notice Can only be called by the current owner.\\n    function setAvatar(address _avatar) public onlyOwner {\\n        address previousAvatar = avatar;\\n        avatar = _avatar;\\n        emit AvatarSet(previousAvatar, _avatar);\\n    }\\n\\n    /// @dev Sets the target to a new target (`newTarget`).\\n    /// @notice Can only be called by the current owner.\\n    function setTarget(address _target) public onlyOwner {\\n        address previousTarget = target;\\n        target = _target;\\n        emit TargetSet(previousTarget, _target);\\n    }\\n\\n    /// @dev Passes a transaction to be executed by the avatar.\\n    /// @notice Can only be called by this contract.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function exec(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (bool success) {\\n        (success, ) = _exec(to, value, data, operation);\\n    }\\n\\n    /// @dev Passes a transaction to be executed by the target and returns data.\\n    /// @notice Can only be called by this contract.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execAndReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (bool success, bytes memory returnData) {\\n        (success, returnData) = _exec(to, value, data, operation);\\n    }\\n\\n    function _exec(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) private returns (bool success, bytes memory returnData) {\\n        address currentGuard = guard;\\n        if (currentGuard != address(0)) {\\n            IGuard(currentGuard).checkTransaction(\\n                /// Transaction info used by module transactions.\\n                to,\\n                value,\\n                data,\\n                operation,\\n                /// Zero out the redundant transaction information only used for Safe multisig transctions.\\n                0,\\n                0,\\n                0,\\n                address(0),\\n                payable(0),\\n                \\\"\\\",\\n                msg.sender\\n            );\\n            (success, returnData) = IAvatar(target)\\n                .execTransactionFromModuleReturnData(\\n                    to,\\n                    value,\\n                    data,\\n                    operation\\n                );\\n            IGuard(currentGuard).checkAfterExecution(\\\"\\\", success);\\n        } else {\\n            (success, returnData) = IAvatar(target)\\n                .execTransactionFromModuleReturnData(\\n                    to,\\n                    value,\\n                    data,\\n                    operation\\n                );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13da818c34bb4be89081b6155ab9787080a61b7123dc086cfd29f9ea8f50f880\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\",\"keccak256\":\"0x96e61585b7340a901a54eb4c157ce28b630bff3d9d4597dfaac692128ea458c4\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ncontract ModuleProxyFactory {\\n    event ModuleProxyCreation(\\n        address indexed proxy,\\n        address indexed masterCopy\\n    );\\n\\n    /// `target` can not be zero.\\n    error ZeroAddress(address target);\\n\\n    /// `target` has no code deployed.\\n    error TargetHasNoCode(address target);\\n\\n    /// `address_` is already taken.\\n    error TakenAddress(address address_);\\n\\n    /// @notice Initialization failed.\\n    error FailedInitialization();\\n\\n    function createProxy(address target, bytes32 salt)\\n        internal\\n        returns (address result)\\n    {\\n        if (address(target) == address(0)) revert ZeroAddress(target);\\n        if (address(target).code.length == 0) revert TargetHasNoCode(target);\\n        bytes memory deployment = abi.encodePacked(\\n            hex\\\"602d8060093d393df3363d3d373d3d3d363d73\\\",\\n            target,\\n            hex\\\"5af43d82803e903d91602b57fd5bf3\\\"\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := create2(0, add(deployment, 0x20), mload(deployment), salt)\\n        }\\n        if (result == address(0)) revert TakenAddress(result);\\n    }\\n\\n    function deployModule(\\n        address masterCopy,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) public returns (address proxy) {\\n        proxy = createProxy(\\n            masterCopy,\\n            keccak256(abi.encodePacked(keccak256(initializer), saltNonce))\\n        );\\n        (bool success, ) = proxy.call(initializer);\\n        if (!success) revert FailedInitialization();\\n\\n        emit ModuleProxyCreation(proxy, masterCopy);\\n    }\\n}\\n\",\"keccak256\":\"0x40a3eb64fec76f1f77656a77b4c469b299f2d8b0523ed0f207d3879455c06a70\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IGuard.sol\\\";\\n\\nabstract contract BaseGuard is IERC165 {\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IGuard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n\\n    /// @dev Module transactions only use the first four parameters: to, value, data, and operation.\\n    /// Module.sol hardcodes the remaining parameters as 0 since they are not used for module transactions.\\n    /// @notice This interface is used to maintain compatibilty with Gnosis Safe transaction guards.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external virtual;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external virtual;\\n}\\n\",\"keccak256\":\"0xa825848d06a1fc3cb7ad86727c669c8fc6b3bd8dbe419a617830ddcd5e245e47\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/guard/Guardable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./BaseGuard.sol\\\";\\n\\n/// @title Guardable - A contract that manages fallback calls made to this contract\\ncontract Guardable is OwnableUpgradeable {\\n    address public guard;\\n\\n    event ChangedGuard(address guard);\\n\\n    /// `guard_` does not implement IERC165.\\n    error NotIERC165Compliant(address guard_);\\n\\n    /// @dev Set a guard that checks transactions before execution.\\n    /// @param _guard The address of the guard to be used or the 0 address to disable the guard.\\n    function setGuard(address _guard) external onlyOwner {\\n        if (_guard != address(0)) {\\n            if (!BaseGuard(_guard).supportsInterface(type(IGuard).interfaceId))\\n                revert NotIERC165Compliant(_guard);\\n        }\\n        guard = _guard;\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() external view returns (address _guard) {\\n        return guard;\\n    }\\n}\\n\",\"keccak256\":\"0xebdcfbe7f0822d8afcc21a1ca8d809417b438cc8b27c3547190a1627a9f5110f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IAvatar {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /// @dev Enables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Modules should be stored as a linked list.\\n    /// @notice Must emit EnabledModule(address module) if successful.\\n    /// @param module Module to be enabled.\\n    function enableModule(address module) external;\\n\\n    /// @dev Disables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Must emit DisabledModule(address module) if successful.\\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) external;\\n\\n    /// @dev Allows a Module to execute a transaction.\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Allows a Module to execute a transaction and return data\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0xcd5508ffe596eef8fbccfd5fc4f10a34397773547ce64e212d48b5212865ec1f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IGuard {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\",\"keccak256\":\"0xd0d855accbc5fba81c67ab22cdbb03325a8a4d7f6b7e981d1ff0fec3178e464d\",\"license\":\"LGPL-3.0-only\"},\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x31a2e227f5653e4b31e0f680857b8842073d083b33df11b3f3b3bb5ddc10526e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Baal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588   \\u2588\\u2588   \\u2588\\u2588   \\u2588\\n\\u2588  \\u2588  \\u2588 \\u2588  \\u2588 \\u2588  \\u2588\\n\\u2588 \\u2580 \\u2584 \\u2588\\u2584\\u2584\\u2588 \\u2588\\u2584\\u2584\\u2588 \\u2588\\n\\u2588  \\u2584\\u2580 \\u2588  \\u2588 \\u2588  \\u2588 \\u2588\\u2588\\u2588\\u2584\\n\\u2588\\u2588\\u2588      \\u2588    \\u2588     \\u2580\\n        \\u2588    \\u2588\\n       \\u2580    \\u2580*/\\npragma solidity ^0.8.7;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/base/Executor.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\\\";\\nimport \\\"@gnosis.pm/zodiac/contracts/core/Module.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IBaalToken.sol\\\";\\n\\n/// @title Baal ';_;'.\\n/// @notice Flexible guild contract inspired by Moloch DAO framework.\\ncontract Baal is Module, EIP712Upgradeable, ReentrancyGuardUpgradeable, BaseRelayRecipient {\\n    using ECDSAUpgradeable for bytes32;\\n\\n    // ERC20 SHARES + LOOT\\n\\n    IBaalToken public lootToken; /*Sub ERC20 for loot mgmt*/\\n    IBaalToken public sharesToken; /*Sub ERC20 for loot mgmt*/\\n\\n    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; /*ETH reference for redemptions*/\\n\\n    // GOVERNANCE PARAMS\\n    uint32 public votingPeriod; /* voting period in seconds - amendable through 'period'[2] proposal*/\\n    uint32 public gracePeriod; /*time delay after proposal voting period for processing*/\\n    uint32 public proposalCount; /*counter for total `proposals` submitted*/\\n    uint256 public proposalOffering; /* non-member proposal offering*/\\n    uint256 public quorumPercent; /* minimum % of shares that must vote yes for it to pass*/\\n    uint256 public sponsorThreshold; /* minimum number of shares to sponsor a proposal (not %)*/\\n    uint256 public minRetentionPercent; /* auto-fails a proposal if more than (1- minRetentionPercent) * total shares exit before processing*/\\n\\n    // SHAMAN PERMISSIONS\\n    bool public adminLock; /* once set to true, no new admin roles can be assigned to shaman */\\n    bool public managerLock; /* once set to true, no new manager roles can be assigned to shaman */\\n    bool public governorLock; /* once set to true, no new governor roles can be assigned to shaman */\\n    mapping(address => uint256) public shamans; /*maps shaman addresses to their permission level*/\\n    /* permissions registry for shamans\\n    0 = no permission\\n    1 = admin only\\n    2 = manager only\\n    4 = governance only\\n    3 = admin + manager\\n    5 = admin + governance\\n    6 = manager + governance\\n    7 = admin + manager + governance */\\n\\n    // PROPOSAL TRACKING\\n    mapping(address => mapping(uint32 => bool)) public memberVoted; /*maps members to their proposal votes (true = voted) */\\n    mapping(address => uint256) public votingNonces; /*maps members to their voting nonce*/\\n    mapping(uint256 => Proposal) public proposals; /*maps `proposal id` to struct details*/\\n\\n    // MISCELLANEOUS PARAMS\\n    uint32 public latestSponsoredProposalId; /* the id of the last proposal to be sponsored */\\n    address public multisendLibrary; /*address of multisend library*/\\n    string public override versionRecipient; /* version recipient for OpenGSN */\\n\\n    // SIGNATURE HELPERS\\n    bytes32 constant VOTE_TYPEHASH = keccak256(\\\"Vote(string name,address voter,uint256 expiry,uint256 nonce,uint32 proposalId,bool support)\\\");\\n\\n    // DATA STRUCTURES\\n    struct Proposal {\\n        /*Baal proposal details*/\\n        uint32 id; /*id of this proposal, used in existence checks (increments from 1)*/\\n        uint32 prevProposalId; /* id of the previous proposal - set at sponsorship from latestSponsoredProposalId */\\n        uint32 votingStarts; /*starting time for proposal in seconds since unix epoch*/\\n        uint32 votingEnds; /*termination date for proposal in seconds since unix epoch - derived from `votingPeriod` set on proposal*/\\n        uint32 graceEnds; /*termination date for proposal in seconds since unix epoch - derived from `gracePeriod` set on proposal*/\\n        uint32 expiration; /*timestamp after which proposal should be considered invalid and skipped. */\\n        uint256 baalGas; /* gas needed to process proposal */\\n        uint256 yesVotes; /*counter for `members` `approved` 'votes' to calculate approval on processing*/\\n        uint256 noVotes; /*counter for `members` 'dis-approved' 'votes' to calculate approval on processing*/\\n        uint256 maxTotalSharesAndLootAtVote; /* highest share+loot count during any individual yes vote*/\\n        uint256 maxTotalSharesAtSponsor; /* highest share+loot count during any individual yes vote*/\\n        bool[4] status; /* [cancelled, processed, passed, actionFailed] */\\n        address sponsor; /* address of the sponsor - set at sponsor proposal - relevant for cancellation */\\n        bytes32 proposalDataHash; /*hash of raw data associated with state updates*/\\n    }\\n\\n    /* Unborn -> Submitted -> Voting -> Grace -> Ready -> Processed\\n                              \\\\-> Cancelled  \\\\-> Defeated   */\\n    enum ProposalState {\\n        Unborn, /* 0 - can submit */\\n        Submitted, /* 1 - can sponsor -> voting */\\n        Voting, /* 2 - can be cancelled, otherwise proceeds to grace */\\n        Cancelled, /* 3 - terminal state, counts as processed */\\n        Grace, /* 4 - proceeds to ready/defeated */\\n        Ready, /* 5 - can be processed */\\n        Processed, /* 6 - terminal state */\\n        Defeated /* 7 - terminal state, yes votes <= no votes, counts as processed */\\n    }\\n\\n    // MODIFIERS\\n\\n    modifier baalOnly() {\\n        require(_msgSender() == avatar, \\\"!baal\\\");\\n        _;\\n    }\\n\\n    modifier baalOrAdminOnly() {\\n        require(_msgSender() == avatar || isAdmin(_msgSender()), \\\"!baal & !admin\\\"); /*check `shaman` is admin*/\\n        _;\\n    }\\n\\n    modifier baalOrManagerOnly() {\\n        require(\\n            _msgSender() == avatar || isManager(_msgSender()),\\n            \\\"!baal & !manager\\\"\\n        ); /*check `shaman` is manager*/\\n        _;\\n    }\\n\\n    modifier baalOrGovernorOnly() {\\n        require(\\n            _msgSender() == avatar || isGovernor(_msgSender()),\\n            \\\"!baal & !governor\\\"\\n        ); /*check `shaman` is governor*/\\n        _;\\n    }\\n\\n    // EVENTS\\n    event SetupComplete(\\n        bool lootPaused,\\n        bool sharesPaused,\\n        uint32 gracePeriod,\\n        uint32 votingPeriod,\\n        uint256 proposalOffering,\\n        uint256 quorumPercent,\\n        uint256 sponsorThreshold,\\n        uint256 minRetentionPercent,\\n        string name,\\n        string symbol,\\n        uint256 totalShares,\\n        uint256 totalLoot\\n    ); /*emits after Baal summoning*/\\n    event SubmitProposal(\\n        uint256 indexed proposal,\\n        bytes32 indexed proposalDataHash,\\n        uint256 votingPeriod,\\n        bytes proposalData,\\n        uint256 expiration,\\n        uint256 baalGas,\\n        bool selfSponsor,\\n        uint256 timestamp,\\n        string details\\n    ); /*emits after proposal is submitted*/\\n    event SponsorProposal(\\n        address indexed member,\\n        uint256 indexed proposal,\\n        uint256 indexed votingStarts\\n    ); /*emits after member has sponsored proposal*/\\n    event CancelProposal(uint256 indexed proposal); /*emits when proposal is cancelled*/\\n    event SubmitVote(\\n        address indexed member,\\n        uint256 balance,\\n        uint256 indexed proposal,\\n        bool indexed approved\\n    ); /*emits after vote is submitted on proposal*/\\n    event ProcessProposal(\\n        uint256 indexed proposal,\\n        bool passed,\\n        bool actionFailed\\n    ); /*emits when proposal is processed & executed*/\\n    event Ragequit(\\n        address indexed member,\\n        address to,\\n        uint256 indexed lootToBurn,\\n        uint256 indexed sharesToBurn,\\n        address[] tokens\\n    ); /*emits when users burn Baal `shares` and/or `loot` for given `to` account*/\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    ); /*emits when Baal `shares` are approved for pulls with erc20 accounting*/\\n\\n    event ShamanSet(address indexed shaman, uint256 permission); /*emits when a shaman permission changes*/\\n    event SetTrustedForwarder(address indexed forwarder); /*emits when a trusted forwarder changes*/\\n    event GovernanceConfigSet(\\n        uint32 voting,\\n        uint32 grace,\\n        uint256 newOffering,\\n        uint256 quorum,\\n        uint256 sponsor,\\n        uint256 minRetention\\n    ); /*emits when gov config changes*/\\n    event SharesPaused(bool paused); /*emits when shares are paused or unpaused*/\\n    event LootPaused(bool paused); /*emits when loot is paused or unpaused*/\\n    event LockAdmin(bool adminLock); /*emits when admin is locked*/\\n    event LockManager(bool managerLock); /*emits when admin is locked*/\\n    event LockGovernor(bool governorLock); /*emits when admin is locked*/\\n\\n    function encodeMultisend(bytes[] memory _calls, address _target)\\n        external\\n        pure\\n        returns (bytes memory encodedMultisend)\\n    {\\n        bytes memory encodedActions;\\n        for (uint256 i = 0; i < _calls.length; i++) {\\n            encodedActions = abi.encodePacked(\\n                encodedActions,\\n                uint8(0),\\n                _target,\\n                uint256(0),\\n                uint256(_calls[i].length),\\n                bytes(_calls[i])\\n            );\\n        }\\n        encodedMultisend = abi.encodeWithSignature(\\n            \\\"multiSend(bytes)\\\",\\n            encodedActions\\n        );\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Summon Baal with voting configuration & initial array of `members` accounts with `shares` & `loot` weights.\\n    /// @param _initializationParams Encoded setup information.\\n    function setUp(bytes memory _initializationParams)\\n        public\\n        override(FactoryFriendly)\\n        initializer\\n        nonReentrant\\n    {\\n        (\\n            address _lootToken, /*loot ERC20 token*/\\n            address _sharesToken, /*shares ERC20 token*/\\n            address _multisendLibrary, /*address of multisend library*/\\n            address _avatar, /*Safe contract address*/\\n            address _forwarder, /*Trusted forwarder address for meta-transactions (EIP 2771)*/\\n            bytes memory _initializationMultisendData /*here you call BaalOnly functions to set up initial shares, loot, shamans, periods, etc.*/\\n        ) = abi.decode(\\n                _initializationParams,\\n                (address, address, address, address, address, bytes)\\n            );\\n\\n        require(\\n                _multisendLibrary != address(0) &&\\n                _avatar != address(0),\\n            \\\"0 addr used\\\"\\n        );\\n        // no need to check _forwarder address exists, the default is address(0) for no forwarder\\n\\n        versionRecipient = \\\"2.2.5+opengsn.payablewithbaal.irelayrecipient\\\";\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __EIP712_init(\\\"Vote\\\", \\\"4\\\");\\n        transferOwnership(_avatar);\\n\\n        // Set the Gnosis safe address\\n        avatar = _avatar;\\n        target = _avatar; /*Set target to same address as avatar on setup - can be changed later via setTarget, though probably not a good idea*/\\n\\n        // Set trusted forwarder\\n        _setTrustedForwarder(_forwarder);\\n\\n        lootToken = IBaalToken(_lootToken);\\n        sharesToken = IBaalToken(_sharesToken);\\n\\n        /*Set address of Gnosis multisend library to use for all execution*/\\n        multisendLibrary = _multisendLibrary;\\n\\n        // Execute all setups including but not limited to\\n        // * mint shares\\n        // * convert shares to loot\\n        // * set shamans\\n        // * set admin configurations\\n        require(\\n            exec(\\n                multisendLibrary,\\n                0,\\n                _initializationMultisendData,\\n                Enum.Operation.DelegateCall\\n            ),\\n            \\\"call failure setup\\\"\\n        );\\n\\n        emit SetupComplete(\\n            lootToken.paused(),\\n            sharesToken.paused(),\\n            gracePeriod,\\n            votingPeriod,\\n            proposalOffering,\\n            quorumPercent,\\n            sponsorThreshold,\\n            minRetentionPercent,\\n            sharesToken.name(),\\n            sharesToken.symbol(),\\n            totalShares(),\\n            totalLoot()\\n        );\\n\\n    }\\n\\n    /*****************\\n    PROPOSAL FUNCTIONS\\n    *****************/\\n    /// @notice Submit proposal to Baal `members` for approval within given voting period.\\n    /// @param proposalData Multisend encoded transactions or proposal data\\n    /// @param details Context for proposal.\\n    /// @return proposal Count for submitted proposal.\\n    function submitProposal(\\n        bytes calldata proposalData,\\n        uint32 expiration,\\n        uint256 baalGas,\\n        string calldata details\\n    ) external payable nonReentrant returns (uint256) {\\n        require(\\n            expiration == 0 ||\\n                expiration > block.timestamp + votingPeriod + gracePeriod,\\n            \\\"expired\\\"\\n        );\\n        require(baalGas <= 20000000, \\\"baalGas to high\\\"); /* gwei 2/3 eth block limit */\\n\\n        bool selfSponsor = false; /*plant sponsor flag*/\\n        if (sharesToken.getVotes(_msgSender()) >= sponsorThreshold ) {\\n            selfSponsor = true; /*if above sponsor threshold, self-sponsor*/\\n        } else {\\n            require(msg.value == proposalOffering, \\\"Baal requires an offering\\\"); /*Optional anti-spam gas token tribute*/\\n            (bool _success, ) = target.call{value: msg.value}(\\\"\\\"); /*Send ETH to sink*/\\n            require(_success, \\\"could not send\\\");\\n        }\\n\\n        bytes32 proposalDataHash = hashOperation(proposalData); /*Store only hash of proposal data*/\\n\\n        proposalCount++; /*increment proposal counter*/\\n        proposals[proposalCount] = Proposal( /*push params into proposal struct - start voting period timer if member submission*/\\n            proposalCount,\\n            selfSponsor ? latestSponsoredProposalId : 0, /* prevProposalId */\\n            selfSponsor ? uint32(block.timestamp) : 0, /* votingStarts */\\n            selfSponsor ? uint32(block.timestamp) + votingPeriod : 0, /* votingEnds */\\n            selfSponsor\\n                ? uint32(block.timestamp) + votingPeriod + gracePeriod\\n                : 0, /* graceEnds */\\n            expiration,\\n            baalGas,\\n            0, /* yes votes */\\n            0, /* no votes */\\n            selfSponsor ? totalSupply() : 0, /* maxTotalSharesAndLootAtVote */\\n            selfSponsor ? totalShares() : 0, /* maxTotalSharesAtSponsor */\\n            [false, false, false, false], /* [cancelled, processed, passed, actionFailed] */\\n            selfSponsor ? _msgSender() : address(0),\\n            proposalDataHash\\n        );\\n\\n        if (selfSponsor) {\\n            latestSponsoredProposalId = proposalCount;\\n        }\\n\\n        emit SubmitProposal(\\n            proposalCount,\\n            proposalDataHash,\\n            votingPeriod,\\n            proposalData,\\n            expiration,\\n            baalGas,\\n            selfSponsor,\\n            block.timestamp,\\n            details\\n        ); /*emit event reflecting proposal submission*/\\n\\n        return proposalCount;\\n    }\\n\\n    /// @notice Sponsor proposal to Baal `members` for approval within voting period.\\n    /// @param id Number of proposal in `proposals` mapping to sponsor.\\n    function sponsorProposal(uint32 id) external nonReentrant {\\n        Proposal storage prop = proposals[id]; /*alias proposal storage pointers*/\\n\\n        require(sharesToken.getVotes(_msgSender()) >= sponsorThreshold, \\\"!sponsor\\\"); /*check 'votes > threshold - required to sponsor proposal*/\\n        require(state(id) == ProposalState.Submitted, \\\"!submitted\\\");\\n        require(\\n            prop.expiration == 0 ||\\n                prop.expiration > block.timestamp + votingPeriod + gracePeriod,\\n            \\\"expired\\\"\\n        );\\n\\n        prop.votingStarts = uint32(block.timestamp);\\n\\n        unchecked {\\n            prop.votingEnds = uint32(block.timestamp) + votingPeriod;\\n            prop.graceEnds =\\n                uint32(block.timestamp) +\\n                votingPeriod +\\n                gracePeriod;\\n        }\\n\\n        prop.prevProposalId = latestSponsoredProposalId;\\n        prop.sponsor = _msgSender();\\n        // snapshot both total supply and total shares\\n        prop.maxTotalSharesAndLootAtVote = totalSupply(); // updaed in votes for min retention\\n        prop.maxTotalSharesAtSponsor = totalShares(); // for yes vote quorum\\n        latestSponsoredProposalId = id;\\n\\n        emit SponsorProposal(_msgSender(), id, block.timestamp);\\n    }\\n\\n    /// @notice Submit vote - proposal must exist & voting period must not have ended.\\n    /// @param id Number of proposal in `proposals` mapping to cast vote on.\\n    /// @param approved If 'true', member will cast `yesVotes` onto proposal - if 'false', `noVotes` will be counted.\\n    function submitVote(uint32 id, bool approved) external nonReentrant {\\n        _submitVote(_msgSender(), id, approved);\\n    }\\n\\n    /// @notice Submit vote with EIP-712 signature - proposal must exist & voting period must not have ended.\\n    /// @param voter Address of member who submitted vote.\\n    /// @param expiry Expiration of signature.\\n    /// @param id Number of proposal in `proposals` mapping to cast vote on.\\n    /// @param approved If 'true', member will cast `yesVotes` onto proposal - if 'false', `noVotes` will be counted.\\n    /// @param v v in signature\\n    /// @param r r in signature\\n    /// @param s s in signature\\n    function submitVoteWithSig(\\n        address voter,\\n        uint256 expiry,\\n        uint256 nonce,\\n        uint32 id,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        require(nonce == votingNonces[voter], \\\"!nonce\\\");\\n\\n        /*calculate EIP-712 struct hash*/\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                VOTE_TYPEHASH,\\n                keccak256(abi.encodePacked(sharesToken.name())),\\n                voter,\\n                expiry,\\n                nonce,\\n                id,\\n                approved\\n            )\\n        );\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n\\n        require(signer == voter, \\\"invalid signature\\\");\\n        require(signer != address(0), \\\"!signer\\\");\\n        votingNonces[voter] += 1;\\n\\n        _submitVote(signer, id, approved);\\n    }\\n\\n    /// @notice Execute vote submission internally - callable by submit vote or submit vote with signature\\n    /// @param voter Address of voter\\n    /// @param id Number of proposal in `proposals` mapping to cast vote on.\\n    /// @param approved If 'true', member will cast `yesVotes` onto proposal - if 'false', `noVotes` will be counted.\\n    function _submitVote(\\n        address voter,\\n        uint32 id,\\n        bool approved\\n    ) internal {\\n        Proposal storage prop = proposals[id]; /*alias proposal storage pointers*/\\n        require(state(id) == ProposalState.Voting, \\\"!voting\\\");\\n\\n        uint256 balance = sharesToken.getPastVotes(voter, prop.votingStarts); /*fetch & gas-optimize voting weight at proposal creation time*/\\n\\n        require(balance > 0, \\\"!member\\\"); /* check that user has shares*/\\n        require(!memberVoted[voter][id], \\\"voted\\\"); /*check vote not already cast*/\\n\\n        memberVoted[voter][id] = true; /*record voting action to `members` struct per user account*/\\n\\n        // get high water mark on all votes\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply > prop.maxTotalSharesAndLootAtVote) {\\n            prop.maxTotalSharesAndLootAtVote = _totalSupply;\\n        }\\n\\n        unchecked {\\n            if (approved) {\\n                /*if `approved`, cast delegated balance `yesVotes` to proposal*/\\n                prop.yesVotes += balance;    \\n            } else {\\n                /*otherwise, cast delegated balance `noVotes` to proposal*/\\n                prop.noVotes += balance;\\n            }\\n        }\\n\\n        emit SubmitVote(voter, balance, id, approved); /*emit event reflecting vote*/\\n    }\\n\\n    /// @notice Process `proposal` & execute internal functions.\\n    /// @dev Proposal must have succeeded, not been processed, not expired, retention threshold must be met\\n    /// @param id Number of proposal in `proposals` mapping to process for execution.\\n    /// @param proposalData Packed multisend data to execute via Gnosis multisend library\\n    function processProposal(uint32 id, bytes calldata proposalData)\\n        external\\n        nonReentrant\\n    {\\n        Proposal storage prop = proposals[id]; /*alias `proposal` storage pointers*/\\n\\n        require(prop.sponsor != address(0), \\\"!sponsor\\\"); /*check proposal has been sponsored*/\\n        require(state(id) == ProposalState.Ready, \\\"!ready\\\"); /* check proposal is Ready to process */\\n\\n        ProposalState prevProposalState = state(prop.prevProposalId);\\n        require(\\n            prevProposalState == ProposalState.Processed ||\\n                prevProposalState == ProposalState.Cancelled ||\\n                prevProposalState == ProposalState.Defeated ||\\n                prevProposalState == ProposalState.Unborn,\\n            \\\"prev!processed\\\"\\n        );\\n\\n        // check that the proposalData matches the stored hash\\n        require(\\n            hashOperation(proposalData) == prop.proposalDataHash,\\n            \\\"incorrect calldata\\\"\\n        );\\n\\n        require(\\n            prop.baalGas == 0 || gasleft() >= prop.baalGas,\\n            \\\"not enough gas\\\"\\n        );\\n\\n        prop.status[1] = true; /*Set processed flag to true*/\\n        bool okToExecute = true; /*Initialize and invalidate if conditions are not met below*/\\n\\n        // Make proposal fail if after expiration\\n        if (prop.expiration != 0 && prop.expiration < block.timestamp)\\n            okToExecute = false;\\n\\n        // Make proposal fail if it didn't pass quorum\\n        if (okToExecute && prop.yesVotes * 100 < quorumPercent * prop.maxTotalSharesAtSponsor)\\n            okToExecute = false;\\n\\n        // Make proposal fail if the minRetentionPercent is exceeded\\n        if (\\n            okToExecute &&\\n            (totalSupply()) <\\n            (prop.maxTotalSharesAndLootAtVote * minRetentionPercent) / 100 /*Check for dilution since high water mark during voting*/\\n        ) {\\n            okToExecute = false;\\n        }\\n\\n        /*check if `proposal` approved by simple majority of members*/\\n        if (okToExecute) {\\n            prop.status[2] = true; /*flag that proposal passed - allows baal-like extensions*/\\n            bool success = processActionProposal(proposalData); /*execute 'action'*/\\n            if (!success) {\\n                prop.status[3] = true;\\n            }\\n        }\\n\\n        emit ProcessProposal(id, prop.status[2], prop.status[3]); /*emit event reflecting that given proposal processed*/\\n    }\\n\\n    /// @notice Internal function to process 'action'[0] proposal.\\n    /// @param proposalData Packed multisend data to execute via Gnosis multisend library\\n    /// @return success Success or failure of execution\\n    function processActionProposal(bytes memory proposalData)\\n        private\\n        returns (bool success)\\n    {\\n        success = exec(\\n            multisendLibrary,\\n            0,\\n            proposalData,\\n            Enum.Operation.DelegateCall\\n        );\\n    }\\n\\n    /// @notice Cancel proposal prior to execution\\n    /// @dev Cancellable if proposal is during voting, sender is sponsor, governor, or if sponsor has fallen below threshold\\n    /// @param id Number of proposal in `proposals` mapping to process for execution.\\n    function cancelProposal(uint32 id) external nonReentrant {\\n        Proposal storage prop = proposals[id];\\n        require(state(id) == ProposalState.Voting, \\\"!voting\\\");\\n        require(\\n            _msgSender() == prop.sponsor ||\\n                sharesToken.getPastVotes(prop.sponsor, block.timestamp - 1) <\\n                sponsorThreshold ||\\n                isGovernor(_msgSender()),\\n            \\\"!cancellable\\\"\\n        );\\n        prop.status[0] = true;\\n        emit CancelProposal(id);\\n    }\\n\\n    /// @dev Function to Execute arbitrary code as baal - useful if funds are accidentally sent here\\n    /// @notice Can only be called by the avatar which means this can only be called if passed by another\\n    ///     proposal or by a delegated signer on the Safe\\n    /// @param _to address to call\\n    /// @param _value value to include in wei\\n    /// @param _data arbitrary transaction data\\n    function executeAsBaal(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external baalOnly {\\n        (bool success, ) = _to.call{value: _value}(_data);\\n        require(success, \\\"call failure execute\\\");\\n    }\\n\\n    // ****************\\n    // MEMBER FUNCTIONS\\n    // ****************\\n\\n    /// @notice Process member burn of `shares` and/or `loot` to claim 'fair share' of specified `tokens`\\n    /// @param to Account that receives 'fair share'.\\n    /// @param lootToBurn Baal pure economic weight to burn.\\n    /// @param sharesToBurn Baal voting weight to burn.\\n    /// @param tokens Array of tokens to include in rage quit calculation\\n    function ragequit(\\n        address to,\\n        uint256 sharesToBurn,\\n        uint256 lootToBurn,\\n        address[] calldata tokens\\n    ) external nonReentrant {\\n        for (uint256 i = 1; i < tokens.length; i++) {\\n                require(tokens[i] > tokens[i - 1], \\\"!order\\\");\\n        }\\n\\n        _ragequit(to, sharesToBurn, lootToBurn, tokens);\\n    }\\n\\n    /// @notice Internal execution of rage quite\\n    /// @param to Account that receives 'fair share'.\\n    /// @param lootToBurn Baal pure economic weight to burn.\\n    /// @param sharesToBurn Baal voting weight to burn.\\n    /// @param tokens Array of tokens to include in rage quit calculation\\n    function _ragequit(\\n        address to,\\n        uint256 sharesToBurn,\\n        uint256 lootToBurn,\\n        address[] memory tokens\\n    ) internal {\\n        uint256 _totalSupply = totalSupply();\\n\\n        if (lootToBurn != 0) {\\n            /*gas optimization*/\\n            _burnLoot(_msgSender(), lootToBurn); /*subtract `loot` from user account & Baal totals*/\\n        }\\n\\n        if (sharesToBurn != 0) {\\n            /*gas optimization*/\\n            _burnShares(_msgSender(), sharesToBurn); /*subtract `shares` from user account & Baal totals with erc20 accounting*/\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 balance;\\n            if(tokens[i] == ETH) {\\n                balance = address(target).balance;\\n            } else {\\n                (, bytes memory balanceData) = tokens[i].staticcall(\\n                    abi.encodeWithSelector(0x70a08231, address(target))\\n                ); /*get Baal token balances - 'balanceOf(address)'*/\\n                balance = abi.decode(balanceData, (uint256));\\n            }\\n\\n            uint256 amountToRagequit = ((lootToBurn + sharesToBurn) * balance) /\\n                _totalSupply; /*calculate 'fair shair' claims*/\\n\\n            if (amountToRagequit != 0) {\\n                /*gas optimization to allow higher maximum token limit*/\\n                tokens[i] == ETH\\n                    ? _safeTransferETH(to, amountToRagequit) /*execute 'safe' ETH transfer*/\\n                    : _safeTransfer(tokens[i], to, amountToRagequit); /*execute 'safe' token transfer*/\\n            }\\n        }\\n\\n        emit Ragequit(_msgSender(), to, lootToBurn, sharesToBurn, tokens); /*event reflects claims made against Baal*/\\n    }\\n\\n    /*******************\\n    GUILD MGMT FUNCTIONS\\n    *******************/\\n    /// @notice Baal-only function to set shaman status.\\n    /// @param _shamans Addresses of shaman contracts\\n    /// @param _permissions Permission level of each shaman in _shamans\\n    function setShamans(\\n        address[] calldata _shamans,\\n        uint256[] calldata _permissions\\n    ) external baalOnly {\\n        require(_shamans.length == _permissions.length, \\\"!array parity\\\"); /*check array lengths match*/\\n        for (uint256 i = 0; i < _shamans.length; i++) {\\n            uint256 permission = _permissions[i];\\n            if (adminLock)\\n                require(\\n                    permission != 1 &&\\n                        permission != 3 &&\\n                        permission != 5 &&\\n                        permission != 7,\\n                    \\\"admin lock\\\"\\n                );\\n            if (managerLock)\\n                require(\\n                    permission != 2 &&\\n                        permission != 3 &&\\n                        permission != 6 &&\\n                        permission != 7,\\n                    \\\"manager lock\\\"\\n                );\\n            if (governorLock)\\n                require(\\n                    permission != 4 &&\\n                        permission != 5 &&\\n                        permission != 6 &&\\n                        permission != 7,\\n                    \\\"governor lock\\\"\\n                );\\n            shamans[_shamans[i]] = permission;\\n            emit ShamanSet(_shamans[i], permission);\\n        }\\n    }\\n\\n    /// @notice Lock admin so setShamans cannot be called with admin changes\\n    function lockAdmin() external baalOnly {\\n        adminLock = true;\\n\\n        emit LockAdmin(adminLock);\\n    }\\n\\n    /// @notice Lock manager so setShamans cannot be called with manager changes\\n    function lockManager() external baalOnly {\\n        managerLock = true;\\n\\n        emit LockManager(managerLock);\\n    }\\n\\n    /// @notice Lock governor so setShamans cannot be called with governor changes\\n    function lockGovernor() external baalOnly {\\n        governorLock = true;\\n\\n        emit LockGovernor(governorLock);\\n    }\\n\\n    // ****************\\n    // SHAMAN FUNCTIONS\\n    // ****************\\n    /// @notice Baal-or-admin-only function to set admin config (pause/unpause shares/loot) and call function on token\\n    /// @param pauseShares Turn share transfers on or off\\n    /// @param pauseLoot Turn loot transfers on or off\\n    function setAdminConfig(bool pauseShares, bool pauseLoot)\\n        external\\n        baalOrAdminOnly\\n    {\\n\\n        if(pauseShares && !sharesToken.paused()){\\n            sharesToken.pause();\\n            emit SharesPaused(true);\\n        } else if(!pauseShares && sharesToken.paused()){\\n            sharesToken.unpause();\\n            emit SharesPaused(false);\\n        }\\n\\n        if(pauseLoot && !lootToken.paused()){\\n            lootToken.pause();\\n            emit LootPaused(true);\\n        } else if(!pauseLoot && lootToken.paused()){\\n            lootToken.unpause();\\n            emit LootPaused(false);\\n        }\\n    }\\n\\n    /// @notice Baal-or-manager-only function to mint shares.\\n    /// @param to Array of addresses to receive shares\\n    /// @param amount Array of amounts to mint\\n    function mintShares(address[] calldata to, uint256[] calldata amount)\\n        external\\n        baalOrManagerOnly\\n    {\\n        require(to.length == amount.length, \\\"!array parity\\\"); /*check array lengths match*/\\n        for (uint256 i = 0; i < to.length; i++) {\\n            _mintShares(to[i], amount[i]); /*grant `to` `amount` `shares`*/\\n        }\\n    }\\n\\n    /// @notice Minting function for Baal `shares`.\\n    /// @param to Address to receive shares\\n    /// @param shares Amount to mint\\n    function _mintShares(address to, uint256 shares) private {\\n        sharesToken.mint(to, shares);\\n    }\\n\\n    /// @notice Baal-or-manager-only function to burn shares.\\n    /// @param from Array of addresses to lose shares\\n    /// @param amount Array of amounts to burn\\n    function burnShares(address[] calldata from, uint256[] calldata amount)\\n        external\\n        baalOrManagerOnly\\n    {\\n        require(from.length == amount.length, \\\"!array parity\\\"); /*check array lengths match*/\\n        for (uint256 i = 0; i < from.length; i++) {\\n            _burnShares(from[i], amount[i]); /*grant `to` `amount` `shares`*/\\n        }\\n    }\\n\\n    /// @notice Burn function for Baal `shares`.\\n    /// @param from Address to lose shares\\n    /// @param shares Amount to burn\\n    function _burnShares(address from, uint256 shares) private {\\n        sharesToken.burn(from, shares);\\n    }\\n\\n    /// @notice Baal-or-manager-only function to mint loot.\\n    /// @param to Array of addresses to mint loot\\n    /// @param amount Array of amounts to mint\\n    function mintLoot(address[] calldata to, uint256[] calldata amount)\\n        external\\n        baalOrManagerOnly\\n    {\\n        require(to.length == amount.length, \\\"!array parity\\\"); /*check array lengths match*/\\n        for (uint256 i = 0; i < to.length; i++) {\\n            _mintLoot(to[i], amount[i]); /*grant `to` `amount` `shares`*/\\n        }\\n    }\\n\\n    /// @notice Minting function for Baal `loot`.\\n    /// @param to Address to mint loot\\n    /// @param loot Amount to mint\\n    function _mintLoot(address to, uint256 loot) private {\\n        lootToken.mint(to, loot);\\n    }\\n\\n    /// @notice Baal-or-manager-only function to burn loot.\\n    /// @param from Array of addresses to lose loot\\n    /// @param amount Array of amounts to burn\\n    function burnLoot(address[] calldata from, uint256[] calldata amount)\\n        external\\n        baalOrManagerOnly\\n    {\\n        require(from.length == amount.length, \\\"!array parity\\\"); /*check array lengths match*/\\n        for (uint256 i = 0; i < from.length; i++) {\\n            _burnLoot(from[i], amount[i]); /*grant `to` `amount` `shares`*/\\n        }\\n    }\\n\\n    /// @notice Burn function for Baal `loot`.\\n    /// @param from Address to lose loot\\n    /// @param loot Amount to burn\\n    function _burnLoot(address from, uint256 loot) private {\\n        lootToken.burn(from, loot);\\n    }\\n\\n    /// @notice Baal-or-governance-only function to change periods.\\n    /// @param _governanceConfig Encoded configuration parameters voting, grace period, tribute, quorum, sponsor threshold, retention bound\\n    function setGovernanceConfig(bytes memory _governanceConfig)\\n        external\\n        baalOrGovernorOnly\\n    {\\n        (\\n            uint32 voting,\\n            uint32 grace,\\n            uint256 newOffering,\\n            uint256 quorum,\\n            uint256 sponsor,\\n            uint256 minRetention\\n        ) = abi.decode(\\n                _governanceConfig,\\n                (uint32, uint32, uint256, uint256, uint256, uint256)\\n            );\\n        require(quorum >= 0 && minRetention <= 100, 'bad quorum');\\n        require(minRetention >= 0 && minRetention <= 100, 'bad minRetention');\\n\\n        // on initialization of governance config, there is no shares token\\n        // skip this check on initialization of governance config.\\n        if (sponsorThreshold > 0 && address(sharesToken) != address(0)) {\\n            require(sponsor <= totalShares(), 'sponsor > sharesSupply');\\n        }\\n\\n        if (voting != 0) votingPeriod = voting; /*if positive, reset min. voting periods to first `value`*/\\n        if (grace != 0) gracePeriod = grace; /*if positive, reset grace period to second `value`*/\\n        proposalOffering = newOffering; /*set new proposal offering amount */\\n        quorumPercent = quorum;\\n        sponsorThreshold = sponsor;\\n        minRetentionPercent = minRetention;\\n\\n        emit GovernanceConfigSet(\\n            voting,\\n            grace,\\n            newOffering,\\n            quorum,\\n            sponsor,\\n            minRetention\\n        );\\n    }\\n\\n    /// @notice Baal-or-governance only function to set trusted forwarder for meta-transactions.\\n    /// @param _trustedForwarderAddress Trusted forwarder's address\\n    function setTrustedForwarder(address _trustedForwarderAddress)\\n        external\\n        baalOrGovernorOnly\\n    {\\n        _setTrustedForwarder(_trustedForwarderAddress);\\n        emit SetTrustedForwarder(_trustedForwarderAddress);\\n    }\\n\\n    /***************\\n    GETTER FUNCTIONS\\n    ***************/\\n    /// @notice State helper to determine proposal state\\n    /// @param id Number of proposal in proposals\\n    /// @return Unborn -> Submitted -> Voting -> Grace -> Ready -> Processed\\n    ///         \\\\-> Cancelled  \\\\-> Defeated\\n    function state(uint32 id) public view returns (ProposalState) {\\n        Proposal memory prop = proposals[id];\\n        if (prop.id == 0) {\\n            /*Uninitialized state*/\\n            return ProposalState.Unborn;\\n        } else if (\\n            prop.status[0] /* cancelled */\\n        ) {\\n            return ProposalState.Cancelled;\\n        } else if (\\n            prop.votingStarts == 0 /*Voting has not started*/\\n        ) {\\n            return ProposalState.Submitted;\\n        } else if (\\n            block.timestamp <= prop.votingEnds /*Voting in progress*/\\n        ) {\\n            return ProposalState.Voting;\\n        } else if (\\n            block.timestamp <= prop.graceEnds /*Proposal in grace period*/\\n        ) {\\n            return ProposalState.Grace;\\n        } else if (\\n            prop.noVotes >= prop.yesVotes /*Voting has concluded and failed to pass*/\\n        ) {\\n            return ProposalState.Defeated;\\n        } else if (\\n            prop.status[1] /* processed */\\n        ) {\\n            return ProposalState.Processed;\\n        }\\n        /* Proposal is ready to be processed*/\\n        else {\\n            return ProposalState.Ready;\\n        }\\n    }\\n\\n    /// @notice Helper to get recorded proposal flags\\n    /// @param id Number of proposal in proposals\\n    /// @return [cancelled, processed, passed, actionFailed]\\n    function getProposalStatus(uint32 id)\\n        external\\n        view\\n        returns (bool[4] memory)\\n    {\\n        return proposals[id].status;\\n    }\\n\\n    /// @notice Helper to check if shaman permission contains admin capabilities\\n    /// @param shaman Address attempting to execute admin permissioned functions\\n    function isAdmin(address shaman) public view returns (bool) {\\n        uint256 permission = shamans[shaman];\\n        return (permission == 1 ||\\n            permission == 3 ||\\n            permission == 5 ||\\n            permission == 7);\\n    }\\n\\n    /// @notice Helper to check if shaman permission contains manager capabilities\\n    /// @param shaman Address attempting to execute manager permissioned functions\\n    function isManager(address shaman) public view returns (bool) {\\n        uint256 permission = shamans[shaman];\\n        return (permission == 2 ||\\n            permission == 3 ||\\n            permission == 6 ||\\n            permission == 7);\\n    }\\n\\n    /// @notice Helper to check if shaman permission contains governor capabilities\\n    /// @param shaman Address attempting to execute governor permissioned functions\\n    function isGovernor(address shaman) public view returns (bool) {\\n        uint256 permission = shamans[shaman];\\n        return (permission == 4 ||\\n            permission == 5 ||\\n            permission == 6 ||\\n            permission == 7);\\n    }\\n\\n    /// @notice Helper to check total supply of child loot contract\\n    function totalLoot() public view returns (uint256) {\\n        return lootToken.totalSupply();\\n    }\\n\\n    /// @notice Helper to check total supply of child shares contract\\n    function totalShares() public view returns (uint256) {\\n        return sharesToken.totalSupply();\\n    }\\n\\n    /// @notice Helper to check total supply of loot and shares\\n    function totalSupply() public view returns (uint256) {\\n        return totalLoot() + totalShares();\\n    }\\n\\n    /***************\\n    HELPER FUNCTIONS\\n    ***************/\\n    /// @notice Returns the keccak256 hash of calldata\\n    function hashOperation(bytes memory _transactions)\\n        public\\n        pure\\n        virtual\\n        returns (bytes32 hash)\\n    {\\n        return keccak256(abi.encode(_transactions));\\n    }\\n\\n    /// @notice Provides 'safe' {transfer} for ETH.\\n    function _safeTransferETH(address to, uint256 amount) internal {\\n        // transfer eth from target\\n        (bool success, ) = execAndReturnData(\\n            to,\\n            amount,\\n            \\\"\\\",\\n            Enum.Operation.Call\\n        );\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /// @notice Provides 'safe' {transfer} for tokens that do not consistently return 'true/false'.\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        (bool success, bytes memory data) = execAndReturnData(\\n            token,\\n            0,\\n            abi.encodeWithSelector(0xa9059cbb, to, amount),\\n            Enum.Operation.Call\\n        ); /*'transfer(address,uint)'*/\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"transfer failed\\\"\\n        ); /*checks success & allows non-conforming transfers*/\\n    }\\n\\n    /// @notice Provides access to message sender of a meta transaction (EIP-2771)\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n        returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    /// @notice Provides access to message data of a meta transaction (EIP-2771)\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n        returns (bytes calldata) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xa74529caeca9e73b0b5920900ede43f35a39a70a502c89bf324ca29ca80979bf\",\"license\":\"MIT\"},\"contracts/higherOrderFactories/BaalAdvTokenSummoner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"../Baal.sol\\\";\\nimport \\\"../interfaces/IBaalSummoner.sol\\\";\\n\\ncontract BaalAdvTokenSummoner is\\n    Initializable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    IBaalSummoner public _baalSummoner;\\n\\n    event setSummoner(address summoner);\\n\\n    event DeployBaalTokens(address lootToken, address sharesToken);\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /**\\n     * @dev Sets the address of the BaalSummoner contract\\n     * @param baalSummoner The address of the BaalSummoner contract\\n     */\\n    function setSummonerAddr(address baalSummoner) public onlyOwner {\\n        require(baalSummoner != address(0), \\\"zero address\\\");\\n        _baalSummoner = IBaalSummoner(baalSummoner);\\n        emit setSummoner(baalSummoner);\\n    }\\n\\n    /**\\n     * @dev Summon a new Baal contract with a new set of tokens\\n     * @param _safeAddr The address of the Gnosis Safe to be used as the treausry, 0x0 if new Safe\\n     * @param _forwarderAddr The address of the forwarder to be used, 0x0 if not set\\n     * @param _saltNonce The salt nonce to be used for the Safe contract\\n     * @param initializationMintParams The parameters for minting the tokens\\n     * @param initializationTokenParams The parameters for deploying the tokens\\n     * @param postInitializationActions The actions to be performed after the initialization\\n     */\\n    function summonBaalFromReferrer(\\n        address _safeAddr,\\n        address _forwarderAddr,\\n        uint256 _saltNonce,\\n        bytes calldata initializationMintParams,\\n        bytes calldata initializationTokenParams,\\n        bytes[] calldata postInitializationActions\\n    ) external {\\n        // summon tokens\\n        (address _lootToken, address _sharesToken) = deployTokens(\\n            initializationTokenParams\\n        );\\n\\n        // mint shares loot tokens\\n        mintTokens(initializationMintParams, _lootToken, _sharesToken);\\n\\n        // summon baal with new tokens\\n        address _baal = _baalSummoner.summonBaalFromReferrer(\\n            abi.encode(\\n                IBaalToken(_sharesToken).name(), \\n                IBaalToken(_sharesToken).symbol(),\\n                _safeAddr,\\n                _forwarderAddr,\\n                _lootToken,\\n                _sharesToken\\n            ),\\n            postInitializationActions,\\n            _saltNonce,\\n            bytes32(bytes(\\\"DHAdvTokenSummoner\\\")) // referrer\\n        );\\n\\n        // change token ownership to baal\\n        IBaalToken(_lootToken).transferOwnership(address(_baal));\\n        IBaalToken(_sharesToken).transferOwnership(address(_baal));\\n    }\\n\\n    /**\\n     * @dev mintTokens\\n     * @param initializationTokens The parameters for minting the tokens\\n     * @param _lootToken The loot token address\\n     * @param _sharesToken The shares token address\\n     */\\n    function mintTokens(\\n        bytes calldata initializationTokens,\\n        address _lootToken,\\n        address _sharesToken\\n    ) internal {\\n        (\\n            address[] memory summoners, // The address to mint initial tokens to\\n            uint256[] memory summonerShares, // The amount of shares to mint\\n            uint256[] memory summonerLoot // The amount of loot to mint\\n        ) = abi.decode(initializationTokens, (address[], uint256[], uint256[]));\\n\\n        require(\\n            summoners.length == summonerShares.length &&\\n                summoners.length == summonerLoot.length,\\n            \\\"!array parity\\\"\\n        ); /*check array lengths match*/\\n\\n        for (uint256 i = 0; i < summoners.length; i++) {\\n            if (summonerLoot[i] > 0) {\\n                IBaalToken(_lootToken).mint(\\n                    summoners[i],\\n                    summonerShares[i]\\n                ); /*grant `to` `amount` `loot`*/\\n            }\\n            if (summonerShares[i] > 0) {\\n                IBaalToken(_sharesToken).mint(\\n                    summoners[i],\\n                    summonerShares[i]\\n                ); /*grant `to` `amount` `shares`*/\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev deployTokens\\n     * @param initializationParams The parameters for deploying the tokens\\n     */\\n    function deployTokens(\\n        bytes calldata initializationParams\\n    ) internal returns (address lootToken, address sharesToken) {\\n        (\\n            string\\n                memory _name /*_name Name for erc20 `shares` accounting, empty if token */,\\n            string\\n                memory _symbol /*_symbol Symbol for erc20 `shares` accounting, empty if token*/,\\n            string\\n                memory _lootName /* name for erc20 `loot` accounting, empty if token */,\\n            string\\n                memory _lootSymbol /* symbol for erc20 `loot` accounting, empty if token*/,\\n            bool _transferableShares /* if shares is transferable */,\\n            bool _transferableLoot /* if loot is transferable */\\n        ) = abi.decode(\\n                initializationParams,\\n                (string, string, string, string, bool, bool)\\n            );\\n\\n        address lootSingleton = _baalSummoner.lootSingleton();\\n        address sharesSingleton = _baalSummoner.sharesSingleton();\\n\\n        lootToken = address(\\n            new ERC1967Proxy(\\n                lootSingleton,\\n                abi.encodeWithSelector(\\n                    IBaalToken(lootSingleton).setUp.selector,\\n                    _lootName,\\n                    _lootSymbol\\n                )\\n            )\\n        );\\n\\n        sharesToken = address(\\n            new ERC1967Proxy(\\n                sharesSingleton,\\n                abi.encodeWithSelector(\\n                    IBaalToken(sharesSingleton).setUp.selector,\\n                    _name,\\n                    _symbol\\n                )\\n            )\\n        );\\n        if (!_transferableShares) {\\n            IBaalToken(sharesToken).pause();\\n        }\\n        if (!_transferableLoot) {\\n            IBaalToken(lootToken).pause();\\n        }\\n\\n        emit DeployBaalTokens(lootToken, sharesToken);\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x1ab1ac15399fc88d5ca9ec2eb75d538c86bf2298141b8a15f6158bf8b8d3b2f7\",\"license\":\"MIT\"},\"contracts/interfaces/IBaalSummoner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IBaalSummoner {\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n    event BeaconUpgraded(address indexed beacon);\\n    event DaoReferral(bytes32 referrer, address daoAddress);\\n    event DeployBaalSafe(address baalSafe, address moduleAddr);\\n    event DeployBaalTokens(address lootToken, address sharesToken);\\n    event Initialized(uint8 version);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event SetAddrsVersion(uint256 version);\\n    event SummonBaal(\\n        address indexed baal,\\n        address indexed loot,\\n        address indexed shares,\\n        address safe,\\n        address forwarder,\\n        uint256 existingAddrs\\n    );\\n    event Upgraded(address indexed implementation);\\n\\n    function setAddrs(\\n        address _template,\\n        address _gnosisSingleton,\\n        address _gnosisFallbackLibrary,\\n        address _gnosisMultisendLibrary,\\n        address _gnosisSafeProxyFactory,\\n        address _moduleProxyFactory,\\n        address _lootSingleton,\\n        address _sharesSingleton\\n    ) external;\\n\\n    function initialize() external;\\n\\n    function transferOwnership(address newOwner) external;\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\\n    function renounceOwnership() external;\\n\\n    function summonBaal(bytes memory initializationParams, bytes[] memory initializationActions, uint256 _saltNonce)\\n        external\\n        returns (address);\\n    function summonBaalFromReferrer(\\n        bytes memory initializationParams,\\n        bytes[] memory initializationActions,\\n        uint256 _saltNonce,\\n        bytes32 referrer\\n    ) external payable returns (address);\\n\\n    function deployAndSetupSafe(address _moduleAddr) external returns (address);\\n    function deployTokens(string memory _name, string memory _symbol)\\n        external\\n        returns (address lootToken, address sharesToken);\\n\\n    function encodeMultisend(bytes[] memory _calls, address _target)\\n        external\\n        pure\\n        returns (bytes memory encodedMultisend);\\n    function addrsVersion() external view returns (uint256);\\n    function gnosisFallbackLibrary() external view returns (address);\\n    function gnosisMultisendLibrary() external view returns (address);\\n    function gnosisSingleton() external view returns (address);\\n    function lootSingleton() external view returns (address);\\n    function sharesSingleton() external view returns (address);\\n    function owner() external view returns (address);\\n    function proxiableUUID() external view returns (bytes32);\\n    function template() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc5eb34a9c49792956ed8574ce0fae742c3ea655101a890965caf7e7983e1be79\",\"license\":\"MIT\"},\"contracts/interfaces/IBaalToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IBaalToken {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function setUp(string memory _name, string memory _symbol) external;\\n\\n    function mint(address recipient, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function paused() external view returns (bool);\\n    \\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function snapshot() external returns(uint256);\\n\\n    function getCurrentSnapshotId() external returns(uint256);\\n\\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\\n\\n    // below is shares token specific\\n    struct Checkpoint {\\n        uint32 fromTimePoint;\\n        uint256 votes;\\n    }\\n\\n    function getPastVotes(address account, uint256 timePoint) external view returns (uint256);\\n\\n    function numCheckpoints(address) external view returns (uint256);\\n\\n    function getCheckpoint(address, uint256)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    function getVotes(address account) external view returns (uint256);\\n\\n    function delegates(address account) external view returns (address);\\n\\n    function delegationNonces(address account) external view returns (uint256);\\n\\n    function delegate(address delegatee) external;\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0817d09fef6022bf8b963060c7c576b5cc59cd4ac573da23b1ae7224cb272508\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 4454,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 4457,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6723,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3937,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 4057,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4436,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4751,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13831,
        "contract": "contracts/higherOrderFactories/BaalAdvTokenSummoner.sol:BaalAdvTokenSummoner",
        "label": "_baalSummoner",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IBaalSummoner)15077"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaalSummoner)15077": {
        "encoding": "inplace",
        "label": "contract IBaalSummoner",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}