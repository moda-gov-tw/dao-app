import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { MultisendEncoder, MultisendEncoderInterface } from "../MultisendEncoder";
export declare class MultisendEncoder__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NoTransactions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnequalArraysLengths";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "multisend";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "calldatas";
            readonly type: "bytes[]";
        }];
        readonly name: "encodeMultisend";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "enum Enum.Operation";
            readonly name: "operation";
            readonly type: "Enum.Operation";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): MultisendEncoderInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MultisendEncoder;
}
