import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export type ConditionFlatStruct = {
    parent: BigNumberish;
    paramType: BigNumberish;
    operator: BigNumberish;
    compValue: BytesLike;
};
export type ConditionFlatStructOutput = [number, number, number, string] & {
    parent: number;
    paramType: number;
    operator: number;
    compValue: string;
};
export interface RolesInterface extends utils.Interface {
    functions: {
        "allowFunction(bytes32,address,bytes4,uint8)": FunctionFragment;
        "allowTarget(bytes32,address,uint8)": FunctionFragment;
        "allowances(bytes32)": FunctionFragment;
        "assignRoles(address,bytes32[],bool[])": FunctionFragment;
        "avatar()": FunctionFragment;
        "defaultRoles(address)": FunctionFragment;
        "disableModule(address,address)": FunctionFragment;
        "enableModule(address)": FunctionFragment;
        "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
        "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
        "execTransactionWithRole(address,uint256,bytes,uint8,bytes32,bool)": FunctionFragment;
        "execTransactionWithRoleReturnData(address,uint256,bytes,uint8,bytes32,bool)": FunctionFragment;
        "getGuard()": FunctionFragment;
        "getModulesPaginated(address,uint256)": FunctionFragment;
        "guard()": FunctionFragment;
        "isModuleEnabled(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "revokeFunction(bytes32,address,bytes4)": FunctionFragment;
        "revokeTarget(bytes32,address)": FunctionFragment;
        "scopeFunction(bytes32,address,bytes4,(uint8,uint8,uint8,bytes)[],uint8)": FunctionFragment;
        "scopeTarget(bytes32,address)": FunctionFragment;
        "setAllowance(bytes32,uint128,uint128,uint128,uint64,uint64)": FunctionFragment;
        "setAvatar(address)": FunctionFragment;
        "setDefaultRole(address,bytes32)": FunctionFragment;
        "setGuard(address)": FunctionFragment;
        "setTarget(address)": FunctionFragment;
        "setTransactionUnwrapper(address,bytes4,address)": FunctionFragment;
        "setUp(bytes)": FunctionFragment;
        "target()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "unwrappers(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowFunction" | "allowTarget" | "allowances" | "assignRoles" | "avatar" | "defaultRoles" | "disableModule" | "enableModule" | "execTransactionFromModule" | "execTransactionFromModuleReturnData" | "execTransactionWithRole" | "execTransactionWithRoleReturnData" | "getGuard" | "getModulesPaginated" | "guard" | "isModuleEnabled" | "owner" | "renounceOwnership" | "revokeFunction" | "revokeTarget" | "scopeFunction" | "scopeTarget" | "setAllowance" | "setAvatar" | "setDefaultRole" | "setGuard" | "setTarget" | "setTransactionUnwrapper" | "setUp" | "target" | "transferOwnership" | "unwrappers"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowFunction", values: [BytesLike, string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "allowTarget", values: [BytesLike, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "allowances", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "assignRoles", values: [string, BytesLike[], boolean[]]): string;
    encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultRoles", values: [string]): string;
    encodeFunctionData(functionFragment: "disableModule", values: [string, string]): string;
    encodeFunctionData(functionFragment: "enableModule", values: [string]): string;
    encodeFunctionData(functionFragment: "execTransactionFromModule", values: [string, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "execTransactionFromModuleReturnData", values: [string, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "execTransactionWithRole", values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "execTransactionWithRoleReturnData", values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
    encodeFunctionData(functionFragment: "getModulesPaginated", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "guard", values?: undefined): string;
    encodeFunctionData(functionFragment: "isModuleEnabled", values: [string]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "revokeFunction", values: [BytesLike, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "revokeTarget", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "scopeFunction", values: [BytesLike, string, BytesLike, ConditionFlatStruct[], BigNumberish]): string;
    encodeFunctionData(functionFragment: "scopeTarget", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "setAllowance", values: [
        BytesLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "setAvatar", values: [string]): string;
    encodeFunctionData(functionFragment: "setDefaultRole", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
    encodeFunctionData(functionFragment: "setTarget", values: [string]): string;
    encodeFunctionData(functionFragment: "setTransactionUnwrapper", values: [string, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "target", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "unwrappers", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "allowFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "disableModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enableModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execTransactionFromModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execTransactionFromModuleReturnData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execTransactionWithRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execTransactionWithRoleReturnData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getModulesPaginated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isModuleEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "scopeFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "scopeTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTransactionUnwrapper", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unwrappers", data: BytesLike): Result;
    events: {
        "AllowFunction(bytes32,address,bytes4,uint8)": EventFragment;
        "AllowTarget(bytes32,address,uint8)": EventFragment;
        "AssignRoles(address,bytes32[],bool[])": EventFragment;
        "AvatarSet(address,address)": EventFragment;
        "ChangedGuard(address)": EventFragment;
        "ConsumeAllowance(bytes32,uint128,uint128)": EventFragment;
        "DisabledModule(address)": EventFragment;
        "EnabledModule(address)": EventFragment;
        "ExecutionFromModuleFailure(address)": EventFragment;
        "ExecutionFromModuleSuccess(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RevokeFunction(bytes32,address,bytes4)": EventFragment;
        "RevokeTarget(bytes32,address)": EventFragment;
        "RolesModSetup(address,address,address,address)": EventFragment;
        "ScopeFunction(bytes32,address,bytes4,(uint8,uint8,uint8,bytes)[],uint8)": EventFragment;
        "ScopeTarget(bytes32,address)": EventFragment;
        "SetAllowance(bytes32,uint128,uint128,uint128,uint64,uint64)": EventFragment;
        "SetDefaultRole(address,bytes32)": EventFragment;
        "SetUnwrapAdapter(address,bytes4,address)": EventFragment;
        "TargetSet(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AllowFunction"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AllowTarget"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AssignRoles"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ConsumeAllowance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokeFunction"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokeTarget"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RolesModSetup"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ScopeFunction"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ScopeTarget"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetAllowance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultRole"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetUnwrapAdapter"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}
export interface AllowFunctionEventObject {
    roleKey: string;
    targetAddress: string;
    selector: string;
    options: number;
}
export type AllowFunctionEvent = TypedEvent<[
    string,
    string,
    string,
    number
], AllowFunctionEventObject>;
export type AllowFunctionEventFilter = TypedEventFilter<AllowFunctionEvent>;
export interface AllowTargetEventObject {
    roleKey: string;
    targetAddress: string;
    options: number;
}
export type AllowTargetEvent = TypedEvent<[
    string,
    string,
    number
], AllowTargetEventObject>;
export type AllowTargetEventFilter = TypedEventFilter<AllowTargetEvent>;
export interface AssignRolesEventObject {
    module: string;
    roleKeys: string[];
    memberOf: boolean[];
}
export type AssignRolesEvent = TypedEvent<[
    string,
    string[],
    boolean[]
], AssignRolesEventObject>;
export type AssignRolesEventFilter = TypedEventFilter<AssignRolesEvent>;
export interface AvatarSetEventObject {
    previousAvatar: string;
    newAvatar: string;
}
export type AvatarSetEvent = TypedEvent<[string, string], AvatarSetEventObject>;
export type AvatarSetEventFilter = TypedEventFilter<AvatarSetEvent>;
export interface ChangedGuardEventObject {
    guard: string;
}
export type ChangedGuardEvent = TypedEvent<[string], ChangedGuardEventObject>;
export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;
export interface ConsumeAllowanceEventObject {
    allowanceKey: string;
    consumed: BigNumber;
    newBalance: BigNumber;
}
export type ConsumeAllowanceEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], ConsumeAllowanceEventObject>;
export type ConsumeAllowanceEventFilter = TypedEventFilter<ConsumeAllowanceEvent>;
export interface DisabledModuleEventObject {
    module: string;
}
export type DisabledModuleEvent = TypedEvent<[
    string
], DisabledModuleEventObject>;
export type DisabledModuleEventFilter = TypedEventFilter<DisabledModuleEvent>;
export interface EnabledModuleEventObject {
    module: string;
}
export type EnabledModuleEvent = TypedEvent<[string], EnabledModuleEventObject>;
export type EnabledModuleEventFilter = TypedEventFilter<EnabledModuleEvent>;
export interface ExecutionFromModuleFailureEventObject {
    module: string;
}
export type ExecutionFromModuleFailureEvent = TypedEvent<[
    string
], ExecutionFromModuleFailureEventObject>;
export type ExecutionFromModuleFailureEventFilter = TypedEventFilter<ExecutionFromModuleFailureEvent>;
export interface ExecutionFromModuleSuccessEventObject {
    module: string;
}
export type ExecutionFromModuleSuccessEvent = TypedEvent<[
    string
], ExecutionFromModuleSuccessEventObject>;
export type ExecutionFromModuleSuccessEventFilter = TypedEventFilter<ExecutionFromModuleSuccessEvent>;
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface RevokeFunctionEventObject {
    roleKey: string;
    targetAddress: string;
    selector: string;
}
export type RevokeFunctionEvent = TypedEvent<[
    string,
    string,
    string
], RevokeFunctionEventObject>;
export type RevokeFunctionEventFilter = TypedEventFilter<RevokeFunctionEvent>;
export interface RevokeTargetEventObject {
    roleKey: string;
    targetAddress: string;
}
export type RevokeTargetEvent = TypedEvent<[
    string,
    string
], RevokeTargetEventObject>;
export type RevokeTargetEventFilter = TypedEventFilter<RevokeTargetEvent>;
export interface RolesModSetupEventObject {
    initiator: string;
    owner: string;
    avatar: string;
    target: string;
}
export type RolesModSetupEvent = TypedEvent<[
    string,
    string,
    string,
    string
], RolesModSetupEventObject>;
export type RolesModSetupEventFilter = TypedEventFilter<RolesModSetupEvent>;
export interface ScopeFunctionEventObject {
    roleKey: string;
    targetAddress: string;
    selector: string;
    conditions: ConditionFlatStructOutput[];
    options: number;
}
export type ScopeFunctionEvent = TypedEvent<[
    string,
    string,
    string,
    ConditionFlatStructOutput[],
    number
], ScopeFunctionEventObject>;
export type ScopeFunctionEventFilter = TypedEventFilter<ScopeFunctionEvent>;
export interface ScopeTargetEventObject {
    roleKey: string;
    targetAddress: string;
}
export type ScopeTargetEvent = TypedEvent<[
    string,
    string
], ScopeTargetEventObject>;
export type ScopeTargetEventFilter = TypedEventFilter<ScopeTargetEvent>;
export interface SetAllowanceEventObject {
    allowanceKey: string;
    balance: BigNumber;
    maxBalance: BigNumber;
    refillAmount: BigNumber;
    refillInterval: BigNumber;
    refillTimestamp: BigNumber;
}
export type SetAllowanceEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
], SetAllowanceEventObject>;
export type SetAllowanceEventFilter = TypedEventFilter<SetAllowanceEvent>;
export interface SetDefaultRoleEventObject {
    module: string;
    defaultRoleKey: string;
}
export type SetDefaultRoleEvent = TypedEvent<[
    string,
    string
], SetDefaultRoleEventObject>;
export type SetDefaultRoleEventFilter = TypedEventFilter<SetDefaultRoleEvent>;
export interface SetUnwrapAdapterEventObject {
    to: string;
    selector: string;
    adapter: string;
}
export type SetUnwrapAdapterEvent = TypedEvent<[
    string,
    string,
    string
], SetUnwrapAdapterEventObject>;
export type SetUnwrapAdapterEventFilter = TypedEventFilter<SetUnwrapAdapterEvent>;
export interface TargetSetEventObject {
    previousTarget: string;
    newTarget: string;
}
export type TargetSetEvent = TypedEvent<[string, string], TargetSetEventObject>;
export type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;
export interface Roles extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RolesInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        allowTarget(roleKey: BytesLike, targetAddress: string, options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        allowances(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            refillAmount: BigNumber;
            maxBalance: BigNumber;
            refillInterval: BigNumber;
            balance: BigNumber;
            refillTimestamp: BigNumber;
        }>;
        assignRoles(module: string, roleKeys: BytesLike[], memberOf: boolean[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        avatar(overrides?: CallOverrides): Promise<[string]>;
        defaultRoles(arg0: string, overrides?: CallOverrides): Promise<[string]>;
        disableModule(prevModule: string, module: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        enableModule(module: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        execTransactionFromModule(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        execTransactionFromModuleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        execTransactionWithRole(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        execTransactionWithRoleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getGuard(overrides?: CallOverrides): Promise<[string] & {
            _guard: string;
        }>;
        getModulesPaginated(start: string, pageSize: BigNumberish, overrides?: CallOverrides): Promise<[string[], string] & {
            array: string[];
            next: string;
        }>;
        guard(overrides?: CallOverrides): Promise<[string]>;
        isModuleEnabled(_module: string, overrides?: CallOverrides): Promise<[boolean]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        revokeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        revokeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        scopeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, conditions: ConditionFlatStruct[], options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        scopeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setAllowance(key: BytesLike, balance: BigNumberish, maxBalance: BigNumberish, refillAmount: BigNumberish, refillInterval: BigNumberish, refillTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setAvatar(_avatar: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setDefaultRole(module: string, roleKey: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setGuard(_guard: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTarget(_target: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTransactionUnwrapper(to: string, selector: BytesLike, adapter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setUp(initParams: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        target(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        unwrappers(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;
    };
    allowFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, options: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    allowTarget(roleKey: BytesLike, targetAddress: string, options: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    allowances(arg0: BytesLike, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        refillAmount: BigNumber;
        maxBalance: BigNumber;
        refillInterval: BigNumber;
        balance: BigNumber;
        refillTimestamp: BigNumber;
    }>;
    assignRoles(module: string, roleKeys: BytesLike[], memberOf: boolean[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    avatar(overrides?: CallOverrides): Promise<string>;
    defaultRoles(arg0: string, overrides?: CallOverrides): Promise<string>;
    disableModule(prevModule: string, module: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    enableModule(module: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    execTransactionFromModule(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    execTransactionFromModuleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    execTransactionWithRole(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    execTransactionWithRoleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getGuard(overrides?: CallOverrides): Promise<string>;
    getModulesPaginated(start: string, pageSize: BigNumberish, overrides?: CallOverrides): Promise<[string[], string] & {
        array: string[];
        next: string;
    }>;
    guard(overrides?: CallOverrides): Promise<string>;
    isModuleEnabled(_module: string, overrides?: CallOverrides): Promise<boolean>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    revokeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    revokeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    scopeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, conditions: ConditionFlatStruct[], options: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    scopeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setAllowance(key: BytesLike, balance: BigNumberish, maxBalance: BigNumberish, refillAmount: BigNumberish, refillInterval: BigNumberish, refillTimestamp: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setAvatar(_avatar: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setDefaultRole(module: string, roleKey: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setGuard(_guard: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTarget(_target: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTransactionUnwrapper(to: string, selector: BytesLike, adapter: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setUp(initParams: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    target(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    unwrappers(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        allowFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, options: BigNumberish, overrides?: CallOverrides): Promise<void>;
        allowTarget(roleKey: BytesLike, targetAddress: string, options: BigNumberish, overrides?: CallOverrides): Promise<void>;
        allowances(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            refillAmount: BigNumber;
            maxBalance: BigNumber;
            refillInterval: BigNumber;
            balance: BigNumber;
            refillTimestamp: BigNumber;
        }>;
        assignRoles(module: string, roleKeys: BytesLike[], memberOf: boolean[], overrides?: CallOverrides): Promise<void>;
        avatar(overrides?: CallOverrides): Promise<string>;
        defaultRoles(arg0: string, overrides?: CallOverrides): Promise<string>;
        disableModule(prevModule: string, module: string, overrides?: CallOverrides): Promise<void>;
        enableModule(module: string, overrides?: CallOverrides): Promise<void>;
        execTransactionFromModule(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        execTransactionFromModuleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            returnData: string;
        }>;
        execTransactionWithRole(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: CallOverrides): Promise<boolean>;
        execTransactionWithRoleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            returnData: string;
        }>;
        getGuard(overrides?: CallOverrides): Promise<string>;
        getModulesPaginated(start: string, pageSize: BigNumberish, overrides?: CallOverrides): Promise<[string[], string] & {
            array: string[];
            next: string;
        }>;
        guard(overrides?: CallOverrides): Promise<string>;
        isModuleEnabled(_module: string, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        revokeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, overrides?: CallOverrides): Promise<void>;
        revokeTarget(roleKey: BytesLike, targetAddress: string, overrides?: CallOverrides): Promise<void>;
        scopeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, conditions: ConditionFlatStruct[], options: BigNumberish, overrides?: CallOverrides): Promise<void>;
        scopeTarget(roleKey: BytesLike, targetAddress: string, overrides?: CallOverrides): Promise<void>;
        setAllowance(key: BytesLike, balance: BigNumberish, maxBalance: BigNumberish, refillAmount: BigNumberish, refillInterval: BigNumberish, refillTimestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setAvatar(_avatar: string, overrides?: CallOverrides): Promise<void>;
        setDefaultRole(module: string, roleKey: BytesLike, overrides?: CallOverrides): Promise<void>;
        setGuard(_guard: string, overrides?: CallOverrides): Promise<void>;
        setTarget(_target: string, overrides?: CallOverrides): Promise<void>;
        setTransactionUnwrapper(to: string, selector: BytesLike, adapter: string, overrides?: CallOverrides): Promise<void>;
        setUp(initParams: BytesLike, overrides?: CallOverrides): Promise<void>;
        target(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        unwrappers(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "AllowFunction(bytes32,address,bytes4,uint8)"(roleKey?: null, targetAddress?: null, selector?: null, options?: null): AllowFunctionEventFilter;
        AllowFunction(roleKey?: null, targetAddress?: null, selector?: null, options?: null): AllowFunctionEventFilter;
        "AllowTarget(bytes32,address,uint8)"(roleKey?: null, targetAddress?: null, options?: null): AllowTargetEventFilter;
        AllowTarget(roleKey?: null, targetAddress?: null, options?: null): AllowTargetEventFilter;
        "AssignRoles(address,bytes32[],bool[])"(module?: null, roleKeys?: null, memberOf?: null): AssignRolesEventFilter;
        AssignRoles(module?: null, roleKeys?: null, memberOf?: null): AssignRolesEventFilter;
        "AvatarSet(address,address)"(previousAvatar?: string | null, newAvatar?: string | null): AvatarSetEventFilter;
        AvatarSet(previousAvatar?: string | null, newAvatar?: string | null): AvatarSetEventFilter;
        "ChangedGuard(address)"(guard?: null): ChangedGuardEventFilter;
        ChangedGuard(guard?: null): ChangedGuardEventFilter;
        "ConsumeAllowance(bytes32,uint128,uint128)"(allowanceKey?: null, consumed?: null, newBalance?: null): ConsumeAllowanceEventFilter;
        ConsumeAllowance(allowanceKey?: null, consumed?: null, newBalance?: null): ConsumeAllowanceEventFilter;
        "DisabledModule(address)"(module?: null): DisabledModuleEventFilter;
        DisabledModule(module?: null): DisabledModuleEventFilter;
        "EnabledModule(address)"(module?: null): EnabledModuleEventFilter;
        EnabledModule(module?: null): EnabledModuleEventFilter;
        "ExecutionFromModuleFailure(address)"(module?: string | null): ExecutionFromModuleFailureEventFilter;
        ExecutionFromModuleFailure(module?: string | null): ExecutionFromModuleFailureEventFilter;
        "ExecutionFromModuleSuccess(address)"(module?: string | null): ExecutionFromModuleSuccessEventFilter;
        ExecutionFromModuleSuccess(module?: string | null): ExecutionFromModuleSuccessEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "RevokeFunction(bytes32,address,bytes4)"(roleKey?: null, targetAddress?: null, selector?: null): RevokeFunctionEventFilter;
        RevokeFunction(roleKey?: null, targetAddress?: null, selector?: null): RevokeFunctionEventFilter;
        "RevokeTarget(bytes32,address)"(roleKey?: null, targetAddress?: null): RevokeTargetEventFilter;
        RevokeTarget(roleKey?: null, targetAddress?: null): RevokeTargetEventFilter;
        "RolesModSetup(address,address,address,address)"(initiator?: string | null, owner?: string | null, avatar?: string | null, target?: null): RolesModSetupEventFilter;
        RolesModSetup(initiator?: string | null, owner?: string | null, avatar?: string | null, target?: null): RolesModSetupEventFilter;
        "ScopeFunction(bytes32,address,bytes4,(uint8,uint8,uint8,bytes)[],uint8)"(roleKey?: null, targetAddress?: null, selector?: null, conditions?: null, options?: null): ScopeFunctionEventFilter;
        ScopeFunction(roleKey?: null, targetAddress?: null, selector?: null, conditions?: null, options?: null): ScopeFunctionEventFilter;
        "ScopeTarget(bytes32,address)"(roleKey?: null, targetAddress?: null): ScopeTargetEventFilter;
        ScopeTarget(roleKey?: null, targetAddress?: null): ScopeTargetEventFilter;
        "SetAllowance(bytes32,uint128,uint128,uint128,uint64,uint64)"(allowanceKey?: null, balance?: null, maxBalance?: null, refillAmount?: null, refillInterval?: null, refillTimestamp?: null): SetAllowanceEventFilter;
        SetAllowance(allowanceKey?: null, balance?: null, maxBalance?: null, refillAmount?: null, refillInterval?: null, refillTimestamp?: null): SetAllowanceEventFilter;
        "SetDefaultRole(address,bytes32)"(module?: null, defaultRoleKey?: null): SetDefaultRoleEventFilter;
        SetDefaultRole(module?: null, defaultRoleKey?: null): SetDefaultRoleEventFilter;
        "SetUnwrapAdapter(address,bytes4,address)"(to?: null, selector?: null, adapter?: null): SetUnwrapAdapterEventFilter;
        SetUnwrapAdapter(to?: null, selector?: null, adapter?: null): SetUnwrapAdapterEventFilter;
        "TargetSet(address,address)"(previousTarget?: string | null, newTarget?: string | null): TargetSetEventFilter;
        TargetSet(previousTarget?: string | null, newTarget?: string | null): TargetSetEventFilter;
    };
    estimateGas: {
        allowFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        allowTarget(roleKey: BytesLike, targetAddress: string, options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        allowances(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        assignRoles(module: string, roleKeys: BytesLike[], memberOf: boolean[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        avatar(overrides?: CallOverrides): Promise<BigNumber>;
        defaultRoles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        disableModule(prevModule: string, module: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        enableModule(module: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        execTransactionFromModule(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        execTransactionFromModuleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        execTransactionWithRole(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        execTransactionWithRoleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        getGuard(overrides?: CallOverrides): Promise<BigNumber>;
        getModulesPaginated(start: string, pageSize: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        guard(overrides?: CallOverrides): Promise<BigNumber>;
        isModuleEnabled(_module: string, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        revokeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        revokeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        scopeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, conditions: ConditionFlatStruct[], options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        scopeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setAllowance(key: BytesLike, balance: BigNumberish, maxBalance: BigNumberish, refillAmount: BigNumberish, refillInterval: BigNumberish, refillTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setAvatar(_avatar: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setDefaultRole(module: string, roleKey: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setGuard(_guard: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTarget(_target: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTransactionUnwrapper(to: string, selector: BytesLike, adapter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setUp(initParams: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        target(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        unwrappers(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        allowFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        allowTarget(roleKey: BytesLike, targetAddress: string, options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        allowances(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignRoles(module: string, roleKeys: BytesLike[], memberOf: boolean[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultRoles(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        disableModule(prevModule: string, module: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        enableModule(module: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        execTransactionFromModule(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        execTransactionFromModuleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        execTransactionWithRole(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        execTransactionWithRoleReturnData(to: string, value: BigNumberish, data: BytesLike, operation: BigNumberish, roleKey: BytesLike, shouldRevert: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getModulesPaginated(start: string, pageSize: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isModuleEnabled(_module: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        revokeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        revokeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        scopeFunction(roleKey: BytesLike, targetAddress: string, selector: BytesLike, conditions: ConditionFlatStruct[], options: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        scopeTarget(roleKey: BytesLike, targetAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setAllowance(key: BytesLike, balance: BigNumberish, maxBalance: BigNumberish, refillAmount: BigNumberish, refillInterval: BigNumberish, refillTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setAvatar(_avatar: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setDefaultRole(module: string, roleKey: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setGuard(_guard: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTarget(_target: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTransactionUnwrapper(to: string, selector: BytesLike, adapter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setUp(initParams: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        target(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        unwrappers(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
