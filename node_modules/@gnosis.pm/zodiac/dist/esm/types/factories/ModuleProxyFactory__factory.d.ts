import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ModuleProxyFactory, ModuleProxyFactoryInterface } from "../ModuleProxyFactory";
export declare class ModuleProxyFactory__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "FailedInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "address_";
            readonly type: "address";
        }];
        readonly name: "TakenAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "ZeroAddress";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "masterCopy";
            readonly type: "address";
        }];
        readonly name: "ModuleProxyCreation";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "masterCopy";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "initializer";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "saltNonce";
            readonly type: "uint256";
        }];
        readonly name: "deployModule";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "proxy";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ModuleProxyFactoryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ModuleProxyFactory;
}
