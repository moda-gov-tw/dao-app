var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { constants as ethersConstants } from "ethers";
import { getSingletonFactory } from "./singletonFactory";
import { KnownContracts } from "./types";
import { MasterCopyInitData } from "../contracts";
const { AddressZero } = ethersConstants;
const FactoryInitData = MasterCopyInitData[KnownContracts.FACTORY];
/**
 * Deploy the Module Proxy Factory via the singleton factory.
 * It will therefore get the same address on any chain.
 *
 * @param hre hardhat runtime environment
 * @returns The address of the deployed Module Proxy Factory, or the zero address if it was already deployed
 */
export const deployModuleFactory = (signer) => __awaiter(void 0, void 0, void 0, function* () {
    console.log("Deploying the Module Proxy Factory...");
    const singletonFactory = yield getSingletonFactory(signer);
    console.log("  Singleton factory used for deployment:", singletonFactory.address);
    const targetAddress = yield singletonFactory.callStatic.deploy(FactoryInitData.initCode, FactoryInitData.salt);
    if (targetAddress === AddressZero) {
        console.log(`  âœ” Module Proxy Factory already deployed to target address on ${signer.provider.network.name}.`);
        return AddressZero;
    }
    console.log("  Target Module Proxy Factory address:        ", targetAddress);
    const transactionResponse = yield singletonFactory.deploy(FactoryInitData.initCode, FactoryInitData.salt, { gasLimit: 1000000 });
    const result = yield transactionResponse.wait();
    console.log("  Deploy transaction hash:              ", result.transactionHash);
    if ((yield signer.provider.getCode(targetAddress)).length < 3) {
        // will return "0x" when there is no code
        throw new Error("  \x1B[31mâœ˜ Deployment unsuccessful: No code at target address.\x1B[0m");
    }
    else {
        console.log(`  \x1B[32mâœ” Successfully deployed the Module Proxy Factory to: ${targetAddress}\x1B[0m ðŸŽ‰`);
    }
    return targetAddress;
});
