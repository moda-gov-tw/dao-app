import { AbiCoder, Interface } from '@ethersproject/abi';
import { BigNumber } from '@ethersproject/bignumber';
import { parseEther, parseUnits } from '@ethersproject/units';
import { erc20Interface, erc20TransferFragment, erc721Interface, erc721TransferFragment, } from './interfaces';
import { TransactionType, } from './types';
const encodeErc20Transfer = (tx) => erc20Interface.encodeFunctionData(erc20TransferFragment, [
    tx.to,
    parseUnits(tx.amount, tx.decimals),
]);
const encodeErc721Transfer = (tx) => erc721Interface.encodeFunctionData(erc721TransferFragment, [
    tx.from,
    tx.to,
    tx.tokenId,
]);
const abiCoder = new AbiCoder();
const defaultValue = (paramType) => abiCoder._getCoder(paramType).defaultValue();
const encodeFunctionCall = (tx) => {
    const iface = new Interface(tx.abi);
    const values = iface.functions[tx.functionSignature].inputs.map((input) => tx.inputValues[input.name] || defaultValue(input));
    return iface.encodeFunctionData(tx.functionSignature, values);
};
export const encodeSingle = (tx) => {
    switch (tx.type) {
        case TransactionType.transferFunds:
            if (!tx.token) {
                // transfer ETH
                return {
                    to: tx.to,
                    value: parseEther(tx.amount).toHexString(),
                    data: '0x00',
                };
            }
            else {
                // transfer ERC20 token
                return {
                    to: tx.token,
                    value: '0x00',
                    data: encodeErc20Transfer(tx),
                };
            }
        case TransactionType.transferCollectible:
            return {
                to: tx.address,
                value: '0x00',
                data: encodeErc721Transfer(tx),
            };
        case TransactionType.callContract:
            return {
                to: tx.to,
                value: BigNumber.from(tx.value || '0x00').toHexString(),
                data: encodeFunctionCall(tx),
            };
        case TransactionType.raw:
            return {
                to: tx.to,
                value: BigNumber.from(tx.value || '0x00').toHexString(),
                data: tx.data || '0x00',
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlU2luZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuY29kZVNpbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBYSxNQUFNLG9CQUFvQixDQUFBO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBRTdELE9BQU8sRUFDTCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLGVBQWUsRUFDZixzQkFBc0IsR0FDdkIsTUFBTSxjQUFjLENBQUE7QUFDckIsT0FBTyxFQUlMLGVBQWUsR0FHaEIsTUFBTSxTQUFTLENBQUE7QUFFaEIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQWlDLEVBQUUsRUFBRSxDQUNoRSxjQUFjLENBQUMsa0JBQWtCLENBQUMscUJBQXFCLEVBQUU7SUFDdkQsRUFBRSxDQUFDLEVBQUU7SUFDTCxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDO0NBQ25DLENBQUMsQ0FBQTtBQUVKLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxFQUF1QyxFQUFFLEVBQUUsQ0FDdkUsZUFBZSxDQUFDLGtCQUFrQixDQUFDLHNCQUFzQixFQUFFO0lBQ3pELEVBQUUsQ0FBQyxJQUFJO0lBQ1AsRUFBRSxDQUFDLEVBQUU7SUFDTCxFQUFFLENBQUMsT0FBTztDQUNYLENBQUMsQ0FBQTtBQUVKLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUE7QUFDL0IsTUFBTSxZQUFZLEdBQUcsQ0FBQyxTQUFvQixFQUFFLEVBQUUsQ0FDNUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtBQUU5QyxNQUFNLGtCQUFrQixHQUFHLENBQUMsRUFBZ0MsRUFBRSxFQUFFO0lBQzlELE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNuQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQzdELENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQzdELENBQUE7SUFDRCxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFDL0QsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBb0IsRUFBbUIsRUFBRTtJQUNwRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUU7UUFDZixLQUFLLGVBQWUsQ0FBQyxhQUFhO1lBQ2hDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUNiLGVBQWU7Z0JBQ2YsT0FBTztvQkFDTCxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7b0JBQ1QsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFO29CQUMxQyxJQUFJLEVBQUUsTUFBTTtpQkFDYixDQUFBO2FBQ0Y7aUJBQU07Z0JBQ0wsdUJBQXVCO2dCQUN2QixPQUFPO29CQUNMLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSztvQkFDWixLQUFLLEVBQUUsTUFBTTtvQkFDYixJQUFJLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxDQUFDO2lCQUM5QixDQUFBO2FBQ0Y7UUFDSCxLQUFLLGVBQWUsQ0FBQyxtQkFBbUI7WUFDdEMsT0FBTztnQkFDTCxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU87Z0JBQ2QsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsSUFBSSxFQUFFLG9CQUFvQixDQUFDLEVBQUUsQ0FBQzthQUMvQixDQUFBO1FBQ0gsS0FBSyxlQUFlLENBQUMsWUFBWTtZQUMvQixPQUFPO2dCQUNMLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDVCxLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRTtnQkFDdkQsSUFBSSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsQ0FBQzthQUM3QixDQUFBO1FBQ0gsS0FBSyxlQUFlLENBQUMsR0FBRztZQUN0QixPQUFPO2dCQUNMLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDVCxLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRTtnQkFDdkQsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksTUFBTTthQUN4QixDQUFBO0tBQ0o7QUFDSCxDQUFDLENBQUEifQ==