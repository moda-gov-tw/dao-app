import { AbiCoder, Interface } from '@ethersproject/abi';
import { BigNumber, formatFixed } from '@ethersproject/bignumber';
import { Contract } from '@ethersproject/contracts';
import { formatEther } from '@ethersproject/units';
import { erc20Interface, erc20TransferFragment, erc721Interface, erc721TransferFragment, } from './interfaces';
import { TransactionType } from './types';
export const decodeSingle = async (transaction, provider, fetchAbi, id = '') => {
    const { to, data, value } = transaction;
    if (!data || BigNumber.from(data).isZero()) {
        // ETH transfer
        return {
            type: TransactionType.transferFunds,
            id,
            to,
            amount: formatEther(value).toString(),
            decimals: 18,
            token: null,
        };
    }
    let erc20TransferData = null;
    try {
        erc20TransferData = erc20Interface.decodeFunctionData(erc20TransferFragment, data);
    }
    catch (e) {
        // it's not an ERC20 transfer
    }
    if (erc20TransferData && BigNumber.from(value).isZero()) {
        const decimals = await new Contract(to, erc20Interface, provider).decimals();
        return {
            type: TransactionType.transferFunds,
            id,
            to: erc20TransferData.recipient,
            amount: formatFixed(erc20TransferData.amount, decimals),
            decimals,
            token: to,
        };
    }
    let erc721TransferData = null;
    try {
        erc721TransferData = erc721Interface.decodeFunctionData(erc721TransferFragment, data);
    }
    catch (e) {
        // it's not an ERC721 transfer
    }
    if (erc721TransferData && BigNumber.from(value).isZero()) {
        return {
            type: TransactionType.transferCollectible,
            id,
            from: erc721TransferData._from,
            to: erc721TransferData._to,
            tokenId: erc721TransferData._tokenId.toString(),
            address: to,
        };
    }
    // try to fetch the ABI
    let abi = '';
    if (fetchAbi) {
        try {
            abi = (await fetchAbi(to, data)) || '';
        }
        catch (e) {
            // could not fetch ABI
        }
    }
    if (abi) {
        const iface = new Interface(abi);
        let fragment;
        try {
            fragment = iface.getFunction(data.substring(0, 10).toLowerCase());
        }
        catch (e) {
            // ignore error if fragment is not found in abi
        }
        if (fragment) {
            return {
                type: TransactionType.callContract,
                id,
                to,
                abi,
                functionSignature: fragment.format(),
                inputValues: decodeArgs(data, fragment.inputs),
                value: BigNumber.from(value || '0x00').toString(),
            };
        }
    }
    return {
        type: TransactionType.raw,
        id,
        to,
        value: BigNumber.from(value || '0x00').toString(),
        data,
    };
};
// we slightly adjust ethers' default coerce function so we return BigNumbers as strings.
const abiCoder = new AbiCoder((name, value) => {
    if (!BigNumber.isBigNumber(value))
        return value;
    // Return as number if not too big.
    // (This is replicating the ethers' default coerce function.)
    const match = name.match('^u?int([0-9]+)$');
    if (match && parseInt(match[1]) <= 48) {
        return value.toNumber();
    }
    return value.toString();
});
const decodeArgs = (data, inputs) => {
    const result = abiCoder.decode(inputs, '0x' + data.substring(10));
    const keys = Object.keys(result);
    const namedKeys = keys.filter((key) => `${parseInt(key)}` !== key);
    const allArgsHaveNames = namedKeys.length * 2 === keys.length;
    const keysToUse = allArgsHaveNames ? namedKeys : keys;
    return Object.assign({}, ...keysToUse.map((key) => ({ [key]: result[key] })));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlU2luZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY29kZVNpbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBYSxNQUFNLG9CQUFvQixDQUFBO0FBRW5FLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDakUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUVsRCxPQUFPLEVBQ0wsY0FBYyxFQUNkLHFCQUFxQixFQUNyQixlQUFlLEVBQ2Ysc0JBQXNCLEdBQ3ZCLE1BQU0sY0FBYyxDQUFBO0FBQ3JCLE9BQU8sRUFBcUMsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBTzVFLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQy9CLFdBQTRCLEVBQzVCLFFBQWtCLEVBQ2xCLFFBQXFCLEVBQ3JCLEVBQUUsR0FBRyxFQUFFLEVBQ29CLEVBQUU7SUFDN0IsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsV0FBVyxDQUFBO0lBRXZDLElBQUksQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUMxQyxlQUFlO1FBQ2YsT0FBTztZQUNMLElBQUksRUFBRSxlQUFlLENBQUMsYUFBYTtZQUNuQyxFQUFFO1lBQ0YsRUFBRTtZQUNGLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxFQUFFO1lBQ1osS0FBSyxFQUFFLElBQUk7U0FDWixDQUFBO0tBQ0Y7SUFFRCxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQTtJQUM1QixJQUFJO1FBQ0YsaUJBQWlC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