import { Interface } from '@ethersproject/abi';
import { getAddress } from '@ethersproject/address';
import { BigNumber } from '@ethersproject/bignumber';
import { MULTI_SEND_ABI } from './encodeMulti';
const unpack = (packed, startIndex) => {
    // read operation from first 8 bits (= 2 hex digits)
    const operation = parseInt(packed.substring(startIndex, startIndex + 2), 16);
    // the next 40 characters are the to address
    const to = getAddress(`0x${packed.substring(startIndex + 2, startIndex + 42)}`);
    // then comes the uint256 value (= 64 hex digits)
    const value = BigNumber.from(`0x${packed.substring(startIndex + 42, startIndex + 106)}`).toHexString();
    // and the uint256 data length (= 64 hex digits)
    const hexDataLength = parseInt(packed.substring(startIndex + 106, startIndex + 170), 16);
    const endIndex = startIndex + 170 + hexDataLength * 2; // * 2 because each hex item is represented with 2 digits
    const data = `0x${packed.substring(startIndex + 170, endIndex)}`;
    return {
        operation,
        to,
        value,
        data,
        endIndex,
    };
};
export const decodeMulti = (data) => {
    const multiSendContract = new Interface(MULTI_SEND_ABI);
    const tx = multiSendContract.parseTransaction({ data });
    const [transactionsEncoded] = tx.args;
    const result = [];
    let startIndex = 2; // skip over 0x
    while (startIndex < transactionsEncoded.length) {
        const { endIndex, ...tx } = unpack(transactionsEncoded, startIndex);
        result.push(tx);
        startIndex = endIndex;
    }
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlTXVsdGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjb2RlTXVsdGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFFcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUc5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQWMsRUFBRSxVQUFrQixFQUFFLEVBQUU7SUFDcEQsb0RBQW9EO0lBQ3BELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDNUUsNENBQTRDO0lBQzVDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FDbkIsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQ3pELENBQUE7SUFDRCxpREFBaUQ7SUFDakQsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FDMUIsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxFQUFFLEVBQUUsVUFBVSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQzNELENBQUMsV0FBVyxFQUFFLENBQUE7SUFFZixnREFBZ0Q7SUFDaEQsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUM1QixNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUUsVUFBVSxHQUFHLEdBQUcsQ0FBQyxFQUNwRCxFQUFFLENBQ0gsQ0FBQTtJQUNELE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxHQUFHLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQSxDQUFDLHlEQUF5RDtJQUMvRyxNQUFNLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLEdBQUcsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFBO0lBQ2hFLE9BQU87UUFDTCxTQUFTO1FBQ1QsRUFBRTtRQUNGLEtBQUs7UUFDTCxJQUFJO1FBQ0osUUFBUTtLQUNULENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFZLEVBQXFCLEVBQUU7SUFDN0QsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN2RCxNQUFNLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDdkQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQTtJQUNyQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFFakIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBLENBQUMsZUFBZTtJQUNsQyxPQUFPLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7UUFDOUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUNuRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ2YsVUFBVSxHQUFHLFFBQVEsQ0FBQTtLQUN0QjtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQyxDQUFBIn0=