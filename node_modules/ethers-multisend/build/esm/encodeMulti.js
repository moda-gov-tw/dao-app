import { Interface } from '@ethersproject/abi';
import { hexDataLength } from '@ethersproject/bytes';
import { pack } from '@ethersproject/solidity';
import { OperationType } from './types';
export const MULTI_SEND_ABI = ['function multiSend(bytes memory transactions)'];
const MULTI_SEND_CONTRACT_ADDRESS = '0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761';
/// Encodes the transaction as packed bytes of:
/// - `operation` as a `uint8` with `0` for a `call` or `1` for a `delegatecall` (=> 1 byte),
/// - `to` as an `address` (=> 20 bytes),
/// - `value` as a `uint256` (=> 32 bytes),
/// -  length of `data` as a `uint256` (=> 32 bytes),
/// - `data` as `bytes`.
const encodePacked = (tx) => pack(['uint8', 'address', 'uint256', 'uint256', 'bytes'], [
    tx.operation || OperationType.Call,
    tx.to,
    tx.value,
    hexDataLength(tx.data),
    tx.data,
]);
const remove0x = (hexString) => hexString.substr(2);
// Encodes a batch of module transactions into a single multiSend module transaction.
// A module transaction is an object with fields corresponding to a Gnosis Safe's (i.e., Zodiac IAvatar's) `execTransactionFromModule` method parameters.
// For more information refer to https://docs.gnosis.io/safe/docs/contracts_details/#gnosis-safe-transactions.
export const encodeMulti = (transactions, multiSendContractAddress = MULTI_SEND_CONTRACT_ADDRESS) => {
    const transactionsEncoded = '0x' + transactions.map(encodePacked).map(remove0x).join('');
    const multiSendContract = new Interface(MULTI_SEND_ABI);
    const data = multiSendContract.encodeFunctionData('multiSend', [
        transactionsEncoded,
    ]);
    return {
        operation: OperationType.DelegateCall,
        to: multiSendContractAddress || MULTI_SEND_CONTRACT_ADDRESS,
        value: '0x00',
        data,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlTXVsdGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5jb2RlTXVsdGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFFOUMsT0FBTyxFQUFtQixhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFeEQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsK0NBQStDLENBQUMsQ0FBQTtBQUMvRSxNQUFNLDJCQUEyQixHQUFHLDRDQUE0QyxDQUFBO0FBRWhGLCtDQUErQztBQUMvQyw2RkFBNkY7QUFDN0YseUNBQXlDO0FBQ3pDLDJDQUEyQztBQUMzQyxxREFBcUQ7QUFDckQsd0JBQXdCO0FBQ3hCLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBbUIsRUFBRSxFQUFFLENBQzNDLElBQUksQ0FDRixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFDbkQ7SUFDRSxFQUFFLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxJQUFJO0lBQ2xDLEVBQUUsQ0FBQyxFQUFFO0lBQ0wsRUFBRSxDQUFDLEtBQUs7SUFDUixhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztJQUN0QixFQUFFLENBQUMsSUFBSTtDQUNSLENBQ0YsQ0FBQTtBQUVILE1BQU0sUUFBUSxHQUFHLENBQUMsU0FBaUIsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUUzRCxxRkFBcUY7QUFDckYseUpBQXlKO0FBQ3pKLDhHQUE4RztBQUM5RyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDekIsWUFBd0MsRUFDeEMsMkJBQW1DLDJCQUEyQixFQUM3QyxFQUFFO0lBQ25CLE1BQU0sbUJBQW1CLEdBQ3ZCLElBQUksR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFOUQsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN2RCxNQUFNLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUU7UUFDN0QsbUJBQW1CO0tBQ3BCLENBQUMsQ0FBQTtJQUVGLE9BQU87UUFDTCxTQUFTLEVBQUUsYUFBYSxDQUFDLFlBQVk7UUFDckMsRUFBRSxFQUFFLHdCQUF3QixJQUFJLDJCQUEyQjtRQUMzRCxLQUFLLEVBQUUsTUFBTTtRQUNiLElBQUk7S0FDTCxDQUFBO0FBQ0gsQ0FBQyxDQUFBIn0=