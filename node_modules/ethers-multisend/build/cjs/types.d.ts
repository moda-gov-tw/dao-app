export declare type ValueType = string | boolean | Array<ValueType> | {
    [key: string]: ValueType;
};
export declare enum TransactionType {
    transferFunds = "transferFunds",
    transferCollectible = "transferCollectible",
    callContract = "callContract",
    raw = "raw"
}
export interface CallContractTransactionInput {
    type: TransactionType.callContract;
    id: string;
    to: string;
    value: string;
    abi: string;
    functionSignature: string;
    inputValues: {
        [key: string]: ValueType;
    };
}
export interface TransferFundsTransactionInput {
    type: TransactionType.transferFunds;
    id: string;
    token: string | null;
    to: string;
    amount: string;
    decimals: number;
}
export interface TransferCollectibleTransactionInput {
    type: TransactionType.transferCollectible;
    id: string;
    address: string;
    tokenId: string;
    to: string;
    from: string;
}
export interface RawTransactionInput {
    type: TransactionType.raw;
    id: string;
    to: string;
    value: string;
    data: string;
}
export declare type TransactionInput = CallContractTransactionInput | TransferFundsTransactionInput | TransferCollectibleTransactionInput | RawTransactionInput;
export declare enum OperationType {
    Call = 0,
    DelegateCall = 1
}
export interface MetaTransaction {
    readonly to: string;
    readonly value: string;
    readonly data: string;
    readonly operation?: OperationType;
}
