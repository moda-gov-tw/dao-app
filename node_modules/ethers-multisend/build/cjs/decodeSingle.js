"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeSingle = void 0;
const abi_1 = require("@ethersproject/abi");
const bignumber_1 = require("@ethersproject/bignumber");
const contracts_1 = require("@ethersproject/contracts");
const units_1 = require("@ethersproject/units");
const interfaces_1 = require("./interfaces");
const types_1 = require("./types");
const decodeSingle = async (transaction, provider, fetchAbi, id = '') => {
    const { to, data, value } = transaction;
    if (!data || bignumber_1.BigNumber.from(data).isZero()) {
        // ETH transfer
        return {
            type: types_1.TransactionType.transferFunds,
            id,
            to,
            amount: (0, units_1.formatEther)(value).toString(),
            decimals: 18,
            token: null,
        };
    }
    let erc20TransferData = null;
    try {
        erc20TransferData = interfaces_1.erc20Interface.decodeFunctionData(interfaces_1.erc20TransferFragment, data);
    }
    catch (e) {
        // it's not an ERC20 transfer
    }
    if (erc20TransferData && bignumber_1.BigNumber.from(value).isZero()) {
        const decimals = await new contracts_1.Contract(to, interfaces_1.erc20Interface, provider).decimals();
        return {
            type: types_1.TransactionType.transferFunds,
            id,
            to: erc20TransferData.recipient,
            amount: (0, bignumber_1.formatFixed)(erc20TransferData.amount, decimals),
            decimals,
            token: to,
        };
    }
    let erc721TransferData = null;
    try {
        erc721TransferData = interfaces_1.erc721Interface.decodeFunctionData(interfaces_1.erc721TransferFragment, data);
    }
    catch (e) {
        // it's not an ERC721 transfer
    }
    if (erc721TransferData && bignumber_1.BigNumber.from(value).isZero()) {
        return {
            type: types_1.TransactionType.transferCollectible,
            id,
            from: erc721TransferData._from,
            to: erc721TransferData._to,
            tokenId: erc721TransferData._tokenId.toString(),
            address: to,
        };
    }
    // try to fetch the ABI
    let abi = '';
    if (fetchAbi) {
        try {
            abi = (await fetchAbi(to, data)) || '';
        }
        catch (e) {
            // could not fetch ABI
        }
    }
    if (abi) {
        const iface = new abi_1.Interface(abi);
        let fragment;
        try {
            fragment = iface.getFunction(data.substring(0, 10).toLowerCase());
        }
        catch (e) {
            // ignore error if fragment is not found in abi
        }
        if (fragment) {
            return {
                type: types_1.TransactionType.callContract,
                id,
                to,
                abi,
                functionSignature: fragment.format(),
                inputValues: decodeArgs(data, fragment.inputs),
                value: bignumber_1.BigNumber.from(value || '0x00').toString(),
            };
        }
    }
    return {
        type: types_1.TransactionType.raw,
        id,
        to,
        value: bignumber_1.BigNumber.from(value || '0x00').toString(),
        data,
    };
};
exports.decodeSingle = decodeSingle;
// we slightly adjust ethers' default coerce function so we return BigNumbers as strings.
const abiCoder = new abi_1.AbiCoder((name, value) => {
    if (!bignumber_1.BigNumber.isBigNumber(value))
        return value;
    // Return as number if not too big.
    // (This is replicating the ethers' default coerce function.)
    const match = name.match('^u?int([0-9]+)$');
    if (match && parseInt(match[1]) <= 48) {
        return value.toNumber();
    }
    return value.toString();
});
const decodeArgs = (data, inputs) => {
    const result = abiCoder.decode(inputs, '0x' + data.substring(10));
    const keys = Object.keys(result);
    const namedKeys = keys.filter((key) => `${parseInt(key)}` !== key);
    const allArgsHaveNames = namedKeys.length * 2 === keys.length;
    const keysToUse = allArgsHaveNames ? namedKeys : keys;
    return Object.assign({}, ...keysToUse.map((key) => ({ [key]: result[key] })));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlU2luZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY29kZVNpbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0Q0FBbUU7QUFFbkUsd0RBQWlFO0FBQ2pFLHdEQUFtRDtBQUNuRCxnREFBa0Q7QUFFbEQsNkNBS3FCO0FBQ3JCLG1DQUE0RTtBQU9yRSxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQy9CLFdBQTRCLEVBQzVCLFFBQWtCLEVBQ2xCLFFBQXFCLEVBQ3JCLEVBQUUsR0FBRyxFQUFFLEVBQ29CLEVBQUU7SUFDN0IsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsV0FBVyxDQUFBO0lBRXZDLElBQUksQ0FBQyxJQUFJLElBQUkscUJBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDMUMsZUFBZTtRQUNmLE9BQU87WUFDTCxJQUFJLEVBQUUsdUJBQWUsQ0FBQyxhQUFhO1lBQ25DLEVBQUU7WUFDRixFQUFFO1lBQ0YsTUFBTSxFQUFFLElBQUEsbUJBQVcsRUFBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDckMsUUFBUSxFQUFFLEVBQUU7WUFDWixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUE7S0FDRjtJQUVELElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFBO0lBQzVCLElBQUk7UUFDRixpQkFBaUIsR0FBRywyQkFBYyxDQUFDLGtCQUFrQixDQUNuRCxrQ0FBcUIsRUFDckIsSUFBSSxDQUNMLENBQUE7S0FDRjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsNkJBQTZCO0tBQzlCO0lBRUQsSUFBSSxpQkFBaUIsSUFBSSxxQkFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUN2RCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksb0JBQVEsQ0FBQyxFQUFFLEVBQUUsMkJBQWMs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