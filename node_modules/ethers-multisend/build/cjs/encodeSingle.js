"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeSingle = void 0;
const abi_1 = require("@ethersproject/abi");
const bignumber_1 = require("@ethersproject/bignumber");
const units_1 = require("@ethersproject/units");
const interfaces_1 = require("./interfaces");
const types_1 = require("./types");
const encodeErc20Transfer = (tx) => interfaces_1.erc20Interface.encodeFunctionData(interfaces_1.erc20TransferFragment, [
    tx.to,
    (0, units_1.parseUnits)(tx.amount, tx.decimals),
]);
const encodeErc721Transfer = (tx) => interfaces_1.erc721Interface.encodeFunctionData(interfaces_1.erc721TransferFragment, [
    tx.from,
    tx.to,
    tx.tokenId,
]);
const abiCoder = new abi_1.AbiCoder();
const defaultValue = (paramType) => abiCoder._getCoder(paramType).defaultValue();
const encodeFunctionCall = (tx) => {
    const iface = new abi_1.Interface(tx.abi);
    const values = iface.functions[tx.functionSignature].inputs.map((input) => tx.inputValues[input.name] || defaultValue(input));
    return iface.encodeFunctionData(tx.functionSignature, values);
};
const encodeSingle = (tx) => {
    switch (tx.type) {
        case types_1.TransactionType.transferFunds:
            if (!tx.token) {
                // transfer ETH
                return {
                    to: tx.to,
                    value: (0, units_1.parseEther)(tx.amount).toHexString(),
                    data: '0x00',
                };
            }
            else {
                // transfer ERC20 token
                return {
                    to: tx.token,
                    value: '0x00',
                    data: encodeErc20Transfer(tx),
                };
            }
        case types_1.TransactionType.transferCollectible:
            return {
                to: tx.address,
                value: '0x00',
                data: encodeErc721Transfer(tx),
            };
        case types_1.TransactionType.callContract:
            return {
                to: tx.to,
                value: bignumber_1.BigNumber.from(tx.value || '0x00').toHexString(),
                data: encodeFunctionCall(tx),
            };
        case types_1.TransactionType.raw:
            return {
                to: tx.to,
                value: bignumber_1.BigNumber.from(tx.value || '0x00').toHexString(),
                data: tx.data || '0x00',
            };
    }
};
exports.encodeSingle = encodeSingle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlU2luZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuY29kZVNpbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0Q0FBbUU7QUFDbkUsd0RBQW9EO0FBQ3BELGdEQUE2RDtBQUU3RCw2Q0FLcUI7QUFDckIsbUNBT2dCO0FBRWhCLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUFpQyxFQUFFLEVBQUUsQ0FDaEUsMkJBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxrQ0FBcUIsRUFBRTtJQUN2RCxFQUFFLENBQUMsRUFBRTtJQUNMLElBQUEsa0JBQVUsRUFBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUM7Q0FDbkMsQ0FBQyxDQUFBO0FBRUosTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEVBQXVDLEVBQUUsRUFBRSxDQUN2RSw0QkFBZSxDQUFDLGtCQUFrQixDQUFDLG1DQUFzQixFQUFFO0lBQ3pELEVBQUUsQ0FBQyxJQUFJO0lBQ1AsRUFBRSxDQUFDLEVBQUU7SUFDTCxFQUFFLENBQUMsT0FBTztDQUNYLENBQUMsQ0FBQTtBQUVKLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBUSxFQUFFLENBQUE7QUFDL0IsTUFBTSxZQUFZLEdBQUcsQ0FBQyxTQUFvQixFQUFFLEVBQUUsQ0FDNUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtBQUU5QyxNQUFNLGtCQUFrQixHQUFHLENBQUMsRUFBZ0MsRUFBRSxFQUFFO0lBQzlELE1BQU0sS0FBSyxHQUFHLElBQUksZUFBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNuQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQzdELENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQzdELENBQUE7SUFDRCxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFDL0QsQ0FBQyxDQUFBO0FBRU0sTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFvQixFQUFtQixFQUFFO0lBQ3BFLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRTtRQUNmLEtBQUssdUJBQWUsQ0FBQyxhQUFhO1lBQ2hDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUNiLGVBQWU7Z0JBQ2YsT0FBTztvQkFDTCxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7b0JBQ1QsS0FBSyxFQUFFLElBQUEsa0JBQVUsRUFBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFO29CQUMxQyxJQUFJLEVBQUUsTUFBTTtpQkFDYixDQUFBO2FBQ0Y7aUJBQU07Z0JBQ0wsdUJBQXVCO2dCQUN2QixPQUFPO29CQUNMLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSztvQkFDWixLQUFLLEVBQUUsTUFBTTtvQkFDYixJQUFJLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxDQUFDO2lCQUM5QixDQUFBO2FBQ0Y7UUFDSCxLQUFLLHVCQUFlLENBQUMsbUJBQW1CO1lBQ3RDLE9BQU87Z0JBQ0wsRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPO2dCQUNkLEtBQUssRUFBRSxNQUFNO2dCQUNiLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLENBQUM7YUFDL0IsQ0FBQTtRQUNILEtBQUssdUJBQWUsQ0FBQyxZQUFZO1lBQy9CLE9BQU87Z0JBQ0wsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUNULEtBQUssRUFBRSxxQkFBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRTtnQkFDdkQsSUFBSSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsQ0FBQzthQUM3QixDQUFBO1FBQ0gsS0FBSyx1QkFBZSxDQUFDLEdBQUc7WUFDdEIsT0FBTztnQkFDTCxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ1QsS0FBSyxFQUFFLHFCQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFO2dCQUN2RCxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxNQUFNO2FBQ3hCLENBQUE7S0FDSjtBQUNILENBQUMsQ0FBQTtBQXJDWSxRQUFBLFlBQVksZ0JBcUN4QiJ9